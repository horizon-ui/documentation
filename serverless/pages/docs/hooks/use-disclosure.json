{"pageProps":{"mdxSource":{"compiledSource":"var m=Object.defineProperty,u=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var p=(n,t,a)=>t in n?m(n,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):n[t]=a,e=(n,t)=>{for(var a in t||(t={}))l.call(t,a)&&p(n,a,t[a]);if(o)for(var a of o(t))i.call(t,a)&&p(n,a,t[a]);return n},d=(n,t)=>u(n,c(t));var s=(n,t)=>{var a={};for(var r in n)l.call(n,r)&&t.indexOf(r)<0&&(a[r]=n[r]);if(n!=null&&o)for(var r of o(n))t.indexOf(r)<0&&i.call(n,r)&&(a[r]=n[r]);return a};const makeShortcode=n=>function(a){return console.warn(\"Component \"+n+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},a))},PropsTable=makeShortcode(\"PropsTable\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var r=a,{components:n}=r,t=s(r,[\"components\"]);return mdx(MDXLayout,d(e(e({},layoutProps),t),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"useDisclosure\"),\" is a custom hook used to help handle common \",mdx(\"inlineCode\",{parentName:\"p\"},\"open\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"close\"),`, or\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"toggle\"),` scenarios. It can be used to control feedback component such as\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"/docs-horizon-ui-chakra/docs/overlay/modal\"}),\"Modal\"),`,\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"/docs-horizon-ui-chakra/docs/overlay/alert-dialog\"}),\"AlertDialog\"),`,\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"/docs-horizon-ui-chakra/docs/overlay/drawer\"}),\"Drawer\"),\", etc.\"),mdx(\"h2\",e({},{id:\"import\"}),\"Import\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`import { useDisclosure } from \"@chakra-ui/react\"\n`)),mdx(\"h2\",e({},{id:\"return-value\"}),\"Return value\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"useDisclosure\"),\" hook returns an object with the following fields:\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Name\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Type\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Default\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Description\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"isOpen\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"boolean\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"false\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"If \",mdx(\"inlineCode\",{parentName:\"td\"},\"true\"),\", it sets the controlled component to its visible state.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"onClose\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"function\")),mdx(\"td\",e({parentName:\"tr\"},{align:null})),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Callback function to set a falsy value for the \",mdx(\"inlineCode\",{parentName:\"td\"},\"isOpen\"),\" parameter.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"onOpen\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"function\")),mdx(\"td\",e({parentName:\"tr\"},{align:null})),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Callback function to set a truthy value for the \",mdx(\"inlineCode\",{parentName:\"td\"},\"isOpen\"),\" parameter.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"onToggle\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"function\")),mdx(\"td\",e({parentName:\"tr\"},{align:null})),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Callback function to toggle the value of the \",mdx(\"inlineCode\",{parentName:\"td\"},\"isOpen\"),\" parameter.\")))),mdx(\"h2\",e({},{id:\"usage\"}),\"Usage\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Drawer</Button>\n      <Drawer placement=\"right\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Basic Drawer</DrawerHeader>\n          <DrawerBody>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Drawer</Button>\n      <Drawer placement=\"right\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Basic Drawer</DrawerHeader>\n          <DrawerBody>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n`)),mdx(\"h2\",e({},{id:\"parameters\"}),\"Parameters\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"useDisclosure\"),` hook accepts an optional object with the following\nproperties:`),mdx(PropsTable,{of:\"useDisclosure\",mdxType:\"PropsTable\"}))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Chakra UI useDisclosure - Horizon UI","package":"@chakra-ui/hooks","description":"React hook to handle common open and close scenarios in UI components"}},"frontMatter":{"excerpt":"useDisclosure is a custom hook used to help handle common open, close, or","readTimeMinutes":2,"mdxContent":"---\ntitle: Chakra UI useDisclosure - Horizon UI\npackage: \"@chakra-ui/hooks\"\ndescription:\n  \"React hook to handle common open and close scenarios in UI components\"\n---\n\n`useDisclosure` is a custom hook used to help handle common `open`, `close`, or\n`toggle` scenarios. It can be used to control feedback component such as\n[Modal](/docs-horizon-ui-chakra/docs/overlay/modal),\n[AlertDialog](/docs-horizon-ui-chakra/docs/overlay/alert-dialog),\n[Drawer](/docs-horizon-ui-chakra/docs/overlay/drawer), etc.\n\n## Import\n\n```tsx\nimport { useDisclosure } from \"@chakra-ui/react\"\n```\n\n## Return value\n\nThe `useDisclosure` hook returns an object with the following fields:\n\n| Name       | Type       | Default | Description                                                         |\n| ---------- | ---------- | ------- | ------------------------------------------------------------------- |\n| `isOpen`   | `boolean`  | `false` | If `true`, it sets the controlled component to its visible state.   |\n| `onClose`  | `function` |         | Callback function to set a falsy value for the `isOpen` parameter.  |\n| `onOpen`   | `function` |         | Callback function to set a truthy value for the `isOpen` parameter. |\n| `onToggle` | `function` |         | Callback function to toggle the value of the `isOpen` parameter.    |\n\n## Usage\n\n```jsx\nfunction Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Drawer</Button>\n      <Drawer placement=\"right\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Basic Drawer</DrawerHeader>\n          <DrawerBody>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n```\n\n```tsx\nfunction Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Drawer</Button>\n      <Drawer placement=\"right\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Basic Drawer</DrawerHeader>\n          <DrawerBody>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n```\n\n## Parameters\n\nThe `useDisclosure` hook accepts an optional object with the following\nproperties:\n\n<PropsTable of=\"useDisclosure\" />\n","title":"Chakra UI useDisclosure - Horizon UI","package":"@chakra-ui/hooks","description":"React hook to handle common open and close scenarios in UI components","slug":"/docs/hooks/use-disclosure","lastEdited":{"date":"April 16, 2022","author":"Simmmple"},"headings":[{"text":"Import","id":"import","level":"h2"},{"text":"Return value","id":"return-value","level":"h2"},{"text":"Usage","id":"usage","level":"h2"},{"text":"Parameters","id":"parameters","level":"h2"}],"editUrl":"https://github.com/horizon-ui/horizon-ui-chakra/edit/main/website/pages/docs/hooks/use-disclosure.mdx","author":null,"tags":[]},"_superjson":{"values":{"frontMatter.author":["undefined"]}}},"__N_SSG":true}
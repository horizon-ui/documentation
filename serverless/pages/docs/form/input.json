{"pageProps":{"mdxSource":{"compiledSource":"var u=Object.defineProperty,c=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var t=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var d=(n,a,o)=>a in n?u(n,a,{enumerable:!0,configurable:!0,writable:!0,value:o}):n[a]=o,e=(n,a)=>{for(var o in a||(a={}))t.call(a,o)&&d(n,o,a[o]);if(p)for(var o of p(a))i.call(a,o)&&d(n,o,a[o]);return n},l=(n,a)=>c(n,h(a));var s=(n,a)=>{var o={};for(var r in n)t.call(n,r)&&a.indexOf(r)<0&&(o[r]=n[r]);if(n!=null&&p)for(var r of p(n))a.indexOf(r)<0&&i.call(n,r)&&(o[r]=n[r]);return o};const makeShortcode=n=>function(o){return console.warn(\"Component \"+n+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},o))},PropsTable=makeShortcode(\"PropsTable\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var r=o,{components:n}=r,a=s(r,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),a),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"Input\"),` component is a component that is used to get user input in a text\nfield.`),mdx(\"h2\",e({},{id:\"import\"}),\"Import\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`import { Input } from \"@chakra-ui/react\"\n`)),mdx(\"h2\",e({},{id:\"usage\"}),\"Usage\"),mdx(\"p\",null,\"Here's a basic usage example of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Input\"),\" component:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Input placeholder=\"Basic usage\" borderRadius=\"16px\" />\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Input placeholder=\"Basic usage\" borderRadius=\"16px\" />\n`)),mdx(\"h3\",e({},{id:\"changing-the-size-of-the-input\"}),\"Changing the size of the Input\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"Input\"),\" component comes in four sizes. The default is \",mdx(\"inlineCode\",{parentName:\"p\"},\"md\"),\".\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"xs\"),\" (\",mdx(\"inlineCode\",{parentName:\"li\"},\"24px\"),\")\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"sm\"),\" (\",mdx(\"inlineCode\",{parentName:\"li\"},\"32px\"),\")\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"md\"),\" (\",mdx(\"inlineCode\",{parentName:\"li\"},\"40px\"),\")\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"lg\"),\" (\",mdx(\"inlineCode\",{parentName:\"li\"},\"48px\"),\")\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Stack spacing={3}>\n  <Input placeholder=\"extra small size\" size=\"xs\" borderRadius=\"10px\" />\n  <Input placeholder=\"small size\" size=\"sm\" borderRadius=\"12px\" />\n  <Input placeholder=\"medium size\" size=\"md\" borderRadius=\"14px\" />\n  <Input placeholder=\"large size\" size=\"lg\" borderRadius=\"16px\" />\n</Stack>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Stack spacing={3}>\n  <Input placeholder=\"extra small size\" size=\"xs\" borderRadius=\"10px\" />\n  <Input placeholder=\"small size\" size=\"sm\" borderRadius=\"12px\" />\n  <Input placeholder=\"medium size\" size=\"md\" borderRadius=\"14px\" />\n  <Input placeholder=\"large size\" size=\"lg\" borderRadius=\"16px\" />\n</Stack>\n`)),mdx(\"h3\",e({},{id:\"changing-the-appearance-of-the-input\"}),\"Changing the appearance of the input\"),mdx(\"p\",null,\"The input component comes in 4 variants: \",mdx(\"inlineCode\",{parentName:\"p\"},\"outline\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"unstyled\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"flushed\"),`, and\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"filled\"),\". Pass the \",mdx(\"inlineCode\",{parentName:\"p\"},\"variant\"),\" prop and set it to one of these values.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Stack spacing={3}>\n  <Input variant=\"outline\" placeholder=\"Outline\" borderRadius=\"16px\" />\n  <Input variant=\"filled\" placeholder=\"Filled\" borderRadius=\"16px\" />\n  <Input variant=\"flushed\" placeholder=\"Flushed\" />\n  <Input variant=\"unstyled\" placeholder=\"Unstyled\" />\n</Stack>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Stack spacing={3}>\n  <Input variant=\"outline\" placeholder=\"Outline\" borderRadius=\"16px\" />\n  <Input variant=\"filled\" placeholder=\"Filled\" borderRadius=\"16px\" />\n  <Input variant=\"flushed\" placeholder=\"Flushed\" />\n  <Input variant=\"unstyled\" placeholder=\"Unstyled\" />\n</Stack>\n`)),mdx(\"h3\",e({},{id:\"left-and-right-addons\"}),\"Left and Right Addons\"),mdx(\"p\",null,\"Like bootstrap, you can add addons to the left and right of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Input\"),`\ncomponent. Chakra UI exports `,mdx(\"inlineCode\",{parentName:\"p\"},\"InputGroup\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"InputLeftAddon\"),`, and\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"InputRightAddon\"),\" to help with this use case.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Stack spacing={4}>\n  <InputGroup>\n    <InputLeftAddon children=\"+234\" borderRadius=\"16px\" />\n    <Input type=\"tel\" placeholder=\"phone number\" borderRadius=\"16px\" />\n  </InputGroup>\n\n  {/* If you add the size prop to \\`InputGroup\\`, it'll pass it to all its children. */}\n  <InputGroup size=\"sm\">\n    <InputLeftAddon children=\"https://\" borderRadius=\"10px\" />\n    <Input placeholder=\"mysite\" borderRadius=\"10px\" />\n    <InputRightAddon children=\".com\" borderRadius=\"10px\" />\n  </InputGroup>\n</Stack>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Stack spacing={4}>\n  <InputGroup>\n    <InputLeftAddon children=\"+234\" borderRadius=\"16px\" />\n    <Input type=\"tel\" placeholder=\"phone number\" borderRadius=\"16px\" />\n  </InputGroup>\n\n  {/* If you add the size prop to \\`InputGroup\\`, it'll pass it to all its children. */}\n  <InputGroup size=\"sm\">\n    <InputLeftAddon children=\"https://\" borderRadius=\"10px\" />\n    <Input placeholder=\"mysite\" borderRadius=\"10px\" />\n    <InputRightAddon children=\".com\" borderRadius=\"10px\" />\n  </InputGroup>\n</Stack>\n`)),mdx(\"h3\",e({},{id:\"add-elements-inside-input\"}),\"Add elements inside Input\"),mdx(\"p\",null,`In some scenarios, you might need to add an icon or button inside the input\ncomponent. Chakra UI exports `,mdx(\"inlineCode\",{parentName:\"p\"},\"InputLeftElement\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"InputRightElement\"),` to help\nwith this use case.`),mdx(\"p\",null,\"If the left or right is an icon or text, you can pass \",mdx(\"inlineCode\",{parentName:\"p\"},'pointerEvents=\"none\"'),` to\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"InputLeftElement\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"InputRightElement\"),` to ensure that clicking on them\nfocused the input.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Stack spacing={4}>\n  <InputGroup>\n    <InputLeftElement\n      pointerEvents=\"none\"\n      children={<PhoneIcon color=\"gray.300\" borderRadius=\"16px\" />}\n    />\n    <Input type=\"tel\" placeholder=\"Phone number\" borderRadius=\"16px\" />\n  </InputGroup>\n\n  <InputGroup>\n    <InputLeftElement\n      pointerEvents=\"none\"\n      color=\"gray.300\"\n      fontSize=\"1.2em\"\n      children=\"$\"\n      borderRadius=\"16px\"\n    />\n    <Input placeholder=\"Enter amount\" borderRadius=\"16px\" />\n    <InputRightElement\n      borderRadius=\"16px\"\n      children={<CheckIcon color=\"green.500\" />}\n    />\n  </InputGroup>\n</Stack>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Stack spacing={4}>\n  <InputGroup>\n    <InputLeftElement\n      pointerEvents=\"none\"\n      children={<PhoneIcon color=\"gray.300\" borderRadius=\"16px\" />}\n    />\n    <Input type=\"tel\" placeholder=\"Phone number\" borderRadius=\"16px\" />\n  </InputGroup>\n\n  <InputGroup>\n    <InputLeftElement\n      pointerEvents=\"none\"\n      color=\"gray.300\"\n      fontSize=\"1.2em\"\n      children=\"$\"\n      borderRadius=\"16px\"\n    />\n    <Input placeholder=\"Enter amount\" borderRadius=\"16px\" />\n    <InputRightElement\n      borderRadius=\"16px\"\n      children={<CheckIcon color=\"green.500\" />}\n    />\n  </InputGroup>\n</Stack>\n`)),mdx(\"h3\",e({},{id:\"password-input-example\"}),\"Password Input Example\"),mdx(\"p\",null,`Let's use these components to create a password input with a show/hide password\nfunctionality:`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function PasswordInput() {\n  const [show, setShow] = React.useState(false)\n  const handleClick = () => setShow(!show)\n\n  return (\n    <InputGroup size=\"md\">\n      <Input\n        pr=\"4.5rem\"\n        type={show ? \"text\" : \"password\"}\n        placeholder=\"Enter password\"\n        borderRadius=\"16px\"\n      />\n      <InputRightElement width=\"4.5rem\" borderRadius=\"16px\">\n        <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} borderRadius=\"10px\">\n          {show ? \"Hide\" : \"Show\"}\n        </Button>\n      </InputRightElement>\n    </InputGroup>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function PasswordInput() {\n  const [show, setShow] = React.useState(false)\n  const handleClick = () => setShow(!show)\n\n  return (\n    <InputGroup size=\"md\">\n      <Input\n        pr=\"4.5rem\"\n        type={show ? \"text\" : \"password\"}\n        placeholder=\"Enter password\"\n        borderRadius=\"16px\"\n      />\n      <InputRightElement width=\"4.5rem\" borderRadius=\"16px\">\n        <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} borderRadius=\"10px\">\n          {show ? \"Hide\" : \"Show\"}\n        </Button>\n      </InputRightElement>\n    </InputGroup>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"controlled-input\"}),\"Controlled Input\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function Example() {\n  const [value, setValue] = React.useState(\"\")\n  const handleChange = (event) => setValue(event.target.value)\n\n  return (\n    <>\n      <Text mb=\"8px\">Value: {value}</Text>\n      <Input\n        value={value}\n        onChange={handleChange}\n        placeholder=\"Here is a sample placeholder\"\n        size=\"sm\"\n        borderRadius=\"10px\"\n      />\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function Example() {\n  const [value, setValue] = React.useState(\"\")\n  const handleChange = (event) => setValue(event.target.value)\n\n  return (\n    <>\n      <Text mb=\"8px\">Value: {value}</Text>\n      <Input\n        value={value}\n        onChange={handleChange}\n        placeholder=\"Here is a sample placeholder\"\n        size=\"sm\"\n        borderRadius=\"10px\"\n      />\n    </>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"changing-the-focus-and-error-border-colors\"}),\"Changing the focus and error border colors\"),mdx(\"p\",null,`You can change the border color that shows when the input receives focus\n(`,mdx(\"inlineCode\",{parentName:\"p\"},\"focusBorderColor\"),\") and when \",mdx(\"inlineCode\",{parentName:\"p\"},\"isInvalid\"),\" is set to \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),\" (\",mdx(\"inlineCode\",{parentName:\"p\"},\"errorBorderColor\"),`).\nThe value can be set to a color in the theme object, like `,mdx(\"inlineCode\",{parentName:\"p\"},\"brand.400\"),`, or a raw\nCSS value.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Stack spacing={3}>\n  <Input\n    focusBorderColor=\"lime\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n  <Input\n    focusBorderColor=\"pink.400\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n  <Input\n    isInvalid\n    errorBorderColor=\"red.300\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n  <Input\n    isInvalid\n    errorBorderColor=\"crimson\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n</Stack>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Stack spacing={3}>\n  <Input\n    focusBorderColor=\"lime\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n  <Input\n    focusBorderColor=\"pink.400\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n  <Input\n    isInvalid\n    errorBorderColor=\"red.300\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n  <Input\n    isInvalid\n    errorBorderColor=\"crimson\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n</Stack>\n`)),mdx(\"h2\",e({},{id:\"props\"}),\"Props\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"Input\"),\" component composes \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs-horizon-ui-chakra/docs/layout/box\"}),\"Box\"),` so\nyou can pass all `,mdx(\"inlineCode\",{parentName:\"p\"},\"Box\"),\" props, and \",mdx(\"inlineCode\",{parentName:\"p\"},\"React.InputHTMLAttributes\"),\".\"),mdx(PropsTable,{of:\"Input\",mdxType:\"PropsTable\"}))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Chakra UI Input - Horizon UI","package":"@chakra-ui/input","image":"components/input.svg","description":"Input component is a component that is used to get user input in a text field."}},"frontMatter":{"excerpt":"The Input component is a component that is used to get user input in a text","readTimeMinutes":5,"mdxContent":"---\ntitle: Chakra UI Input - Horizon UI\npackage: \"@chakra-ui/input\"\nimage: \"components/input.svg\"\ndescription:\n  Input component is a component that is used to get user input in a text field.\n---\n\nThe `Input` component is a component that is used to get user input in a text\nfield.\n\n## Import\n\n```tsx\nimport { Input } from \"@chakra-ui/react\"\n```\n\n## Usage\n\nHere's a basic usage example of the `Input` component:\n\n```jsx\n<Input placeholder=\"Basic usage\" borderRadius=\"16px\" />\n```\n\n```tsx\n<Input placeholder=\"Basic usage\" borderRadius=\"16px\" />\n```\n\n### Changing the size of the Input\n\nThe `Input` component comes in four sizes. The default is `md`.\n\n- `xs` (`24px`)\n- `sm` (`32px`)\n- `md` (`40px`)\n- `lg` (`48px`)\n\n```jsx\n<Stack spacing={3}>\n  <Input placeholder=\"extra small size\" size=\"xs\" borderRadius=\"10px\" />\n  <Input placeholder=\"small size\" size=\"sm\" borderRadius=\"12px\" />\n  <Input placeholder=\"medium size\" size=\"md\" borderRadius=\"14px\" />\n  <Input placeholder=\"large size\" size=\"lg\" borderRadius=\"16px\" />\n</Stack>\n```\n\n```tsx\n<Stack spacing={3}>\n  <Input placeholder=\"extra small size\" size=\"xs\" borderRadius=\"10px\" />\n  <Input placeholder=\"small size\" size=\"sm\" borderRadius=\"12px\" />\n  <Input placeholder=\"medium size\" size=\"md\" borderRadius=\"14px\" />\n  <Input placeholder=\"large size\" size=\"lg\" borderRadius=\"16px\" />\n</Stack>\n```\n\n### Changing the appearance of the input\n\nThe input component comes in 4 variants: `outline`, `unstyled`, `flushed`, and\n`filled`. Pass the `variant` prop and set it to one of these values.\n\n```jsx\n<Stack spacing={3}>\n  <Input variant=\"outline\" placeholder=\"Outline\" borderRadius=\"16px\" />\n  <Input variant=\"filled\" placeholder=\"Filled\" borderRadius=\"16px\" />\n  <Input variant=\"flushed\" placeholder=\"Flushed\" />\n  <Input variant=\"unstyled\" placeholder=\"Unstyled\" />\n</Stack>\n```\n\n```tsx\n<Stack spacing={3}>\n  <Input variant=\"outline\" placeholder=\"Outline\" borderRadius=\"16px\" />\n  <Input variant=\"filled\" placeholder=\"Filled\" borderRadius=\"16px\" />\n  <Input variant=\"flushed\" placeholder=\"Flushed\" />\n  <Input variant=\"unstyled\" placeholder=\"Unstyled\" />\n</Stack>\n```\n\n### Left and Right Addons\n\nLike bootstrap, you can add addons to the left and right of the `Input`\ncomponent. Chakra UI exports `InputGroup`, `InputLeftAddon`, and\n`InputRightAddon` to help with this use case.\n\n```jsx\n<Stack spacing={4}>\n  <InputGroup>\n    <InputLeftAddon children=\"+234\" borderRadius=\"16px\" />\n    <Input type=\"tel\" placeholder=\"phone number\" borderRadius=\"16px\" />\n  </InputGroup>\n\n  {/* If you add the size prop to `InputGroup`, it'll pass it to all its children. */}\n  <InputGroup size=\"sm\">\n    <InputLeftAddon children=\"https://\" borderRadius=\"10px\" />\n    <Input placeholder=\"mysite\" borderRadius=\"10px\" />\n    <InputRightAddon children=\".com\" borderRadius=\"10px\" />\n  </InputGroup>\n</Stack>\n```\n\n```tsx\n<Stack spacing={4}>\n  <InputGroup>\n    <InputLeftAddon children=\"+234\" borderRadius=\"16px\" />\n    <Input type=\"tel\" placeholder=\"phone number\" borderRadius=\"16px\" />\n  </InputGroup>\n\n  {/* If you add the size prop to `InputGroup`, it'll pass it to all its children. */}\n  <InputGroup size=\"sm\">\n    <InputLeftAddon children=\"https://\" borderRadius=\"10px\" />\n    <Input placeholder=\"mysite\" borderRadius=\"10px\" />\n    <InputRightAddon children=\".com\" borderRadius=\"10px\" />\n  </InputGroup>\n</Stack>\n```\n\n### Add elements inside Input\n\nIn some scenarios, you might need to add an icon or button inside the input\ncomponent. Chakra UI exports `InputLeftElement` and `InputRightElement` to help\nwith this use case.\n\nIf the left or right is an icon or text, you can pass `pointerEvents=\"none\"` to\n`InputLeftElement` or `InputRightElement` to ensure that clicking on them\nfocused the input.\n\n```jsx\n<Stack spacing={4}>\n  <InputGroup>\n    <InputLeftElement\n      pointerEvents=\"none\"\n      children={<PhoneIcon color=\"gray.300\" borderRadius=\"16px\" />}\n    />\n    <Input type=\"tel\" placeholder=\"Phone number\" borderRadius=\"16px\" />\n  </InputGroup>\n\n  <InputGroup>\n    <InputLeftElement\n      pointerEvents=\"none\"\n      color=\"gray.300\"\n      fontSize=\"1.2em\"\n      children=\"$\"\n      borderRadius=\"16px\"\n    />\n    <Input placeholder=\"Enter amount\" borderRadius=\"16px\" />\n    <InputRightElement\n      borderRadius=\"16px\"\n      children={<CheckIcon color=\"green.500\" />}\n    />\n  </InputGroup>\n</Stack>\n```\n\n```tsx\n<Stack spacing={4}>\n  <InputGroup>\n    <InputLeftElement\n      pointerEvents=\"none\"\n      children={<PhoneIcon color=\"gray.300\" borderRadius=\"16px\" />}\n    />\n    <Input type=\"tel\" placeholder=\"Phone number\" borderRadius=\"16px\" />\n  </InputGroup>\n\n  <InputGroup>\n    <InputLeftElement\n      pointerEvents=\"none\"\n      color=\"gray.300\"\n      fontSize=\"1.2em\"\n      children=\"$\"\n      borderRadius=\"16px\"\n    />\n    <Input placeholder=\"Enter amount\" borderRadius=\"16px\" />\n    <InputRightElement\n      borderRadius=\"16px\"\n      children={<CheckIcon color=\"green.500\" />}\n    />\n  </InputGroup>\n</Stack>\n```\n\n### Password Input Example\n\nLet's use these components to create a password input with a show/hide password\nfunctionality:\n\n```jsx\nfunction PasswordInput() {\n  const [show, setShow] = React.useState(false)\n  const handleClick = () => setShow(!show)\n\n  return (\n    <InputGroup size=\"md\">\n      <Input\n        pr=\"4.5rem\"\n        type={show ? \"text\" : \"password\"}\n        placeholder=\"Enter password\"\n        borderRadius=\"16px\"\n      />\n      <InputRightElement width=\"4.5rem\" borderRadius=\"16px\">\n        <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} borderRadius=\"10px\">\n          {show ? \"Hide\" : \"Show\"}\n        </Button>\n      </InputRightElement>\n    </InputGroup>\n  )\n}\n```\n\n```tsx\nfunction PasswordInput() {\n  const [show, setShow] = React.useState(false)\n  const handleClick = () => setShow(!show)\n\n  return (\n    <InputGroup size=\"md\">\n      <Input\n        pr=\"4.5rem\"\n        type={show ? \"text\" : \"password\"}\n        placeholder=\"Enter password\"\n        borderRadius=\"16px\"\n      />\n      <InputRightElement width=\"4.5rem\" borderRadius=\"16px\">\n        <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} borderRadius=\"10px\">\n          {show ? \"Hide\" : \"Show\"}\n        </Button>\n      </InputRightElement>\n    </InputGroup>\n  )\n}\n```\n\n### Controlled Input\n\n```jsx\nfunction Example() {\n  const [value, setValue] = React.useState(\"\")\n  const handleChange = (event) => setValue(event.target.value)\n\n  return (\n    <>\n      <Text mb=\"8px\">Value: {value}</Text>\n      <Input\n        value={value}\n        onChange={handleChange}\n        placeholder=\"Here is a sample placeholder\"\n        size=\"sm\"\n        borderRadius=\"10px\"\n      />\n    </>\n  )\n}\n```\n\n```tsx\nfunction Example() {\n  const [value, setValue] = React.useState(\"\")\n  const handleChange = (event) => setValue(event.target.value)\n\n  return (\n    <>\n      <Text mb=\"8px\">Value: {value}</Text>\n      <Input\n        value={value}\n        onChange={handleChange}\n        placeholder=\"Here is a sample placeholder\"\n        size=\"sm\"\n        borderRadius=\"10px\"\n      />\n    </>\n  )\n}\n```\n\n### Changing the focus and error border colors\n\nYou can change the border color that shows when the input receives focus\n(`focusBorderColor`) and when `isInvalid` is set to `true` (`errorBorderColor`).\nThe value can be set to a color in the theme object, like `brand.400`, or a raw\nCSS value.\n\n```jsx\n<Stack spacing={3}>\n  <Input\n    focusBorderColor=\"lime\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n  <Input\n    focusBorderColor=\"pink.400\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n  <Input\n    isInvalid\n    errorBorderColor=\"red.300\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n  <Input\n    isInvalid\n    errorBorderColor=\"crimson\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n</Stack>\n```\n\n```tsx\n<Stack spacing={3}>\n  <Input\n    focusBorderColor=\"lime\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n  <Input\n    focusBorderColor=\"pink.400\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n  <Input\n    isInvalid\n    errorBorderColor=\"red.300\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n  <Input\n    isInvalid\n    errorBorderColor=\"crimson\"\n    placeholder=\"Here is a sample placeholder\"\n    borderRadius=\"16px\"\n  />\n</Stack>\n```\n\n## Props\n\nThe `Input` component composes [Box](/docs-horizon-ui-chakra/docs/layout/box) so\nyou can pass all `Box` props, and `React.InputHTMLAttributes`.\n\n<PropsTable of=\"Input\" />\n","title":"Chakra UI Input - Horizon UI","package":"@chakra-ui/input","image":"components/input.svg","description":"Input component is a component that is used to get user input in a text field.","slug":"/docs/form/input","lastEdited":{"date":"April 16, 2022","author":"Simmmple"},"headings":[{"text":"Import","id":"import","level":"h2"},{"text":"Usage","id":"usage","level":"h2"},{"text":"Changing the size of the Input","id":"changing-the-size-of-the-input","level":"h3"},{"text":"Changing the appearance of the input","id":"changing-the-appearance-of-the-input","level":"h3"},{"text":"Left and Right Addons","id":"left-and-right-addons","level":"h3"},{"text":"Add elements inside Input","id":"add-elements-inside-input","level":"h3"},{"text":"Password Input Example","id":"password-input-example","level":"h3"},{"text":"Controlled Input","id":"controlled-input","level":"h3"},{"text":"Changing the focus and error border colors","id":"changing-the-focus-and-error-border-colors","level":"h3"},{"text":"Props","id":"props","level":"h2"}],"editUrl":"https://github.com/horizon-ui/horizon-ui-chakra/edit/main/website/pages/docs/form/input.mdx","author":null,"tags":[]},"_superjson":{"values":{"frontMatter.author":["undefined"]}}},"__N_SSG":true}
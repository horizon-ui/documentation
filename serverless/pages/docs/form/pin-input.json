{"pageProps":{"mdxSource":{"compiledSource":"var s=Object.defineProperty,c=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;var d=(n,i,t)=>i in n?s(n,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[i]=t,e=(n,i)=>{for(var t in i||(i={}))l.call(i,t)&&d(n,t,i[t]);if(a)for(var t of a(i))o.call(i,t)&&d(n,t,i[t]);return n},u=(n,i)=>c(n,m(i));var r=(n,i)=>{var t={};for(var p in n)l.call(n,p)&&i.indexOf(p)<0&&(t[p]=n[p]);if(n!=null&&a)for(var p of a(n))i.indexOf(p)<0&&o.call(n,p)&&(t[p]=n[p]);return t};const makeShortcode=n=>function(t){return console.warn(\"Component \"+n+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},t))},PropsTable=makeShortcode(\"PropsTable\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var p=t,{components:n}=p,i=r(p,[\"components\"]);return mdx(MDXLayout,u(e(e({},layoutProps),i),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"PinInput\"),\" component is similar to the \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/components/form/input\"}),\"Input\"),`\ncomponent, but it is optimized for entering sequences of digits.`),mdx(\"p\",null,\"The most common application is for entering OTP or security codes.\"),mdx(\"h2\",e({},{id:\"import\"}),\"Import\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-js\"}),`import { PinInput, PinInputField } from \"@chakra-ui/react\"\n`)),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},\"PinInput:\"),\" The component that provides context to all the pin-input fields.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},\"PinInputField:\"),` The text field that user types in - must be a direct child\nof `,mdx(\"inlineCode\",{parentName:\"li\"},\"PinInput\"),\".\")),mdx(\"h2\",e({},{id:\"usage\"}),\"Usage\"),mdx(\"p\",null,`Each input collects one value (number or alphanumeric) at a time. When a value\nis entered, focus is moved automatically to the next input, until all fields are\nfilled.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<HStack>\n  <PinInput>\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n`)),mdx(\"h3\",e({},{id:\"allowing-alphanumeric-values\"}),\"Allowing Alphanumeric values\"),mdx(\"p\",null,`By default, the pin input accepts only number values. To add support for\nalphanumeric values, pass the `,mdx(\"inlineCode\",{parentName:\"p\"},\"type\"),` prop and set its value to either\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"alphanumeric\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"number\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<HStack>\n  <PinInput type=\"alphanumeric\">\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n`)),mdx(\"h3\",e({},{id:\"using-fields-as-a-one-time-password-otp\"}),\"Using fields as a one time password (OTP)\"),mdx(\"p\",null,\"Use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"otp\"),\" prop on \",mdx(\"inlineCode\",{parentName:\"p\"},\"PinInput\"),\" to set \",mdx(\"inlineCode\",{parentName:\"p\"},'autocomplete=\"one-time-code\"'),` for all\nchildren `,mdx(\"inlineCode\",{parentName:\"p\"},\"PinInputField\"),\" components.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<PinInput otp>\n  <PinInputField />\n  <PinInputField />\n  <PinInputField />\n  <PinInputField />\n</PinInput>\n`)),mdx(\"h3\",e({},{id:\"masking-the-pin-inputs-value\"}),\"Masking the pin input's value\"),mdx(\"p\",null,`When collecting private or sensitive information using the pin input, you might\nneed to mask the value entered, similar to `,mdx(\"inlineCode\",{parentName:\"p\"},'<input type=\"password\"/>'),\".\"),mdx(\"p\",null,\"Pass the \",mdx(\"inlineCode\",{parentName:\"p\"},\"mask\"),\" prop to \",mdx(\"inlineCode\",{parentName:\"p\"},\"PinInput\"),\" to achieve this.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<HStack>\n  <PinInput type=\"alphanumeric\" mask>\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n`)),mdx(\"h3\",e({},{id:\"changing-the-size-of-the-pininput\"}),\"Changing the size of the PinInput\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"PinInput\"),\" component comes in four sizes. The default is \",mdx(\"inlineCode\",{parentName:\"p\"},\"md\"),\".\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"xs\"),\" (\",mdx(\"inlineCode\",{parentName:\"li\"},\"24px\"),\")\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"sm\"),\" (\",mdx(\"inlineCode\",{parentName:\"li\"},\"32px\"),\")\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"md\"),\" (\",mdx(\"inlineCode\",{parentName:\"li\"},\"40px\"),\")\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"lg\"),\" (\",mdx(\"inlineCode\",{parentName:\"li\"},\"48px\"),\")\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Stack>\n  <HStack>\n    <PinInput size=\"xs\">\n      <PinInputField />\n      <PinInputField />\n      <PinInputField />\n    </PinInput>\n  </HStack>\n\n  <HStack>\n    <PinInput size=\"sm\">\n      <PinInputField />\n      <PinInputField />\n      <PinInputField />\n    </PinInput>\n  </HStack>\n\n  <HStack>\n    <PinInput size=\"md\">\n      <PinInputField />\n      <PinInputField />\n      <PinInputField />\n    </PinInput>\n  </HStack>\n\n  <HStack>\n    <PinInput size=\"lg\">\n      <PinInputField />\n      <PinInputField />\n      <PinInputField />\n    </PinInput>\n  </HStack>\n</Stack>\n`)),mdx(\"h3\",e({},{id:\"adding-a-defaultvalue\"}),\"Adding a defaultValue\"),mdx(\"p\",null,\"You can set the \",mdx(\"inlineCode\",{parentName:\"p\"},\"defaultValue\"),\" of the PinInput if you wish:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<HStack>\n  <PinInput defaultValue=\"234\">\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n`)),mdx(\"p\",null,\"Or even a partial defaultValue:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<HStack>\n  <PinInput defaultValue=\"23\">\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n`)),mdx(\"h3\",e({},{id:\"changing-the-placeholder\"}),\"Changing the placeholder\"),mdx(\"p\",null,\"To customize the default input placeholder (\",mdx(\"inlineCode\",{parentName:\"p\"},\"\\u25CB\"),\"), pass the \",mdx(\"inlineCode\",{parentName:\"p\"},\"placeholder\"),` prop\nand set it to your desired placeholder.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<HStack>\n  <PinInput placeholder=\"\\u{1F973}\">\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n`)),mdx(\"h3\",e({},{id:\"disable-focus-management\"}),\"Disable focus management\"),mdx(\"p\",null,\"By default, \",mdx(\"inlineCode\",{parentName:\"p\"},\"PinInput\"),` moves focus automatically to the next input once a field\nis filled. It also transfers focus to a previous input when `,mdx(\"kbd\",null,\"Delete\"),` is\npressed with focus on an empty input.`),mdx(\"p\",null,\"To disable this behavior, set \",mdx(\"inlineCode\",{parentName:\"p\"},\"manageFocus\"),\" to \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<HStack>\n  <PinInput manageFocus={false}>\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n`)),mdx(\"h3\",e({},{id:\"autofill-and-copy--paste\"}),\"AutoFill and Copy + Paste\"),mdx(\"p\",null,\"Try copying & pasting \",mdx(\"inlineCode\",{parentName:\"p\"},\"1234\"),\" into any of the inputs in the example above.\"),mdx(\"p\",null,`By default, you can only change one input at a time, but if one of the input\nfield receives a longer string by pasting into it, `,mdx(\"inlineCode\",{parentName:\"p\"},\"PinInput\"),` attempts to\nvalidate the string and fill the other inputs.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<HStack>\n  <PinInput>\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n`)),mdx(\"h2\",e({},{id:\"props\"}),\"Props\"),mdx(PropsTable,{of:\"PinInput\",mdxType:\"PropsTable\"}),mdx(\"h3\",e({},{id:\"pininputfield\"}),\"PinInputField\"),mdx(\"p\",null,\"PinInputField composes \",mdx(\"inlineCode\",{parentName:\"p\"},\"Input\"),\" so you can pass all \",mdx(\"inlineCode\",{parentName:\"p\"},\"Input\"),\" props.\"),mdx(PropsTable,{of:\"Input\",mdxType:\"PropsTable\"}))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Chakra UI Pin Input - Horizon UI","package":"@chakra-ui/pin-input","image":"components/pin-input.svg","description":"The PinInput component is similar to the Input component, but is optimized for entering sequences of digits quickly."}},"frontMatter":{"excerpt":"The PinInput component is similar to the Input","readTimeMinutes":3,"mdxContent":"---\ntitle: Chakra UI Pin Input - Horizon UI\npackage: \"@chakra-ui/pin-input\"\nimage: \"components/pin-input.svg\"\ndescription:\n  The PinInput component is similar to the Input component, but is optimized for\n  entering sequences of digits quickly.\n---\n\nThe `PinInput` component is similar to the [Input](/docs/components/form/input)\ncomponent, but it is optimized for entering sequences of digits.\n\nThe most common application is for entering OTP or security codes.\n\n## Import\n\n```js\nimport { PinInput, PinInputField } from \"@chakra-ui/react\"\n```\n\n- **PinInput:** The component that provides context to all the pin-input fields.\n- **PinInputField:** The text field that user types in - must be a direct child\n  of `PinInput`.\n\n## Usage\n\nEach input collects one value (number or alphanumeric) at a time. When a value\nis entered, focus is moved automatically to the next input, until all fields are\nfilled.\n\n```jsx\n<HStack>\n  <PinInput>\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n```\n\n### Allowing Alphanumeric values\n\nBy default, the pin input accepts only number values. To add support for\nalphanumeric values, pass the `type` prop and set its value to either\n`alphanumeric` or `number`.\n\n```jsx\n<HStack>\n  <PinInput type=\"alphanumeric\">\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n```\n\n### Using fields as a one time password (OTP)\n\nUse the `otp` prop on `PinInput` to set `autocomplete=\"one-time-code\"` for all\nchildren `PinInputField` components.\n\n```jsx\n<PinInput otp>\n  <PinInputField />\n  <PinInputField />\n  <PinInputField />\n  <PinInputField />\n</PinInput>\n```\n\n### Masking the pin input's value\n\nWhen collecting private or sensitive information using the pin input, you might\nneed to mask the value entered, similar to `<input type=\"password\"/>`.\n\nPass the `mask` prop to `PinInput` to achieve this.\n\n```jsx\n<HStack>\n  <PinInput type=\"alphanumeric\" mask>\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n```\n\n### Changing the size of the PinInput\n\nThe `PinInput` component comes in four sizes. The default is `md`.\n\n- `xs` (`24px`)\n- `sm` (`32px`)\n- `md` (`40px`)\n- `lg` (`48px`)\n\n```jsx\n<Stack>\n  <HStack>\n    <PinInput size=\"xs\">\n      <PinInputField />\n      <PinInputField />\n      <PinInputField />\n    </PinInput>\n  </HStack>\n\n  <HStack>\n    <PinInput size=\"sm\">\n      <PinInputField />\n      <PinInputField />\n      <PinInputField />\n    </PinInput>\n  </HStack>\n\n  <HStack>\n    <PinInput size=\"md\">\n      <PinInputField />\n      <PinInputField />\n      <PinInputField />\n    </PinInput>\n  </HStack>\n\n  <HStack>\n    <PinInput size=\"lg\">\n      <PinInputField />\n      <PinInputField />\n      <PinInputField />\n    </PinInput>\n  </HStack>\n</Stack>\n```\n\n### Adding a defaultValue\n\nYou can set the `defaultValue` of the PinInput if you wish:\n\n```jsx\n<HStack>\n  <PinInput defaultValue=\"234\">\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n```\n\nOr even a partial defaultValue:\n\n```jsx\n<HStack>\n  <PinInput defaultValue=\"23\">\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n```\n\n### Changing the placeholder\n\nTo customize the default input placeholder (`○`), pass the `placeholder` prop\nand set it to your desired placeholder.\n\n```jsx\n<HStack>\n  <PinInput placeholder=\"🥳\">\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n```\n\n### Disable focus management\n\nBy default, `PinInput` moves focus automatically to the next input once a field\nis filled. It also transfers focus to a previous input when <kbd>Delete</kbd> is\npressed with focus on an empty input.\n\nTo disable this behavior, set `manageFocus` to `false`\n\n```jsx\n<HStack>\n  <PinInput manageFocus={false}>\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n```\n\n### AutoFill and Copy + Paste\n\nTry copying & pasting `1234` into any of the inputs in the example above.\n\nBy default, you can only change one input at a time, but if one of the input\nfield receives a longer string by pasting into it, `PinInput` attempts to\nvalidate the string and fill the other inputs.\n\n```jsx\n<HStack>\n  <PinInput>\n    <PinInputField />\n    <PinInputField />\n    <PinInputField />\n  </PinInput>\n</HStack>\n```\n\n## Props\n\n<PropsTable of=\"PinInput\" />\n\n### PinInputField\n\nPinInputField composes `Input` so you can pass all `Input` props.\n\n<PropsTable of=\"Input\" />\n","title":"Chakra UI Pin Input - Horizon UI","package":"@chakra-ui/pin-input","image":"components/pin-input.svg","description":"The PinInput component is similar to the Input component, but is optimized for entering sequences of digits quickly.","slug":"/docs/form/pin-input","lastEdited":{"date":"April 17, 2022","author":"Simmmple"},"headings":[{"text":"Import","id":"import","level":"h2"},{"text":"Usage","id":"usage","level":"h2"},{"text":"Allowing Alphanumeric values","id":"allowing-alphanumeric-values","level":"h3"},{"text":"Using fields as a one time password (OTP)","id":"using-fields-as-a-one-time-password-otp","level":"h3"},{"text":"Masking the pin input's value","id":"masking-the-pin-inputs-value","level":"h3"},{"text":"Changing the size of the PinInput","id":"changing-the-size-of-the-pininput","level":"h3"},{"text":"Adding a defaultValue","id":"adding-a-defaultvalue","level":"h3"},{"text":"Changing the placeholder","id":"changing-the-placeholder","level":"h3"},{"text":"Disable focus management","id":"disable-focus-management","level":"h3"},{"text":"AutoFill and Copy + Paste","id":"autofill-and-copy--paste","level":"h3"},{"text":"Props","id":"props","level":"h2"},{"text":"PinInputField","id":"pininputfield","level":"h3"}],"editUrl":"https://github.com/horizon-ui/horizon-ui-chakra/edit/main/website/pages/docs/form/pin-input.mdx","author":null,"tags":[]},"_superjson":{"values":{"frontMatter.author":["undefined"]}}},"__N_SSG":true}
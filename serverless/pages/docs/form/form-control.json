{"pageProps":{"mdxSource":{"compiledSource":"var s=Object.defineProperty,u=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var t=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var m=(a,r,o)=>r in a?s(a,r,{enumerable:!0,configurable:!0,writable:!0,value:o}):a[r]=o,e=(a,r)=>{for(var o in r||(r={}))t.call(r,o)&&m(a,o,r[o]);if(n)for(var o of n(r))l.call(r,o)&&m(a,o,r[o]);return a},p=(a,r)=>u(a,c(r));var d=(a,r)=>{var o={};for(var i in a)t.call(a,i)&&r.indexOf(i)<0&&(o[i]=a[i]);if(a!=null&&n)for(var i of n(a))r.indexOf(i)<0&&l.call(a,i)&&(o[i]=a[i]);return o};const makeShortcode=a=>function(o){return console.warn(\"Component \"+a+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},o))},PropsTable=makeShortcode(\"PropsTable\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var i=o,{components:a}=i,r=d(i,[\"components\"]);return mdx(MDXLayout,p(e(e({},layoutProps),r),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"FormControl provides context such as \",mdx(\"inlineCode\",{parentName:\"p\"},\"isInvalid\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"isDisabled\"),\", and \",mdx(\"inlineCode\",{parentName:\"p\"},\"isRequired\"),`\nto form elements.`),mdx(\"p\",null,\"It follows the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.w3.org/WAI/tutorials/forms/\"}),\"WAI specifications\"),` for\nforms.`),mdx(\"h2\",e({},{id:\"import\"}),\"Import\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`import {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  FormHelperText,\n} from \"@chakra-ui/react\"\n`)),mdx(\"h2\",e({},{id:\"usage\"}),\"Usage\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<FormControl id=\"email\">\n  <FormLabel>Email address</FormLabel>\n  <Input type=\"email\" borderRadius=\"16px\" />\n  <FormHelperText>We'll never share your email.</FormHelperText>\n</FormControl>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<FormControl id=\"email\">\n  <FormLabel>Email address</FormLabel>\n  <Input type=\"email\" />\n  <FormHelperText>We'll never share your email.</FormHelperText>\n</FormControl>\n`)),mdx(\"h3\",e({},{id:\"sample-usage-for-a-radio-or-checkbox-group\"}),\"Sample usage for a radio or checkbox group\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<FormControl as=\"fieldset\">\n  <FormLabel as=\"legend\">Favorite Naruto Character</FormLabel>\n  <RadioGroup defaultValue=\"Itachi\">\n    <HStack spacing=\"24px\">\n      <Radio value=\"Sasuke\">Sasuke</Radio>\n      <Radio value=\"Nagato\">Nagato</Radio>\n      <Radio value=\"Itachi\">Itachi</Radio>\n      <Radio value=\"Sage of the six Paths\">Sage of the six Paths</Radio>\n    </HStack>\n  </RadioGroup>\n  <FormHelperText>Select only if you're a fan.</FormHelperText>\n</FormControl>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<FormControl as=\"fieldset\">\n  <FormLabel as=\"legend\">Favorite Naruto Character</FormLabel>\n  <RadioGroup defaultValue=\"Itachi\">\n    <HStack spacing=\"24px\">\n      <Radio value=\"Sasuke\">Sasuke</Radio>\n      <Radio value=\"Nagato\">Nagato</Radio>\n      <Radio value=\"Itachi\">Itachi</Radio>\n      <Radio value=\"Sage of the six Paths\">Sage of the six Paths</Radio>\n    </HStack>\n  </RadioGroup>\n  <FormHelperText>Select only if you're a fan.</FormHelperText>\n</FormControl>\n`)),mdx(\"h3\",e({},{id:\"making-a-field-required\"}),\"Making a field required\"),mdx(\"p\",null,\"By passing the \",mdx(\"inlineCode\",{parentName:\"p\"},\"isRequired\"),\" props, the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Input\"),\" field has \",mdx(\"inlineCode\",{parentName:\"p\"},\"aria-required\"),` set to\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),\", and the \",mdx(\"inlineCode\",{parentName:\"p\"},\"FormLabel\"),\" will show a red asterisk.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<FormControl id=\"first-name\" isRequired>\n  <FormLabel>First name</FormLabel>\n  <Input placeholder=\"First name\" borderRadius=\"16px\" />\n</FormControl>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<FormControl id=\"first-name\" isRequired>\n  <FormLabel>First name</FormLabel>\n  <Input placeholder=\"First name\" borderRadius=\"16px\" />\n</FormControl>\n`)),mdx(\"h3\",e({},{id:\"select-example\"}),\"Select Example\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<FormControl id=\"country\">\n  <FormLabel>Country</FormLabel>\n  <Select placeholder=\"Select country\">\n    <option>Romania</option>\n  </Select>\n</FormControl>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<FormControl id=\"country\">\n  <FormLabel>Country</FormLabel>\n  <Select placeholder=\"Select country\">\n    <option>Romania</option>\n  </Select>\n</FormControl>\n`)),mdx(\"h3\",e({},{id:\"number-input-example\"}),\"Number Input Example\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<FormControl id=\"amount\">\n  <FormLabel>Amount</FormLabel>\n  <NumberInput max={50} min={10}>\n    <NumberInputField />\n    <NumberInputStepper>\n      <NumberIncrementStepper />\n      <NumberDecrementStepper />\n    </NumberInputStepper>\n  </NumberInput>\n</FormControl>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<FormControl id=\"amount\">\n  <FormLabel>Amount</FormLabel>\n  <NumberInput max={50} min={10}>\n    <NumberInputField />\n    <NumberInputStepper>\n      <NumberIncrementStepper />\n      <NumberDecrementStepper />\n    </NumberInputStepper>\n  </NumberInput>\n</FormControl>\n`)),mdx(\"h3\",e({},{id:\"usage-with-form-libraries\"}),\"Usage with Form Libraries\"),mdx(\"p\",null,\"Form Libraries like \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://jaredpalmer.com/formik/\"}),\"Formik\"),` make it soooo easy\nto manage form state and validation. I \\u{1F496} Formik`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function FormikExample() {\n  function validateName(value) {\n    let error\n    if (!value) {\n      error = \"Name is required\"\n    } else if (value.toLowerCase() !== \"naruto\") {\n      error = \"Jeez! You're not a fan \\u{1F631}\"\n    }\n    return error\n  }\n\n  return (\n    <Formik\n      initialValues={{ name: \"Sasuke\" }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2))\n          actions.setSubmitting(false)\n        }, 1000)\n      }}\n    >\n      {(props) => (\n        <Form>\n          <Field name=\"name\" validate={validateName}>\n            {({ field, form }) => (\n              <FormControl isInvalid={form.errors.name && form.touched.name}>\n                <FormLabel htmlFor=\"name\">First name</FormLabel>\n                <Input\n                  {...field}\n                  id=\"name\"\n                  placeholder=\"name\"\n                  borderRadius=\"16px\"\n                />\n                <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n              </FormControl>\n            )}\n          </Field>\n          <Button\n            mt={4}\n            colorScheme=\"brand\"\n            isLoading={props.isSubmitting}\n            type=\"submit\"\n          >\n            Submit\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function FormikExample() {\n  function validateName(value) {\n    let error\n    if (!value) {\n      error = \"Name is required\"\n    } else if (value.toLowerCase() !== \"naruto\") {\n      error = \"Jeez! You're not a fan \\u{1F631}\"\n    }\n    return error\n  }\n\n  return (\n    <Formik\n      initialValues={{ name: \"Sasuke\" }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2))\n          actions.setSubmitting(false)\n        }, 1000)\n      }}\n    >\n      {(props) => (\n        <Form>\n          <Field name=\"name\" validate={validateName}>\n            {({ field, form }) => (\n              <FormControl isInvalid={form.errors.name && form.touched.name}>\n                <FormLabel htmlFor=\"name\">First name</FormLabel>\n                <Input\n                  {...field}\n                  id=\"name\"\n                  placeholder=\"name\"\n                  borderRadius=\"16px\"\n                />\n                <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n              </FormControl>\n            )}\n          </Field>\n          <Button\n            mt={4}\n            colorScheme=\"brand\"\n            isLoading={props.isSubmitting}\n            type=\"submit\"\n          >\n            Submit\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n`)),mdx(\"h2\",e({},{id:\"improvements-from-v1\"}),\"Improvements from v1\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"We've improved the accessibility of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"FormControl\"),` component. Here are the\nchanges:`),mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"id\"),\" passed to the form control will be passed to the form input directly.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"FormLabel\"),\" will have \",mdx(\"inlineCode\",{parentName:\"li\"},\"htmlFor\"),\" that points to the \",mdx(\"inlineCode\",{parentName:\"li\"},\"id\"),\" of the form input.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"FormErrorMessage\"),\" adds \",mdx(\"inlineCode\",{parentName:\"li\"},\"aria-describedby\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"aria-invalid\"),` pointing to\nthe form input.`),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"FormHelperText\"),\" adds/extends \",mdx(\"inlineCode\",{parentName:\"li\"},\"aria-describedby\"),\" pointing to the form input.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"isDisabled\"),\", \",mdx(\"inlineCode\",{parentName:\"li\"},\"isRequired\"),\", \",mdx(\"inlineCode\",{parentName:\"li\"},\"isReadOnly\"),\" props passed to \",mdx(\"inlineCode\",{parentName:\"li\"},\"FormControl\"),` will\ncascade across all related components.`))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"p\"},\"FormLabel\"),\" is now aware of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"disabled\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"focused\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"error\"),` state of the\nform input. This helps you style the label accordingly using the `,mdx(\"inlineCode\",{parentName:\"p\"},\"_disabled\"),`,\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"_focus\"),\", and \",mdx(\"inlineCode\",{parentName:\"p\"},\"_invalid\"),\" style props.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"If you render \",mdx(\"inlineCode\",{parentName:\"p\"},\"FormErrorMessage\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"isInvalid\"),\" is \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"undefined\"),`,\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"FormErrorMessage\"),` won't be visible. The only way to make it visible is by\npassing `,mdx(\"inlineCode\",{parentName:\"p\"},\"isInvalid\"),\" and setting it to \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),\".\"))),mdx(\"h2\",e({},{id:\"props\"}),\"Props\"),mdx(PropsTable,{of:\"FormControl\",mdxType:\"PropsTable\"}))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Chakra UI Form Control - Horizon UI","package":"@chakra-ui/form-control","description":"Form Control provides context such as isInvalid, isDisabled, and isRequired to form elements"}},"frontMatter":{"excerpt":"FormControl provides context such as isInvalid, isDisabled, and isRequired","readTimeMinutes":6,"mdxContent":"---\ntitle: Chakra UI Form Control - Horizon UI\npackage: \"@chakra-ui/form-control\"\ndescription:\n  Form Control provides context such as isInvalid, isDisabled, and isRequired to\n  form elements\n---\n\nFormControl provides context such as `isInvalid`, `isDisabled`, and `isRequired`\nto form elements.\n\nIt follows the [WAI specifications](https://www.w3.org/WAI/tutorials/forms/) for\nforms.\n\n## Import\n\n```tsx\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  FormHelperText,\n} from \"@chakra-ui/react\"\n```\n\n## Usage\n\n```jsx\n<FormControl id=\"email\">\n  <FormLabel>Email address</FormLabel>\n  <Input type=\"email\" borderRadius=\"16px\" />\n  <FormHelperText>We'll never share your email.</FormHelperText>\n</FormControl>\n```\n\n```tsx\n<FormControl id=\"email\">\n  <FormLabel>Email address</FormLabel>\n  <Input type=\"email\" />\n  <FormHelperText>We'll never share your email.</FormHelperText>\n</FormControl>\n```\n\n### Sample usage for a radio or checkbox group\n\n```jsx\n<FormControl as=\"fieldset\">\n  <FormLabel as=\"legend\">Favorite Naruto Character</FormLabel>\n  <RadioGroup defaultValue=\"Itachi\">\n    <HStack spacing=\"24px\">\n      <Radio value=\"Sasuke\">Sasuke</Radio>\n      <Radio value=\"Nagato\">Nagato</Radio>\n      <Radio value=\"Itachi\">Itachi</Radio>\n      <Radio value=\"Sage of the six Paths\">Sage of the six Paths</Radio>\n    </HStack>\n  </RadioGroup>\n  <FormHelperText>Select only if you're a fan.</FormHelperText>\n</FormControl>\n```\n\n```tsx\n<FormControl as=\"fieldset\">\n  <FormLabel as=\"legend\">Favorite Naruto Character</FormLabel>\n  <RadioGroup defaultValue=\"Itachi\">\n    <HStack spacing=\"24px\">\n      <Radio value=\"Sasuke\">Sasuke</Radio>\n      <Radio value=\"Nagato\">Nagato</Radio>\n      <Radio value=\"Itachi\">Itachi</Radio>\n      <Radio value=\"Sage of the six Paths\">Sage of the six Paths</Radio>\n    </HStack>\n  </RadioGroup>\n  <FormHelperText>Select only if you're a fan.</FormHelperText>\n</FormControl>\n```\n\n### Making a field required\n\nBy passing the `isRequired` props, the `Input` field has `aria-required` set to\n`true`, and the `FormLabel` will show a red asterisk.\n\n```jsx\n<FormControl id=\"first-name\" isRequired>\n  <FormLabel>First name</FormLabel>\n  <Input placeholder=\"First name\" borderRadius=\"16px\" />\n</FormControl>\n```\n\n```tsx\n<FormControl id=\"first-name\" isRequired>\n  <FormLabel>First name</FormLabel>\n  <Input placeholder=\"First name\" borderRadius=\"16px\" />\n</FormControl>\n```\n\n### Select Example\n\n```jsx\n<FormControl id=\"country\">\n  <FormLabel>Country</FormLabel>\n  <Select placeholder=\"Select country\">\n    <option>Romania</option>\n  </Select>\n</FormControl>\n```\n\n```tsx\n<FormControl id=\"country\">\n  <FormLabel>Country</FormLabel>\n  <Select placeholder=\"Select country\">\n    <option>Romania</option>\n  </Select>\n</FormControl>\n```\n\n### Number Input Example\n\n```jsx\n<FormControl id=\"amount\">\n  <FormLabel>Amount</FormLabel>\n  <NumberInput max={50} min={10}>\n    <NumberInputField />\n    <NumberInputStepper>\n      <NumberIncrementStepper />\n      <NumberDecrementStepper />\n    </NumberInputStepper>\n  </NumberInput>\n</FormControl>\n```\n\n```tsx\n<FormControl id=\"amount\">\n  <FormLabel>Amount</FormLabel>\n  <NumberInput max={50} min={10}>\n    <NumberInputField />\n    <NumberInputStepper>\n      <NumberIncrementStepper />\n      <NumberDecrementStepper />\n    </NumberInputStepper>\n  </NumberInput>\n</FormControl>\n```\n\n### Usage with Form Libraries\n\nForm Libraries like [Formik](https://jaredpalmer.com/formik/) make it soooo easy\nto manage form state and validation. I 💖 Formik\n\n```jsx\nfunction FormikExample() {\n  function validateName(value) {\n    let error\n    if (!value) {\n      error = \"Name is required\"\n    } else if (value.toLowerCase() !== \"naruto\") {\n      error = \"Jeez! You're not a fan 😱\"\n    }\n    return error\n  }\n\n  return (\n    <Formik\n      initialValues={{ name: \"Sasuke\" }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2))\n          actions.setSubmitting(false)\n        }, 1000)\n      }}\n    >\n      {(props) => (\n        <Form>\n          <Field name=\"name\" validate={validateName}>\n            {({ field, form }) => (\n              <FormControl isInvalid={form.errors.name && form.touched.name}>\n                <FormLabel htmlFor=\"name\">First name</FormLabel>\n                <Input\n                  {...field}\n                  id=\"name\"\n                  placeholder=\"name\"\n                  borderRadius=\"16px\"\n                />\n                <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n              </FormControl>\n            )}\n          </Field>\n          <Button\n            mt={4}\n            colorScheme=\"brand\"\n            isLoading={props.isSubmitting}\n            type=\"submit\"\n          >\n            Submit\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n```\n\n```tsx\nfunction FormikExample() {\n  function validateName(value) {\n    let error\n    if (!value) {\n      error = \"Name is required\"\n    } else if (value.toLowerCase() !== \"naruto\") {\n      error = \"Jeez! You're not a fan 😱\"\n    }\n    return error\n  }\n\n  return (\n    <Formik\n      initialValues={{ name: \"Sasuke\" }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2))\n          actions.setSubmitting(false)\n        }, 1000)\n      }}\n    >\n      {(props) => (\n        <Form>\n          <Field name=\"name\" validate={validateName}>\n            {({ field, form }) => (\n              <FormControl isInvalid={form.errors.name && form.touched.name}>\n                <FormLabel htmlFor=\"name\">First name</FormLabel>\n                <Input\n                  {...field}\n                  id=\"name\"\n                  placeholder=\"name\"\n                  borderRadius=\"16px\"\n                />\n                <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n              </FormControl>\n            )}\n          </Field>\n          <Button\n            mt={4}\n            colorScheme=\"brand\"\n            isLoading={props.isSubmitting}\n            type=\"submit\"\n          >\n            Submit\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n```\n\n## Improvements from v1\n\n- We've improved the accessibility of the `FormControl` component. Here are the\n  changes:\n\n  - `id` passed to the form control will be passed to the form input directly.\n  - `FormLabel` will have `htmlFor` that points to the `id` of the form input.\n  - `FormErrorMessage` adds `aria-describedby` and `aria-invalid` pointing to\n    the form input.\n  - `FormHelperText` adds/extends `aria-describedby` pointing to the form input.\n  - `isDisabled`, `isRequired`, `isReadOnly` props passed to `FormControl` will\n    cascade across all related components.\n\n- `FormLabel` is now aware of the `disabled`, `focused` and `error` state of the\n  form input. This helps you style the label accordingly using the `_disabled`,\n  `_focus`, and `_invalid` style props.\n\n- If you render `FormErrorMessage` and `isInvalid` is `false` or `undefined`,\n  `FormErrorMessage` won't be visible. The only way to make it visible is by\n  passing `isInvalid` and setting it to `true`.\n\n## Props\n\n<PropsTable of=\"FormControl\" />\n","title":"Chakra UI Form Control - Horizon UI","package":"@chakra-ui/form-control","description":"Form Control provides context such as isInvalid, isDisabled, and isRequired to form elements","slug":"/docs/form/form-control","lastEdited":{"date":"April 02, 2022","author":"Simmmple"},"headings":[{"text":"Import","id":"import","level":"h2"},{"text":"Usage","id":"usage","level":"h2"},{"text":"Sample usage for a radio or checkbox group","id":"sample-usage-for-a-radio-or-checkbox-group","level":"h3"},{"text":"Making a field required","id":"making-a-field-required","level":"h3"},{"text":"Select Example","id":"select-example","level":"h3"},{"text":"Number Input Example","id":"number-input-example","level":"h3"},{"text":"Usage with Form Libraries","id":"usage-with-form-libraries","level":"h3"},{"text":"Improvements from v1","id":"improvements-from-v1","level":"h2"},{"text":"Props","id":"props","level":"h2"}],"editUrl":"https://github.com/simmmple-web/horizon-ui-dashboard/edit/main/website/pages/docs/form/form-control.mdx","author":null,"tags":[]},"_superjson":{"values":{"frontMatter.author":["undefined"]}}},"__N_SSG":true}
{"pageProps":{"mdxSource":{"compiledSource":"var c=Object.defineProperty,m=Object.defineProperties;var f=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var p=(e,t,r)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,o=(e,t)=>{for(var r in t||(t={}))l.call(t,r)&&p(e,r,t[r]);if(n)for(var r of n(t))i.call(t,r)&&p(e,r,t[r]);return e},d=(e,t)=>m(e,f(t));var s=(e,t)=>{var r={};for(var a in e)l.call(e,a)&&t.indexOf(a)<0&&(r[a]=e[a]);if(e!=null&&n)for(var a of n(e))t.indexOf(a)<0&&i.call(e,a)&&(r[a]=e[a]);return r};const makeShortcode=e=>function(r){return console.warn(\"Component \"+e+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",o({},r))},PropsTable=makeShortcode(\"PropsTable\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(r){var a=r,{components:e}=a,t=s(a,[\"components\"]);return mdx(MDXLayout,d(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`Portal is used to transport any component or element to the end of\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"document.body\"),\" and renders a React tree into it.\"),mdx(\"p\",null,`Useful for rendering a natural React element hierarchy with a different DOM\nhierarchy to prevent parent styles from clipping or hiding content (for\npopovers, dropdowns, and modals). It supports nested portals`),mdx(\"h2\",o({},{id:\"import\"}),\"Import\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-tsx\"}),`import { Portal } from \"@chakra-ui/react\"\n`)),mdx(\"h2\",o({},{id:\"usage\"}),\"Usage\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-jsx\"}),`function Example() {\n  return (\n    <Box bg=\"red.400\" color=\"white\">\n      I'm here,\n      <Portal>This text is portaled at the end of document.body!</Portal>\n    </Box>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-tsx\"}),`function Example() {\n  return (\n    <Box bg=\"red.400\" color=\"white\">\n      I'm here,\n      <Portal>This text is portaled at the end of document.body!</Portal>\n    </Box>\n  )\n}\n`)),mdx(\"h3\",o({},{id:\"using-a-custom-container\"}),\"Using a custom container\"),mdx(\"p\",null,`You can render the contents within a portal to a different DOM node, instead of\nthe default `,mdx(\"inlineCode\",{parentName:\"p\"},\"document.body\"),\". Pass the \",mdx(\"inlineCode\",{parentName:\"p\"},\"containerRef\"),` prop and set its value to\nthe `,mdx(\"inlineCode\",{parentName:\"p\"},\"ref\"),\" of the container you'd like to use.\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-jsx\"}),`function Example() {\n  const ref = React.useRef()\n  return (\n    <Box bg=\"red.400\" color=\"white\">\n      I'm here,\n      <Portal containerRef={ref}>\n        Portal: This text is portaled to the yellow box!\n      </Portal>\n      <Box ref={ref} bg=\"yellow.500\">\n        <div>Container: Hey,</div>\n      </Box>\n    </Box>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-tsx\"}),`function Example() {\n  const ref = React.useRef()\n  return (\n    <Box bg=\"red.400\" color=\"white\">\n      I'm here,\n      <Portal containerRef={ref}>\n        Portal: This text is portaled to the yellow box!\n      </Portal>\n      <Box ref={ref} bg=\"yellow.500\">\n        <div>Container: Hey,</div>\n      </Box>\n    </Box>\n  )\n}\n`)),mdx(\"h3\",o({},{id:\"nesting-portals\"}),\"Nesting Portals\"),mdx(\"p\",null,`You can also nest multiple portals within themselves, this will create a nested\nDOM hierarchy to make it easy to create nested modals, popovers, etc.`),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-jsx\"}),`function Example() {\n  const ref = React.useRef()\n  return (\n    <div>\n      <Portal containerRef={ref}>\n        <Box bg=\"brand.500\" color=\"white\">\n          Parent: Hey welcome,\n          <Portal>Child: I'm attached to my parent portal</Portal>\n        </Box>\n      </Portal>\n      <Box bg=\"red.400\" color=\"white\" ref={ref} />\n    </div>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-tsx\"}),`function Example() {\n  const ref = React.useRef()\n  return (\n    <div>\n      <Portal containerRef={ref}>\n        <Box bg=\"brand.500\" color=\"white\">\n          Parent: Hey welcome,\n          <Portal>Child: I'm attached to my parent portal</Portal>\n        </Box>\n      </Portal>\n      <Box bg=\"red.400\" color=\"white\" ref={ref} />\n    </div>\n  )\n}\n`)),mdx(\"h3\",o({},{id:\"opting-out-of-portal-nesting\"}),\"Opting out of portal nesting\"),mdx(\"p\",null,`In some cases, you might not want portal nodes to be nested to their parent\nportals. To opt out of this, pass `,mdx(\"inlineCode\",{parentName:\"p\"},\"appendToParentPortal\"),\" and set it to \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\")),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-jsx\"}),`function Example() {\n  const ref = React.useRef()\n  return (\n    <div>\n      <Portal containerRef={ref}>\n        <Box bg=\"brand.500\" color=\"white\">\n          Parent: Hey welcome,\n          <Portal appendToParentPortal={false}>\n            Child: I'm going to document.body\n          </Portal>\n        </Box>\n      </Portal>\n      <div style={{ background: \"red\" }} ref={ref} />\n    </div>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-tsx\"}),`function Example() {\n  const ref = React.useRef()\n  return (\n    <div>\n      <Portal containerRef={ref}>\n        <Box bg=\"brand.500\" color=\"white\">\n          Parent: Hey welcome,\n          <Portal appendToParentPortal={false}>\n            Child: I'm going to document.body\n          </Portal>\n        </Box>\n      </Portal>\n      <div style={{ background: \"red\" }} ref={ref} />\n    </div>\n  )\n}\n`)),mdx(\"h2\",o({},{id:\"props\"}),\"Props\"),mdx(PropsTable,{of:\"Portal\",mdxType:\"PropsTable\"}))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Chakra UI Portal - Horizon UI","package":"@chakra-ui/portal","image":"components/portal.svg","description":"Renders a React subtree in a different part of the DOM."}},"frontMatter":{"excerpt":"Portal is used to transport any component or element to the end of","readTimeMinutes":3,"mdxContent":"---\ntitle: Chakra UI Portal - Horizon UI\npackage: \"@chakra-ui/portal\"\nimage: \"components/portal.svg\"\ndescription: Renders a React subtree in a different part of the DOM.\n---\n\nPortal is used to transport any component or element to the end of\n`document.body` and renders a React tree into it.\n\nUseful for rendering a natural React element hierarchy with a different DOM\nhierarchy to prevent parent styles from clipping or hiding content (for\npopovers, dropdowns, and modals). It supports nested portals\n\n## Import\n\n```tsx\nimport { Portal } from \"@chakra-ui/react\"\n```\n\n## Usage\n\n```jsx\nfunction Example() {\n  return (\n    <Box bg=\"red.400\" color=\"white\">\n      I'm here,\n      <Portal>This text is portaled at the end of document.body!</Portal>\n    </Box>\n  )\n}\n```\n\n```tsx\nfunction Example() {\n  return (\n    <Box bg=\"red.400\" color=\"white\">\n      I'm here,\n      <Portal>This text is portaled at the end of document.body!</Portal>\n    </Box>\n  )\n}\n```\n\n### Using a custom container\n\nYou can render the contents within a portal to a different DOM node, instead of\nthe default `document.body`. Pass the `containerRef` prop and set its value to\nthe `ref` of the container you'd like to use.\n\n```jsx\nfunction Example() {\n  const ref = React.useRef()\n  return (\n    <Box bg=\"red.400\" color=\"white\">\n      I'm here,\n      <Portal containerRef={ref}>\n        Portal: This text is portaled to the yellow box!\n      </Portal>\n      <Box ref={ref} bg=\"yellow.500\">\n        <div>Container: Hey,</div>\n      </Box>\n    </Box>\n  )\n}\n```\n\n```tsx\nfunction Example() {\n  const ref = React.useRef()\n  return (\n    <Box bg=\"red.400\" color=\"white\">\n      I'm here,\n      <Portal containerRef={ref}>\n        Portal: This text is portaled to the yellow box!\n      </Portal>\n      <Box ref={ref} bg=\"yellow.500\">\n        <div>Container: Hey,</div>\n      </Box>\n    </Box>\n  )\n}\n```\n\n### Nesting Portals\n\nYou can also nest multiple portals within themselves, this will create a nested\nDOM hierarchy to make it easy to create nested modals, popovers, etc.\n\n```jsx\nfunction Example() {\n  const ref = React.useRef()\n  return (\n    <div>\n      <Portal containerRef={ref}>\n        <Box bg=\"brand.500\" color=\"white\">\n          Parent: Hey welcome,\n          <Portal>Child: I'm attached to my parent portal</Portal>\n        </Box>\n      </Portal>\n      <Box bg=\"red.400\" color=\"white\" ref={ref} />\n    </div>\n  )\n}\n```\n\n```tsx\nfunction Example() {\n  const ref = React.useRef()\n  return (\n    <div>\n      <Portal containerRef={ref}>\n        <Box bg=\"brand.500\" color=\"white\">\n          Parent: Hey welcome,\n          <Portal>Child: I'm attached to my parent portal</Portal>\n        </Box>\n      </Portal>\n      <Box bg=\"red.400\" color=\"white\" ref={ref} />\n    </div>\n  )\n}\n```\n\n### Opting out of portal nesting\n\nIn some cases, you might not want portal nodes to be nested to their parent\nportals. To opt out of this, pass `appendToParentPortal` and set it to `false`\n\n```jsx\nfunction Example() {\n  const ref = React.useRef()\n  return (\n    <div>\n      <Portal containerRef={ref}>\n        <Box bg=\"brand.500\" color=\"white\">\n          Parent: Hey welcome,\n          <Portal appendToParentPortal={false}>\n            Child: I'm going to document.body\n          </Portal>\n        </Box>\n      </Portal>\n      <div style={{ background: \"red\" }} ref={ref} />\n    </div>\n  )\n}\n```\n\n```tsx\nfunction Example() {\n  const ref = React.useRef()\n  return (\n    <div>\n      <Portal containerRef={ref}>\n        <Box bg=\"brand.500\" color=\"white\">\n          Parent: Hey welcome,\n          <Portal appendToParentPortal={false}>\n            Child: I'm going to document.body\n          </Portal>\n        </Box>\n      </Portal>\n      <div style={{ background: \"red\" }} ref={ref} />\n    </div>\n  )\n}\n```\n\n## Props\n\n<PropsTable of=\"Portal\" />\n","title":"Chakra UI Portal - Horizon UI","package":"@chakra-ui/portal","image":"components/portal.svg","description":"Renders a React subtree in a different part of the DOM.","slug":"/docs/components/portal","lastEdited":{"date":"April 02, 2022","author":"Simmmple"},"headings":[{"text":"Import","id":"import","level":"h2"},{"text":"Usage","id":"usage","level":"h2"},{"text":"Using a custom container","id":"using-a-custom-container","level":"h3"},{"text":"Nesting Portals","id":"nesting-portals","level":"h3"},{"text":"Opting out of portal nesting","id":"opting-out-of-portal-nesting","level":"h3"},{"text":"Props","id":"props","level":"h2"}],"editUrl":"https://github.com/horizon-ui/horizon-ui-chakra/edit/main/website/pages/docs/components/portal.mdx","author":null,"tags":[]},"_superjson":{"values":{"frontMatter.author":["undefined"]}}},"__N_SSG":true}
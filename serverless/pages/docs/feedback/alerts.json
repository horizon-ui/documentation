{"pageProps":{"mdxSource":{"compiledSource":"var d=Object.defineProperty,u=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var p=(e,n,r)=>n in e?d(e,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[n]=r,t=(e,n)=>{for(var r in n||(n={}))i.call(n,r)&&p(e,r,n[r]);if(a)for(var r of a(n))l.call(n,r)&&p(e,r,n[r]);return e},s=(e,n)=>u(e,m(n));var c=(e,n)=>{var r={};for(var o in e)i.call(e,o)&&n.indexOf(o)<0&&(r[o]=e[o]);if(e!=null&&a)for(var o of a(e))n.indexOf(o)<0&&l.call(e,o)&&(r[o]=e[o]);return r};const makeShortcode=e=>function(r){return console.warn(\"Component \"+e+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",t({},r))},PropsTable=makeShortcode(\"PropsTable\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(r){var o=r,{components:e}=o,n=c(o,[\"components\"]);return mdx(MDXLayout,s(t(t({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Alerts are used to communicate a state that affects a system, feature or page.\"),mdx(\"h2\",t({},{id:\"import\"}),\"Import\"),mdx(\"p\",null,\"Chakra UI exports 4 alert related components.\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"Alert\"),\": The wrapper for alert components.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"AlertIcon\"),\": The visual icon for the alert that changes based on the \",mdx(\"inlineCode\",{parentName:\"li\"},\"status\"),`\nprop.`),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"AlertTitle\"),\": The title of the alert to be announced by screen readers.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"AlertDescription\"),`: The description of the alert to be announced by screen\nreaders.`)),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-tsx\"}),`import {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n} from \"@chakra-ui/react\"\n`)),mdx(\"h2\",t({},{id:\"usage\"}),\"Usage\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\"}),`<Alert status=\"error\">\n  <AlertIcon />\n  <AlertTitle mr={2}>Your browser is outdated!</AlertTitle>\n  <AlertDescription>Your Chakra experience may be degraded.</AlertDescription>\n  <CloseButton position=\"absolute\" right=\"8px\" top=\"8px\" />\n</Alert>\n`)),mdx(\"h3\",t({},{id:\"status\"}),\"Status\"),mdx(\"p\",null,\"Change the status of the alerts by passing the \",mdx(\"inlineCode\",{parentName:\"p\"},\"status\"),` prop. This affects the\ncolor scheme and icon used. Alert supports `,mdx(\"inlineCode\",{parentName:\"p\"},\"error\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"success\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"warning\"),`, and\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"info\"),\" statuses.\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\"}),`<Stack spacing={3}>\n  <Alert status=\"error\">\n    <AlertIcon />\n    There was an error processing your request\n  </Alert>\n\n  <Alert status=\"success\">\n    <AlertIcon />\n    Data uploaded to the server. Fire on!\n  </Alert>\n\n  <Alert status=\"warning\">\n    <AlertIcon />\n    Seems your account is about expire, upgrade now\n  </Alert>\n\n  <Alert status=\"info\">\n    <AlertIcon />\n    Chakra is going live on August 30th. Get ready!\n  </Alert>\n</Stack>\n`)),mdx(\"h3\",t({},{id:\"variant\"}),\"Variant\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"Alert\"),\" has 4 variant styles you can use. Pass the \",mdx(\"inlineCode\",{parentName:\"p\"},\"variant\"),` prop and use either\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"subtle\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"solid\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"left-accent\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"top-accent\"),\".\"),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\"}),`<Stack spacing={3}>\n  <Alert status=\"success\" variant=\"subtle\">\n    <AlertIcon />\n    Data uploaded to the server. Fire on!\n  </Alert>\n\n  <Alert status=\"success\" variant=\"solid\">\n    <AlertIcon />\n    Data uploaded to the server. Fire on!\n  </Alert>\n\n  <Alert status=\"success\" variant=\"left-accent\">\n    <AlertIcon />\n    Data uploaded to the server. Fire on!\n  </Alert>\n\n  <Alert status=\"success\" variant=\"top-accent\">\n    <AlertIcon />\n    Data uploaded to the server. Fire on!\n  </Alert>\n</Stack>\n`)),mdx(\"h3\",t({},{id:\"composition\"}),\"Composition\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"Alert\"),` ships with smaller components to allow for flexibility in creating all\nkinds of layouts. Here's an example of a custom alert style and layout:`),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\"}),`<Alert\n  status=\"success\"\n  variant=\"subtle\"\n  flexDirection=\"column\"\n  alignItems=\"center\"\n  justifyContent=\"center\"\n  textAlign=\"center\"\n  height=\"200px\"\n>\n  <AlertIcon boxSize=\"40px\" mr={0} />\n  <AlertTitle mt={4} mb={1} fontSize=\"lg\">\n    Application submitted!\n  </AlertTitle>\n  <AlertDescription maxWidth=\"sm\">\n    Thanks for submitting your application. Our team will get back to you soon.\n  </AlertDescription>\n</Alert>\n`)),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"Alert\"),` can also incorporate other Chakra components. Here's an example of an\nalert with wrapping description text:`),mdx(\"pre\",null,mdx(\"code\",t({parentName:\"pre\"},{className:\"language-jsx\"}),`<Alert status=\"success\">\n  <AlertIcon />\n  <Box flex=\"1\">\n    <AlertTitle>Success!</AlertTitle>\n    <AlertDescription display=\"block\">\n      Your application has been received. We will review your application and\n      respond within the next 48 hours.\n    </AlertDescription>\n  </Box>\n  <CloseButton position=\"absolute\" right=\"8px\" top=\"8px\" />\n</Alert>\n`)),mdx(\"h2\",t({},{id:\"props\"}),\"Props\"),mdx(\"h3\",t({},{id:\"alert-props\"}),\"Alert Props\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"Alert\"),\" is the wrapper for \",mdx(\"inlineCode\",{parentName:\"p\"},\"Alert\"),\" component. It composes the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Flex\"),\" component.\"),mdx(PropsTable,{of:\"Alert\",mdxType:\"PropsTable\"}),mdx(\"h3\",t({},{id:\"alerticon-props\"}),\"AlertIcon Props\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"AlertIcon\"),\" composes \",mdx(\"inlineCode\",{parentName:\"p\"},\"Icon\"),\" and changes the icon based on the \",mdx(\"inlineCode\",{parentName:\"p\"},\"status\"),\" prop.\"),mdx(\"h3\",t({},{id:\"alerttitle-props\"}),\"AlertTitle Props\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"AlertTitle\"),\" composes the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Box\"),\" component.\"),mdx(\"h3\",t({},{id:\"alertdescription-props\"}),\"AlertDescription Props\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"AlertDescription\"),\" composes the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Box\"),\" component.\"))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Chakra UI Alerts - Horizon UI","package":"@chakra-ui/alert","image":"components/alert.svg","description":"Alerts are used to communicate a state that affects a system, feature or page."}},"frontMatter":{"excerpt":"Alerts are used to communicate a state that affects a system, feature or page.","readTimeMinutes":2,"mdxContent":"---\ntitle: Chakra UI Alerts - Horizon UI\npackage: \"@chakra-ui/alert\"\nimage: \"components/alert.svg\"\ndescription:\n  Alerts are used to communicate a state that affects a system, feature or page.\n---\n\nAlerts are used to communicate a state that affects a system, feature or page.\n\n## Import\n\nChakra UI exports 4 alert related components.\n\n- `Alert`: The wrapper for alert components.\n- `AlertIcon`: The visual icon for the alert that changes based on the `status`\n  prop.\n- `AlertTitle`: The title of the alert to be announced by screen readers.\n- `AlertDescription`: The description of the alert to be announced by screen\n  readers.\n\n```tsx\nimport {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n} from \"@chakra-ui/react\"\n```\n\n## Usage\n\n```jsx\n<Alert status=\"error\">\n  <AlertIcon />\n  <AlertTitle mr={2}>Your browser is outdated!</AlertTitle>\n  <AlertDescription>Your Chakra experience may be degraded.</AlertDescription>\n  <CloseButton position=\"absolute\" right=\"8px\" top=\"8px\" />\n</Alert>\n```\n\n### Status\n\nChange the status of the alerts by passing the `status` prop. This affects the\ncolor scheme and icon used. Alert supports `error`, `success`, `warning`, and\n`info` statuses.\n\n```jsx\n<Stack spacing={3}>\n  <Alert status=\"error\">\n    <AlertIcon />\n    There was an error processing your request\n  </Alert>\n\n  <Alert status=\"success\">\n    <AlertIcon />\n    Data uploaded to the server. Fire on!\n  </Alert>\n\n  <Alert status=\"warning\">\n    <AlertIcon />\n    Seems your account is about expire, upgrade now\n  </Alert>\n\n  <Alert status=\"info\">\n    <AlertIcon />\n    Chakra is going live on August 30th. Get ready!\n  </Alert>\n</Stack>\n```\n\n### Variant\n\n`Alert` has 4 variant styles you can use. Pass the `variant` prop and use either\n`subtle`, `solid`, `left-accent` or `top-accent`.\n\n```jsx\n<Stack spacing={3}>\n  <Alert status=\"success\" variant=\"subtle\">\n    <AlertIcon />\n    Data uploaded to the server. Fire on!\n  </Alert>\n\n  <Alert status=\"success\" variant=\"solid\">\n    <AlertIcon />\n    Data uploaded to the server. Fire on!\n  </Alert>\n\n  <Alert status=\"success\" variant=\"left-accent\">\n    <AlertIcon />\n    Data uploaded to the server. Fire on!\n  </Alert>\n\n  <Alert status=\"success\" variant=\"top-accent\">\n    <AlertIcon />\n    Data uploaded to the server. Fire on!\n  </Alert>\n</Stack>\n```\n\n### Composition\n\n`Alert` ships with smaller components to allow for flexibility in creating all\nkinds of layouts. Here's an example of a custom alert style and layout:\n\n```jsx\n<Alert\n  status=\"success\"\n  variant=\"subtle\"\n  flexDirection=\"column\"\n  alignItems=\"center\"\n  justifyContent=\"center\"\n  textAlign=\"center\"\n  height=\"200px\"\n>\n  <AlertIcon boxSize=\"40px\" mr={0} />\n  <AlertTitle mt={4} mb={1} fontSize=\"lg\">\n    Application submitted!\n  </AlertTitle>\n  <AlertDescription maxWidth=\"sm\">\n    Thanks for submitting your application. Our team will get back to you soon.\n  </AlertDescription>\n</Alert>\n```\n\n`Alert` can also incorporate other Chakra components. Here's an example of an\nalert with wrapping description text:\n\n```jsx\n<Alert status=\"success\">\n  <AlertIcon />\n  <Box flex=\"1\">\n    <AlertTitle>Success!</AlertTitle>\n    <AlertDescription display=\"block\">\n      Your application has been received. We will review your application and\n      respond within the next 48 hours.\n    </AlertDescription>\n  </Box>\n  <CloseButton position=\"absolute\" right=\"8px\" top=\"8px\" />\n</Alert>\n```\n\n## Props\n\n### Alert Props\n\n`Alert` is the wrapper for `Alert` component. It composes the `Flex` component.\n\n<PropsTable of=\"Alert\" />\n\n### AlertIcon Props\n\n`AlertIcon` composes `Icon` and changes the icon based on the `status` prop.\n\n### AlertTitle Props\n\n`AlertTitle` composes the `Box` component.\n\n### AlertDescription Props\n\n`AlertDescription` composes the `Box` component.\n","title":"Chakra UI Alerts - Horizon UI","package":"@chakra-ui/alert","image":"components/alert.svg","description":"Alerts are used to communicate a state that affects a system, feature or page.","slug":"/docs/feedback/alerts","lastEdited":{"date":"April 02, 2022","author":"Simmmple"},"headings":[{"text":"Import","id":"import","level":"h2"},{"text":"Usage","id":"usage","level":"h2"},{"text":"Status","id":"status","level":"h3"},{"text":"Variant","id":"variant","level":"h3"},{"text":"Composition","id":"composition","level":"h3"},{"text":"Props","id":"props","level":"h2"},{"text":"Alert Props","id":"alert-props","level":"h3"},{"text":"AlertIcon Props","id":"alerticon-props","level":"h3"},{"text":"AlertTitle Props","id":"alerttitle-props","level":"h3"},{"text":"AlertDescription Props","id":"alertdescription-props","level":"h3"}],"editUrl":"https://github.com/horizon-ui/horizon-ui-chakra/edit/main/website/pages/docs/feedback/alerts.mdx","author":null,"tags":[]},"_superjson":{"values":{"frontMatter.author":["undefined"]}}},"__N_SSG":true}
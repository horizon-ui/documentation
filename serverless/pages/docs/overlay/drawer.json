{"pageProps":{"mdxSource":{"compiledSource":"var c=Object.defineProperty,u=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var s=(o,r,n)=>r in o?c(o,r,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[r]=n,e=(o,r)=>{for(var n in r||(r={}))i.call(r,n)&&s(o,n,r[n]);if(a)for(var n of a(r))l.call(r,n)&&s(o,n,r[n]);return o},p=(o,r)=>u(o,m(r));var d=(o,r)=>{var n={};for(var t in o)i.call(o,t)&&r.indexOf(t)<0&&(n[t]=o[t]);if(o!=null&&a)for(var t of a(o))r.indexOf(t)<0&&l.call(o,t)&&(n[t]=o[t]);return n};const makeShortcode=o=>function(n){return console.warn(\"Component \"+o+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},n))},PropsTable=makeShortcode(\"PropsTable\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var t=n,{components:o}=t,r=d(t,[\"components\"]);return mdx(MDXLayout,p(e(e({},layoutProps),r),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"Drawer\"),` component is a panel that slides out from the edge of the screen.\nIt can be useful when you need users to complete a task or view some details\nwithout leaving the current page.`),mdx(\"h2\",e({},{id:\"import\"}),\"Import\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`import {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n} from \"@chakra-ui/react\"\n`)),mdx(\"h2\",e({},{id:\"usage\"}),\"Usage\"),mdx(\"h3\",e({},{id:\"basic-drawer\"}),\"Basic Drawer\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function DrawerExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const btnRef = React.useRef()\n\n  return (\n    <>\n      <Button ref={btnRef} colorScheme=\"brand\" onClick={onOpen}>\n        Open\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        onClose={onClose}\n        finalFocusRef={btnRef}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Create your account</DrawerHeader>\n\n          <DrawerBody>\n            <Input placeholder=\"Type here...\" />\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button colorScheme=\"brand\">Save</Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function DrawerExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const btnRef = React.useRef()\n\n  return (\n    <>\n      <Button ref={btnRef} colorScheme=\"brand\" onClick={onOpen}>\n        Open\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        onClose={onClose}\n        finalFocusRef={btnRef}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Create your account</DrawerHeader>\n\n          <DrawerBody>\n            <Input placeholder=\"Type here...\" />\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button colorScheme=\"brand\">Save</Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"drawer-placement\"}),\"Drawer placement\"),mdx(\"p\",null,\"The Drawer can appear from any edge of the screen. Pass the \",mdx(\"inlineCode\",{parentName:\"p\"},\"placement\"),` prop and\nset it to `,mdx(\"inlineCode\",{parentName:\"p\"},\"top\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"right\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"bottom\"),\", or \",mdx(\"inlineCode\",{parentName:\"p\"},\"left\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function PlacementExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [placement, setPlacement] = React.useState(\"right\")\n\n  return (\n    <>\n      <RadioGroup defaultValue={placement} onChange={setPlacement}>\n        <Stack direction=\"row\" mb=\"4\">\n          <Radio value=\"top\">Top</Radio>\n          <Radio value=\"right\">Right</Radio>\n          <Radio value=\"bottom\">Bottom</Radio>\n          <Radio value=\"left\">Left</Radio>\n        </Stack>\n      </RadioGroup>\n      <Button colorScheme=\"brand\" onClick={onOpen}>\n        Open\n      </Button>\n      <Drawer placement={placement} onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Basic Drawer</DrawerHeader>\n          <DrawerBody>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function PlacementExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [placement, setPlacement] = React.useState(\"right\")\n\n  return (\n    <>\n      <RadioGroup defaultValue={placement} onChange={setPlacement}>\n        <Stack direction=\"row\" mb=\"4\">\n          <Radio value=\"top\">Top</Radio>\n          <Radio value=\"right\">Right</Radio>\n          <Radio value=\"bottom\">Bottom</Radio>\n          <Radio value=\"left\">Left</Radio>\n        </Stack>\n      </RadioGroup>\n      <Button colorScheme=\"brand\" onClick={onOpen}>\n        Open\n      </Button>\n      <Drawer placement={placement} onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Basic Drawer</DrawerHeader>\n          <DrawerBody>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"focus-on-specific-element\"}),\"Focus on specific element\"),mdx(\"p\",null,`When a form is in the drawer, you might need to set focus on a specific element\nwhen the drawer opens. Pass the `,mdx(\"inlineCode\",{parentName:\"p\"},\"initialFocusRef\"),\" prop.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"Without the \",mdx(\"inlineCode\",{parentName:\"p\"},\"initialFocusRef\"),\" prop, the drawer will set focus on the \",mdx(\"strong\",{parentName:\"p\"},`first\nfocusable element`),\" when it opens.\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function DrawerExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const firstField = React.useRef()\n\n  return (\n    <>\n      <Button leftIcon={<AddIcon />} colorScheme=\"brand\" onClick={onOpen}>\n        Create user\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        initialFocusRef={firstField}\n        onClose={onClose}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader borderBottomWidth=\"1px\">\n            Create a new account\n          </DrawerHeader>\n\n          <DrawerBody>\n            <Stack spacing=\"24px\">\n              <Box>\n                <FormLabel htmlFor=\"username\">Name</FormLabel>\n                <Input\n                  ref={firstField}\n                  id=\"username\"\n                  placeholder=\"Please enter user name\"\n                />\n              </Box>\n\n              <Box>\n                <FormLabel htmlFor=\"url\">Url</FormLabel>\n                <InputGroup>\n                  <InputLeftAddon>http://</InputLeftAddon>\n                  <Input\n                    type=\"url\"\n                    id=\"url\"\n                    placeholder=\"Please enter domain\"\n                  />\n                  <InputRightAddon>.com</InputRightAddon>\n                </InputGroup>\n              </Box>\n\n              <Box>\n                <FormLabel htmlFor=\"owner\">Select Owner</FormLabel>\n                <Select id=\"owner\" defaultValue=\"naruto\">\n                  <option value=\"naruto\">Fred Michael</option>\n                  <option value=\"kola\">John Wilson</option>\n                </Select>\n              </Box>\n\n              <Box>\n                <FormLabel htmlFor=\"desc\">Description</FormLabel>\n                <Textarea id=\"desc\" />\n              </Box>\n            </Stack>\n          </DrawerBody>\n\n          <DrawerFooter borderTopWidth=\"1px\">\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button colorScheme=\"brand\">Submit</Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function DrawerExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const firstField = React.useRef()\n\n  return (\n    <>\n      <Button leftIcon={<AddIcon />} colorScheme=\"brand\" onClick={onOpen}>\n        Create user\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        initialFocusRef={firstField}\n        onClose={onClose}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader borderBottomWidth=\"1px\">\n            Create a new account\n          </DrawerHeader>\n\n          <DrawerBody>\n            <Stack spacing=\"24px\">\n              <Box>\n                <FormLabel htmlFor=\"username\">Name</FormLabel>\n                <Input\n                  ref={firstField}\n                  id=\"username\"\n                  placeholder=\"Please enter user name\"\n                />\n              </Box>\n\n              <Box>\n                <FormLabel htmlFor=\"url\">Url</FormLabel>\n                <InputGroup>\n                  <InputLeftAddon>http://</InputLeftAddon>\n                  <Input\n                    type=\"url\"\n                    id=\"url\"\n                    placeholder=\"Please enter domain\"\n                  />\n                  <InputRightAddon>.com</InputRightAddon>\n                </InputGroup>\n              </Box>\n\n              <Box>\n                <FormLabel htmlFor=\"owner\">Select Owner</FormLabel>\n                <Select id=\"owner\" defaultValue=\"naruto\">\n                  <option value=\"naruto\">Fred Michael</option>\n                  <option value=\"kola\">John Wilson</option>\n                </Select>\n              </Box>\n\n              <Box>\n                <FormLabel htmlFor=\"desc\">Description</FormLabel>\n                <Textarea id=\"desc\" />\n              </Box>\n            </Stack>\n          </DrawerBody>\n\n          <DrawerFooter borderTopWidth=\"1px\">\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button colorScheme=\"brand\">Submit</Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"drawer-widths\"}),\"Drawer Widths\"),mdx(\"p\",null,\"Pass the \",mdx(\"inlineCode\",{parentName:\"p\"},\"size\"),` prop if you need to adjust the size of the drawer. Values can be\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"xs\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"sm\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"md\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"lg\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"xl\"),\", or \",mdx(\"inlineCode\",{parentName:\"p\"},\"full\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function SizeExample() {\n  const [size, setSize] = React.useState(\"md\")\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const handleClick = (newSize) => {\n    setSize(newSize)\n    onOpen()\n  }\n\n  const sizes = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"full\"]\n\n  return (\n    <>\n      {sizes.map((size) => (\n        <Button\n          onClick={() => handleClick(size)}\n          key={size}\n          m={4}\n        >{\\`Open \\${size} Drawer\\`}</Button>\n      ))}\n\n      <Drawer onClose={onClose} isOpen={isOpen} size={size}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader>{\\`\\${size} drawer contents\\`}</DrawerHeader>\n          <DrawerBody>\n            {size === \"full\"\n              ? \\`You're trapped \\u{1F606} , refresh the page to leave or press 'Esc' key.\\`\n              : null}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function SizeExample() {\n  const [size, setSize] = React.useState(\"md\")\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const handleClick = (newSize) => {\n    setSize(newSize)\n    onOpen()\n  }\n\n  const sizes = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"full\"]\n\n  return (\n    <>\n      {sizes.map((size) => (\n        <Button\n          onClick={() => handleClick(size)}\n          key={size}\n          m={4}\n        >{\\`Open \\${size} Drawer\\`}</Button>\n      ))}\n\n      <Drawer onClose={onClose} isOpen={isOpen} size={size}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader>{\\`\\${size} drawer contents\\`}</DrawerHeader>\n          <DrawerBody>\n            {size === \"full\"\n              ? \\`You're trapped \\u{1F606} , refresh the page to leave or press 'Esc' key.\\`\n              : null}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"using-a-form-in-a-drawer\"}),\"Using a form in a Drawer\"),mdx(\"p\",null,`If you need to put a form within the Drawer, you might need to use to form\nvalidation library like `,mdx(\"inlineCode\",{parentName:\"p\"},\"react-hook-form\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"formik\"),`. Here's the recommended\nway to do it:`),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},`Because the button is located outside the form, you can leverage its native\nHTML `,mdx(\"inlineCode\",{parentName:\"p\"},\"form\"),\" attribute and refer to the \",mdx(\"inlineCode\",{parentName:\"p\"},\"id\"),\" of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"form\"),\".\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live=false\",live:\"false\"}),`export const App = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  return (\n    <>\n      <Button onClick={onOpen}>Open</Button>\n      <Drawer isOpen={isOpen} onClose={onClose}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Create your account</DrawerHeader>\n\n          <DrawerBody>\n            <form\n              id=\"my-form\"\n              onSubmit={(e) => {\n                e.preventDefault()\n                console.log(\"submitted\")\n              }}\n            >\n              <Input name=\"nickname\" placeholder=\"Type here...\" />\n            </form>\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button type=\"submit\" form=\"my-form\">\n              Save\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"live=false\",live:\"false\"}),`export const App = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  return (\n    <>\n      <Button onClick={onOpen}>Open</Button>\n      <Drawer isOpen={isOpen} onClose={onClose}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Create your account</DrawerHeader>\n\n          <DrawerBody>\n            <form\n              id=\"my-form\"\n              onSubmit={(e) => {\n                e.preventDefault()\n                console.log(\"submitted\")\n              }}\n            >\n              <Input name=\"nickname\" placeholder=\"Type here...\" />\n            </form>\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button type=\"submit\" form=\"my-form\">\n              Save\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n`)),mdx(\"h2\",e({},{id:\"accessibility\"}),\"Accessibility\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"When opening the Drawer, focus is trapped inside the Drawer.\"),mdx(\"li\",{parentName:\"ul\"},`By default, the drawer sets focus on the first focusable element. If the\n`,mdx(\"inlineCode\",{parentName:\"li\"},\"initialFocusRef\"),` prop is passed, the drawer sets focus on the element with\nthe assigned `,mdx(\"inlineCode\",{parentName:\"li\"},\"ref\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"After the drawer closes, it'll return focus to the element that triggered it.\")),mdx(\"h2\",e({},{id:\"props\"}),\"Props\"),mdx(\"h3\",e({},{id:\"drawer-props\"}),\"Drawer Props\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"Drawer\"),\" composes the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Modal\"),\" component with these extra props:\"),mdx(PropsTable,{of:\"Drawer\",mdxType:\"PropsTable\"}),mdx(\"h3\",e({},{id:\"other-components\"}),\"Other components\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"DrawerOverlay\"),\", \",mdx(\"inlineCode\",{parentName:\"li\"},\"DrawerFooter\"),\", \",mdx(\"inlineCode\",{parentName:\"li\"},\"DrawerHeader\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"DrawerBody\"),` composes\n`,mdx(\"inlineCode\",{parentName:\"li\"},\"Box\"),\" component\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"DrawerCloseButton\"),\" composes \",mdx(\"inlineCode\",{parentName:\"li\"},\"CloseButton\"))))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Chakra UI Drawer - Horizon UI","package":"@chakra-ui/drawer","image":"components/drawer.svg","description":"The Drawer component is a panel that slides out from the edge of the screen. It can be useful when you need users to complete a task or view some details without leaving the current page."}},"frontMatter":{"excerpt":"The Drawer component is a panel that slides out from the edge of the screen.","readTimeMinutes":15,"mdxContent":"---\ntitle: Chakra UI Drawer - Horizon UI\npackage: \"@chakra-ui/drawer\"\nimage: \"components/drawer.svg\"\ndescription:\n  The Drawer component is a panel that slides out from the edge of the screen.\n  It can be useful when you need users to complete a task or view some details\n  without leaving the current page.\n---\n\nThe `Drawer` component is a panel that slides out from the edge of the screen.\nIt can be useful when you need users to complete a task or view some details\nwithout leaving the current page.\n\n## Import\n\n```tsx\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n} from \"@chakra-ui/react\"\n```\n\n## Usage\n\n### Basic Drawer\n\n```jsx\nfunction DrawerExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const btnRef = React.useRef()\n\n  return (\n    <>\n      <Button ref={btnRef} colorScheme=\"brand\" onClick={onOpen}>\n        Open\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        onClose={onClose}\n        finalFocusRef={btnRef}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Create your account</DrawerHeader>\n\n          <DrawerBody>\n            <Input placeholder=\"Type here...\" />\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button colorScheme=\"brand\">Save</Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n```\n\n```tsx\nfunction DrawerExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const btnRef = React.useRef()\n\n  return (\n    <>\n      <Button ref={btnRef} colorScheme=\"brand\" onClick={onOpen}>\n        Open\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        onClose={onClose}\n        finalFocusRef={btnRef}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Create your account</DrawerHeader>\n\n          <DrawerBody>\n            <Input placeholder=\"Type here...\" />\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button colorScheme=\"brand\">Save</Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n```\n\n### Drawer placement\n\nThe Drawer can appear from any edge of the screen. Pass the `placement` prop and\nset it to `top`, `right`, `bottom`, or `left`.\n\n```jsx\nfunction PlacementExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [placement, setPlacement] = React.useState(\"right\")\n\n  return (\n    <>\n      <RadioGroup defaultValue={placement} onChange={setPlacement}>\n        <Stack direction=\"row\" mb=\"4\">\n          <Radio value=\"top\">Top</Radio>\n          <Radio value=\"right\">Right</Radio>\n          <Radio value=\"bottom\">Bottom</Radio>\n          <Radio value=\"left\">Left</Radio>\n        </Stack>\n      </RadioGroup>\n      <Button colorScheme=\"brand\" onClick={onOpen}>\n        Open\n      </Button>\n      <Drawer placement={placement} onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Basic Drawer</DrawerHeader>\n          <DrawerBody>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n```\n\n```tsx\nfunction PlacementExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [placement, setPlacement] = React.useState(\"right\")\n\n  return (\n    <>\n      <RadioGroup defaultValue={placement} onChange={setPlacement}>\n        <Stack direction=\"row\" mb=\"4\">\n          <Radio value=\"top\">Top</Radio>\n          <Radio value=\"right\">Right</Radio>\n          <Radio value=\"bottom\">Bottom</Radio>\n          <Radio value=\"left\">Left</Radio>\n        </Stack>\n      </RadioGroup>\n      <Button colorScheme=\"brand\" onClick={onOpen}>\n        Open\n      </Button>\n      <Drawer placement={placement} onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Basic Drawer</DrawerHeader>\n          <DrawerBody>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n```\n\n### Focus on specific element\n\nWhen a form is in the drawer, you might need to set focus on a specific element\nwhen the drawer opens. Pass the `initialFocusRef` prop.\n\n> Without the `initialFocusRef` prop, the drawer will set focus on the **first\n> focusable element** when it opens.\n\n```jsx\nfunction DrawerExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const firstField = React.useRef()\n\n  return (\n    <>\n      <Button leftIcon={<AddIcon />} colorScheme=\"brand\" onClick={onOpen}>\n        Create user\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        initialFocusRef={firstField}\n        onClose={onClose}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader borderBottomWidth=\"1px\">\n            Create a new account\n          </DrawerHeader>\n\n          <DrawerBody>\n            <Stack spacing=\"24px\">\n              <Box>\n                <FormLabel htmlFor=\"username\">Name</FormLabel>\n                <Input\n                  ref={firstField}\n                  id=\"username\"\n                  placeholder=\"Please enter user name\"\n                />\n              </Box>\n\n              <Box>\n                <FormLabel htmlFor=\"url\">Url</FormLabel>\n                <InputGroup>\n                  <InputLeftAddon>http://</InputLeftAddon>\n                  <Input\n                    type=\"url\"\n                    id=\"url\"\n                    placeholder=\"Please enter domain\"\n                  />\n                  <InputRightAddon>.com</InputRightAddon>\n                </InputGroup>\n              </Box>\n\n              <Box>\n                <FormLabel htmlFor=\"owner\">Select Owner</FormLabel>\n                <Select id=\"owner\" defaultValue=\"naruto\">\n                  <option value=\"naruto\">Fred Michael</option>\n                  <option value=\"kola\">John Wilson</option>\n                </Select>\n              </Box>\n\n              <Box>\n                <FormLabel htmlFor=\"desc\">Description</FormLabel>\n                <Textarea id=\"desc\" />\n              </Box>\n            </Stack>\n          </DrawerBody>\n\n          <DrawerFooter borderTopWidth=\"1px\">\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button colorScheme=\"brand\">Submit</Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n```\n\n```tsx\nfunction DrawerExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const firstField = React.useRef()\n\n  return (\n    <>\n      <Button leftIcon={<AddIcon />} colorScheme=\"brand\" onClick={onOpen}>\n        Create user\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        initialFocusRef={firstField}\n        onClose={onClose}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader borderBottomWidth=\"1px\">\n            Create a new account\n          </DrawerHeader>\n\n          <DrawerBody>\n            <Stack spacing=\"24px\">\n              <Box>\n                <FormLabel htmlFor=\"username\">Name</FormLabel>\n                <Input\n                  ref={firstField}\n                  id=\"username\"\n                  placeholder=\"Please enter user name\"\n                />\n              </Box>\n\n              <Box>\n                <FormLabel htmlFor=\"url\">Url</FormLabel>\n                <InputGroup>\n                  <InputLeftAddon>http://</InputLeftAddon>\n                  <Input\n                    type=\"url\"\n                    id=\"url\"\n                    placeholder=\"Please enter domain\"\n                  />\n                  <InputRightAddon>.com</InputRightAddon>\n                </InputGroup>\n              </Box>\n\n              <Box>\n                <FormLabel htmlFor=\"owner\">Select Owner</FormLabel>\n                <Select id=\"owner\" defaultValue=\"naruto\">\n                  <option value=\"naruto\">Fred Michael</option>\n                  <option value=\"kola\">John Wilson</option>\n                </Select>\n              </Box>\n\n              <Box>\n                <FormLabel htmlFor=\"desc\">Description</FormLabel>\n                <Textarea id=\"desc\" />\n              </Box>\n            </Stack>\n          </DrawerBody>\n\n          <DrawerFooter borderTopWidth=\"1px\">\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button colorScheme=\"brand\">Submit</Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n```\n\n### Drawer Widths\n\nPass the `size` prop if you need to adjust the size of the drawer. Values can be\n`xs`, `sm`, `md`, `lg`, `xl`, or `full`.\n\n```jsx\nfunction SizeExample() {\n  const [size, setSize] = React.useState(\"md\")\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const handleClick = (newSize) => {\n    setSize(newSize)\n    onOpen()\n  }\n\n  const sizes = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"full\"]\n\n  return (\n    <>\n      {sizes.map((size) => (\n        <Button\n          onClick={() => handleClick(size)}\n          key={size}\n          m={4}\n        >{`Open ${size} Drawer`}</Button>\n      ))}\n\n      <Drawer onClose={onClose} isOpen={isOpen} size={size}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader>{`${size} drawer contents`}</DrawerHeader>\n          <DrawerBody>\n            {size === \"full\"\n              ? `You're trapped 😆 , refresh the page to leave or press 'Esc' key.`\n              : null}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n```\n\n```tsx\nfunction SizeExample() {\n  const [size, setSize] = React.useState(\"md\")\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const handleClick = (newSize) => {\n    setSize(newSize)\n    onOpen()\n  }\n\n  const sizes = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"full\"]\n\n  return (\n    <>\n      {sizes.map((size) => (\n        <Button\n          onClick={() => handleClick(size)}\n          key={size}\n          m={4}\n        >{`Open ${size} Drawer`}</Button>\n      ))}\n\n      <Drawer onClose={onClose} isOpen={isOpen} size={size}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader>{`${size} drawer contents`}</DrawerHeader>\n          <DrawerBody>\n            {size === \"full\"\n              ? `You're trapped 😆 , refresh the page to leave or press 'Esc' key.`\n              : null}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n```\n\n### Using a form in a Drawer\n\nIf you need to put a form within the Drawer, you might need to use to form\nvalidation library like `react-hook-form` or `formik`. Here's the recommended\nway to do it:\n\n> Because the button is located outside the form, you can leverage its native\n> HTML `form` attribute and refer to the `id` of the `form`.\n\n```jsx live=false\nexport const App = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  return (\n    <>\n      <Button onClick={onOpen}>Open</Button>\n      <Drawer isOpen={isOpen} onClose={onClose}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Create your account</DrawerHeader>\n\n          <DrawerBody>\n            <form\n              id=\"my-form\"\n              onSubmit={(e) => {\n                e.preventDefault()\n                console.log(\"submitted\")\n              }}\n            >\n              <Input name=\"nickname\" placeholder=\"Type here...\" />\n            </form>\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button type=\"submit\" form=\"my-form\">\n              Save\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n```\n\n```tsx live=false\nexport const App = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  return (\n    <>\n      <Button onClick={onOpen}>Open</Button>\n      <Drawer isOpen={isOpen} onClose={onClose}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Create your account</DrawerHeader>\n\n          <DrawerBody>\n            <form\n              id=\"my-form\"\n              onSubmit={(e) => {\n                e.preventDefault()\n                console.log(\"submitted\")\n              }}\n            >\n              <Input name=\"nickname\" placeholder=\"Type here...\" />\n            </form>\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button type=\"submit\" form=\"my-form\">\n              Save\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n```\n\n## Accessibility\n\n- When opening the Drawer, focus is trapped inside the Drawer.\n- By default, the drawer sets focus on the first focusable element. If the\n  `initialFocusRef` prop is passed, the drawer sets focus on the element with\n  the assigned `ref`.\n- After the drawer closes, it'll return focus to the element that triggered it.\n\n## Props\n\n### Drawer Props\n\n`Drawer` composes the `Modal` component with these extra props:\n\n<PropsTable of=\"Drawer\" />\n\n### Other components\n\n- `DrawerOverlay`, `DrawerFooter`, `DrawerHeader` and `DrawerBody` composes\n  `Box` component\n- `DrawerCloseButton` composes `CloseButton`\n","title":"Chakra UI Drawer - Horizon UI","package":"@chakra-ui/drawer","image":"components/drawer.svg","description":"The Drawer component is a panel that slides out from the edge of the screen. It can be useful when you need users to complete a task or view some details without leaving the current page.","slug":"/docs/overlay/drawer","lastEdited":{"date":"April 02, 2022","author":"Simmmple"},"headings":[{"text":"Import","id":"import","level":"h2"},{"text":"Usage","id":"usage","level":"h2"},{"text":"Basic Drawer","id":"basic-drawer","level":"h3"},{"text":"Drawer placement","id":"drawer-placement","level":"h3"},{"text":"Focus on specific element","id":"focus-on-specific-element","level":"h3"},{"text":"Drawer Widths","id":"drawer-widths","level":"h3"},{"text":"Using a form in a Drawer","id":"using-a-form-in-a-drawer","level":"h3"},{"text":"Accessibility","id":"accessibility","level":"h2"},{"text":"Props","id":"props","level":"h2"},{"text":"Drawer Props","id":"drawer-props","level":"h3"},{"text":"Other components","id":"other-components","level":"h3"}],"editUrl":"https://github.com/horizon-ui/horizon-ui-chakra/edit/main/website/pages/docs/overlay/drawer.mdx","author":null,"tags":[]},"_superjson":{"values":{"frontMatter.author":["undefined"]}}},"__N_SSG":true}
{"pageProps":{"mdxSource":{"compiledSource":"var p=Object.defineProperty,u=Object.defineProperties;var C=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable;var r=(o,n,l)=>n in o?p(o,n,{enumerable:!0,configurable:!0,writable:!0,value:l}):o[n]=l,e=(o,n)=>{for(var l in n||(n={}))i.call(n,l)&&r(o,l,n[l]);if(a)for(var l of a(n))d.call(n,l)&&r(o,l,n[l]);return o},s=(o,n)=>u(o,C(n));var c=(o,n)=>{var l={};for(var t in o)i.call(o,t)&&n.indexOf(t)<0&&(l[t]=o[t]);if(o!=null&&a)for(var t of a(o))n.indexOf(t)<0&&d.call(o,t)&&(l[t]=o[t]);return l};const makeShortcode=o=>function(l){return console.warn(\"Component \"+o+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},l))},PropsTable=makeShortcode(\"PropsTable\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(l){var t=l,{components:o}=t,n=c(t,[\"components\"]);return mdx(MDXLayout,s(e(e({},layoutProps),n),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`A dialog is a window overlaid on either the primary window or another dialog\nwindow. Content behind a modal dialog is `,mdx(\"strong\",{parentName:\"p\"},\"inert\"),`, meaning that users cannot\ninteract with it.`),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},`\\u{1F6A8} Version (v1.0.0) introduced a breaking change to this component's API.\nKindly update accordingly.`)),mdx(\"h2\",e({},{id:\"import\"}),\"Import\"),mdx(\"p\",null,\"Chakra exports 7 components to help you create any modal dialog.\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"Modal\"),\": The wrapper that provides context for its children.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ModalOverlay\"),\": The dimmed overlay behind the modal dialog.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ModalContent\"),\": The container for the modal dialog's content.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ModalHeader\"),\": The header that labels the modal dialog.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ModalFooter\"),\": The footer that houses the modal actions.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ModalBody\"),\": The wrapper that houses the modal's main content.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ModalCloseButton\"),\": The button that closes the modal.\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from \"@chakra-ui/react\"\n`)),mdx(\"h2\",e({},{id:\"usage\"}),\"Usage\"),mdx(\"p\",null,`When the modal opens, focus is sent into the modal and set to the first tabbable\nelement. If there are no tabbled elements, focus is set on `,mdx(\"inlineCode\",{parentName:\"p\"},\"ModalContent\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function BasicUsage() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function BasicUsage() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"control-focus-when-modal-closes\"}),\"Control Focus when Modal closes\"),mdx(\"p\",null,`When the dialog closes, it returns focus to the element that triggered it. Set\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"finalFocusRef\"),` to change the element that should receive focus when the modal\ncloses.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function ReturnFocus() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const finalRef = React.useRef()\n\n  return (\n    <>\n      <Box ref={finalRef} tabIndex={-1} aria-label=\"Focus moved to this box\">\n        Some other content that'll receive focus on close.\n      </Box>\n\n      <Button mt={4} onClick={onOpen}>\n        Open Modal\n      </Button>\n      <Modal finalFocusRef={finalRef} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function ReturnFocus() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const finalRef = React.useRef()\n\n  return (\n    <>\n      <Box ref={finalRef} tabIndex={-1} aria-label=\"Focus moved to this box\">\n        Some other content that'll receive focus on close.\n      </Box>\n\n      <Button mt={4} onClick={onOpen}>\n        Open Modal\n      </Button>\n      <Modal finalFocusRef={finalRef} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"block-scrolling-when-modal-opens\"}),\"Block Scrolling when Modal opens\"),mdx(\"p\",null,`For accessibility, it is recommended to block scrolling on the main document\nbehind the modal. Chakra does this by default but you can set\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"blockScrollOnMount\"),\" to \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\" to allow scrolling behind the modal.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function BasicUsage() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal blockScrollOnMount={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Text fontWeight=\"bold\" mb=\"1rem\">\n              You can scroll the content behind the modal\n            </Text>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function BasicUsage() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal blockScrollOnMount={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Text fontWeight=\"bold\" mb=\"1rem\">\n              You can scroll the content behind the modal\n            </Text>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"focus-on-specific-element\"}),\"Focus on specific element\"),mdx(\"p\",null,`Chakra automatically sets focus on the first tabbable element in the modal.\nHowever, there might be scenarios where you need to manually control where focus\ngoes.`),mdx(\"p\",null,\"Chakra provides 2 props for this use case:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"initialFocusRef\"),\": The \",mdx(\"inlineCode\",{parentName:\"li\"},\"ref\"),` of the component that receives focus when the\nmodal opens.`),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"finalFocusRef\"),\": The \",mdx(\"inlineCode\",{parentName:\"li\"},\"ref\"),` of the component that receives focus when the modal\ncloses.`)),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"If you set \",mdx(\"inlineCode\",{parentName:\"p\"},\"finalFocusRef\"),\", internally we set \",mdx(\"inlineCode\",{parentName:\"p\"},\"returnFocusOnClose\"),\" to \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),`\nso it doesn't return focus to the element that triggered it.`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function InitialFocus() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const initialRef = React.useRef()\n  const finalRef = React.useRef()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n      <Button ml={4} ref={finalRef}>\n        I'll receive focus on close\n      </Button>\n\n      <Modal\n        initialFocusRef={initialRef}\n        finalFocusRef={finalRef}\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create your account</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <FormControl>\n              <FormLabel>First name</FormLabel>\n              <Input ref={initialRef} placeholder=\"First name\" />\n            </FormControl>\n\n            <FormControl mt={4}>\n              <FormLabel>Last name</FormLabel>\n              <Input placeholder=\"Last name\" />\n            </FormControl>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3}>\n              Save\n            </Button>\n            <Button onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function InitialFocus() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const initialRef = React.useRef()\n  const finalRef = React.useRef()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n      <Button ml={4} ref={finalRef}>\n        I'll receive focus on close\n      </Button>\n\n      <Modal\n        initialFocusRef={initialRef}\n        finalFocusRef={finalRef}\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create your account</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <FormControl>\n              <FormLabel>First name</FormLabel>\n              <Input ref={initialRef} placeholder=\"First name\" />\n            </FormControl>\n\n            <FormControl mt={4}>\n              <FormLabel>Last name</FormLabel>\n              <Input placeholder=\"Last name\" />\n            </FormControl>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3}>\n              Save\n            </Button>\n            <Button onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"close-modal-on-overlay-click\"}),\"Close Modal on Overlay Click\"),mdx(\"p\",null,`By default, the modal closes when you click its overlay. You can set\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"closeOnOverlayClick\"),\" to \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\" if you want the modal to stay visible.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function ManualClose() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create your account</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3}>\n              Save\n            </Button>\n            <Button onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function ManualClose() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create your account</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3}>\n              Save\n            </Button>\n            <Button onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"make-modal-vertically-centered\"}),\"Make modal vertically centered\"),mdx(\"p\",null,\"By default the modal has a vertical offset of \",mdx(\"inlineCode\",{parentName:\"p\"},\"3.75rem\"),` which you can change by\npassing `,mdx(\"inlineCode\",{parentName:\"p\"},\"top\"),\" to the \",mdx(\"inlineCode\",{parentName:\"p\"},\"ModalContent\"),`. If you need to vertically center the modal,\npass the `,mdx(\"inlineCode\",{parentName:\"p\"},\"isCentered\"),\" prop.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},`If the content within the modal overflows beyond the viewport, don't use this\nprop. Try setting the `,mdx(\"a\",e({parentName:\"p\"},{href:\"#modal-overflow-behavior\"}),\"overflow behavior\"),\" instead.\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function VerticallyCenter() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Trigger modal</Button>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function VerticallyCenter() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Trigger modal</Button>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"changing-the-transition\"}),\"Changing the transition\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"Modal\"),` comes with a scale transition by default but you can change it by\npassing a `,mdx(\"inlineCode\",{parentName:\"p\"},\"motionPreset\"),\" prop, and set its value to either \",mdx(\"inlineCode\",{parentName:\"p\"},\"slideInBottom\"),`,\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"slideInRight\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"scale\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"none\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function TransitionExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n      <Modal\n        isCentered\n        onClose={onClose}\n        isOpen={isOpen}\n        motionPreset=\"slideInBottom\"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function TransitionExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n      <Modal\n        isCentered\n        onClose={onClose}\n        isOpen={isOpen}\n        motionPreset=\"slideInBottom\"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"modal-overflow-behavior\"}),\"Modal overflow behavior\"),mdx(\"p\",null,`If the content within the modal overflows beyond the viewport, you can use the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"scrollBehavior\"),\" to control how scrolling should happen.\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"If set to \",mdx(\"inlineCode\",{parentName:\"li\"},\"inside\"),\", scroll only occurs within the \",mdx(\"inlineCode\",{parentName:\"li\"},\"ModalBody\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"If set to \",mdx(\"inlineCode\",{parentName:\"li\"},\"outside\"),\", the entire \",mdx(\"inlineCode\",{parentName:\"li\"},\"ModalContent\"),` will scroll within the\nviewport.`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function ScrollingExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [scrollBehavior, setScrollBehavior] = React.useState(\"inside\")\n\n  const btnRef = React.useRef()\n  return (\n    <>\n      <RadioGroup value={scrollBehavior} onChange={setScrollBehavior}>\n        <Stack direction=\"row\">\n          <Radio value=\"inside\">inside</Radio>\n          <Radio value=\"outside\">outside</Radio>\n        </Stack>\n      </RadioGroup>\n\n      <Button mt={3} ref={btnRef} onClick={onOpen}>\n        Trigger modal\n      </Button>\n\n      <Modal\n        onClose={onClose}\n        finalFocusRef={btnRef}\n        isOpen={isOpen}\n        scrollBehavior={scrollBehavior}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={15} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function ScrollingExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [scrollBehavior, setScrollBehavior] = React.useState(\"inside\")\n\n  const btnRef = React.useRef()\n  return (\n    <>\n      <RadioGroup value={scrollBehavior} onChange={setScrollBehavior}>\n        <Stack direction=\"row\">\n          <Radio value=\"inside\">inside</Radio>\n          <Radio value=\"outside\">outside</Radio>\n        </Stack>\n      </RadioGroup>\n\n      <Button mt={3} ref={btnRef} onClick={onOpen}>\n        Trigger modal\n      </Button>\n\n      <Modal\n        onClose={onClose}\n        finalFocusRef={btnRef}\n        isOpen={isOpen}\n        scrollBehavior={scrollBehavior}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={15} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"modal-sizes\"}),\"Modal Sizes\"),mdx(\"p\",null,\"Pass the \",mdx(\"inlineCode\",{parentName:\"p\"},\"size\"),` prop if you need to adjust the size of the modal. Values can be\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"xs\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"sm\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"md\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"lg\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"xl\"),\", or \",mdx(\"inlineCode\",{parentName:\"p\"},\"full\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function SizeExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [size, setSize] = React.useState(\"md\")\n\n  const handleSizeClick = (newSize) => {\n    setSize(newSize)\n    onOpen()\n  }\n\n  const sizes = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"full\"]\n\n  return (\n    <>\n      {sizes.map((size) => (\n        <Button\n          onClick={() => handleSizeClick(size)}\n          key={size}\n          m={4}\n        >{\\`Open \\${size} Modal\\`}</Button>\n      ))}\n\n      <Modal onClose={onClose} size={size} isOpen={isOpen}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`function SizeExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [size, setSize] = React.useState(\"md\")\n\n  const handleSizeClick = (newSize) => {\n    setSize(newSize)\n    onOpen()\n  }\n\n  const sizes = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"full\"]\n\n  return (\n    <>\n      {sizes.map((size) => (\n        <Button\n          onClick={() => handleSizeClick(size)}\n          key={size}\n          m={4}\n        >{\\`Open \\${size} Modal\\`}</Button>\n      ))}\n\n      <Modal onClose={onClose} size={size} isOpen={isOpen}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n`)),mdx(\"h3\",e({},{id:\"making-other-elements-inert\"}),\"Making other elements Inert\"),mdx(\"p\",null,`When the modal is open, it is rendered within a portal and all its siblings have\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"aria-hidden\"),\" set to \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),` so the only thing screen readers see is the modal.\nTo disable this behavior, set `,mdx(\"inlineCode\",{parentName:\"p\"},\"useInert\"),\" to \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\".\"),mdx(\"h3\",e({},{id:\"prevent-focus-trapping\"}),\"Prevent focus trapping\"),mdx(\"p\",null,`By default the modal, alert dialog and drawer locks the focus inside them.\nNormally this is what you want to maintain accessibility standards.`),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"While strongly discourage this use case\"),` due to the accessibility impacts,\nthere are certain situations where you might not want the modal to trap focus.`),mdx(\"p\",null,\"To prevent focus trapping, pass \",mdx(\"inlineCode\",{parentName:\"p\"},\"trapFocus\"),\" and set its value to \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\".\"),mdx(\"h2\",e({},{id:\"accessibility\"}),\"Accessibility\"),mdx(\"h3\",e({},{id:\"keyboard-and-focus-management\"}),\"Keyboard and Focus Management\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"When the modal opens, focus is trapped within it.\"),mdx(\"li\",{parentName:\"ul\"},`When the modal opens, focus is automatically set to the first enabled element,\nor the element from `,mdx(\"inlineCode\",{parentName:\"li\"},\"initialFocusRef\"),\".\"),mdx(\"li\",{parentName:\"ul\"},`When the modal closes, focus returns to the element that was focused before\nthe modal activated, or the element from `,mdx(\"inlineCode\",{parentName:\"li\"},\"finalFocusRef\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"Clicking on the overlay closes the Modal.\"),mdx(\"li\",{parentName:\"ul\"},\"Pressing \",mdx(\"kbd\",null,\"Esc\"),\" closes the Modal.\"),mdx(\"li\",{parentName:\"ul\"},\"Scrolling is blocked on the elements behind the modal.\"),mdx(\"li\",{parentName:\"ul\"},\"The modal is rendered in a portal attached to the end of \",mdx(\"inlineCode\",{parentName:\"li\"},\"document.body\"),` to\nbreak it out of the source order and make it easy to add `,mdx(\"inlineCode\",{parentName:\"li\"},\"aria-hidden\"),` to its\nsiblings.`)),mdx(\"h3\",e({},{id:\"aria\"}),\"ARIA\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"ModalContent\"),\" has \",mdx(\"inlineCode\",{parentName:\"li\"},\"aria-modal\"),\" set to \",mdx(\"inlineCode\",{parentName:\"li\"},\"true\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"ModalContent\"),\" has \",mdx(\"inlineCode\",{parentName:\"li\"},\"aria-labelledby\"),\" set to the \",mdx(\"inlineCode\",{parentName:\"li\"},\"id\"),\" of the \",mdx(\"inlineCode\",{parentName:\"li\"},\"ModalHeader\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"ModalContent\"),\" has \",mdx(\"inlineCode\",{parentName:\"li\"},\"aria-describedby\"),\" set to the \",mdx(\"inlineCode\",{parentName:\"li\"},\"id\"),\" of the \",mdx(\"inlineCode\",{parentName:\"li\"},\"ModalBody\"),\".\")),mdx(\"h2\",e({},{id:\"props\"}),\"Props\"),mdx(\"h3\",e({},{id:\"modal-props\"}),\"Modal Props\"),mdx(PropsTable,{of:\"Modal\",mdxType:\"PropsTable\"}),mdx(\"h3\",e({},{id:\"other-components\"}),\"Other components\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ModalOverlay\"),\", \",mdx(\"inlineCode\",{parentName:\"li\"},\"ModalHeader\"),\", \",mdx(\"inlineCode\",{parentName:\"li\"},\"ModalFooter\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"ModalBody\"),\" composes \",mdx(\"inlineCode\",{parentName:\"li\"},\"Box\"),`\ncomponent.`),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ModalCloseButton\"),\" composes \",mdx(\"inlineCode\",{parentName:\"li\"},\"CloseButton\"),\".\")))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Chakra UI Modal Dialog - Horizon UI","package":"@chakra-ui/modal","image":"components/modal.svg","description":"A dialog is a window overlaid on either the primary window or another dialog window"}},"frontMatter":{"excerpt":"A dialog is a window overlaid on either the primary window or another dialog","readTimeMinutes":19,"mdxContent":"---\ntitle: Chakra UI Modal Dialog - Horizon UI\npackage: \"@chakra-ui/modal\"\nimage: \"components/modal.svg\"\ndescription:\n  A dialog is a window overlaid on either the primary window or another dialog\n  window\n---\n\nA dialog is a window overlaid on either the primary window or another dialog\nwindow. Content behind a modal dialog is **inert**, meaning that users cannot\ninteract with it.\n\n> 🚨 Version (v1.0.0) introduced a breaking change to this component's API.\n> Kindly update accordingly.\n\n## Import\n\nChakra exports 7 components to help you create any modal dialog.\n\n- `Modal`: The wrapper that provides context for its children.\n- `ModalOverlay`: The dimmed overlay behind the modal dialog.\n- `ModalContent`: The container for the modal dialog's content.\n- `ModalHeader`: The header that labels the modal dialog.\n- `ModalFooter`: The footer that houses the modal actions.\n- `ModalBody`: The wrapper that houses the modal's main content.\n- `ModalCloseButton`: The button that closes the modal.\n\n```tsx\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from \"@chakra-ui/react\"\n```\n\n## Usage\n\nWhen the modal opens, focus is sent into the modal and set to the first tabbable\nelement. If there are no tabbled elements, focus is set on `ModalContent`.\n\n```jsx\nfunction BasicUsage() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n```tsx\nfunction BasicUsage() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n### Control Focus when Modal closes\n\nWhen the dialog closes, it returns focus to the element that triggered it. Set\n`finalFocusRef` to change the element that should receive focus when the modal\ncloses.\n\n```jsx\nfunction ReturnFocus() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const finalRef = React.useRef()\n\n  return (\n    <>\n      <Box ref={finalRef} tabIndex={-1} aria-label=\"Focus moved to this box\">\n        Some other content that'll receive focus on close.\n      </Box>\n\n      <Button mt={4} onClick={onOpen}>\n        Open Modal\n      </Button>\n      <Modal finalFocusRef={finalRef} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n```tsx\nfunction ReturnFocus() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const finalRef = React.useRef()\n\n  return (\n    <>\n      <Box ref={finalRef} tabIndex={-1} aria-label=\"Focus moved to this box\">\n        Some other content that'll receive focus on close.\n      </Box>\n\n      <Button mt={4} onClick={onOpen}>\n        Open Modal\n      </Button>\n      <Modal finalFocusRef={finalRef} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n### Block Scrolling when Modal opens\n\nFor accessibility, it is recommended to block scrolling on the main document\nbehind the modal. Chakra does this by default but you can set\n`blockScrollOnMount` to `false` to allow scrolling behind the modal.\n\n```jsx\nfunction BasicUsage() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal blockScrollOnMount={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Text fontWeight=\"bold\" mb=\"1rem\">\n              You can scroll the content behind the modal\n            </Text>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n```tsx\nfunction BasicUsage() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal blockScrollOnMount={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Text fontWeight=\"bold\" mb=\"1rem\">\n              You can scroll the content behind the modal\n            </Text>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n### Focus on specific element\n\nChakra automatically sets focus on the first tabbable element in the modal.\nHowever, there might be scenarios where you need to manually control where focus\ngoes.\n\nChakra provides 2 props for this use case:\n\n- `initialFocusRef`: The `ref` of the component that receives focus when the\n  modal opens.\n- `finalFocusRef`: The `ref` of the component that receives focus when the modal\n  closes.\n\n> If you set `finalFocusRef`, internally we set `returnFocusOnClose` to `false`\n> so it doesn't return focus to the element that triggered it.\n\n```jsx\nfunction InitialFocus() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const initialRef = React.useRef()\n  const finalRef = React.useRef()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n      <Button ml={4} ref={finalRef}>\n        I'll receive focus on close\n      </Button>\n\n      <Modal\n        initialFocusRef={initialRef}\n        finalFocusRef={finalRef}\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create your account</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <FormControl>\n              <FormLabel>First name</FormLabel>\n              <Input ref={initialRef} placeholder=\"First name\" />\n            </FormControl>\n\n            <FormControl mt={4}>\n              <FormLabel>Last name</FormLabel>\n              <Input placeholder=\"Last name\" />\n            </FormControl>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3}>\n              Save\n            </Button>\n            <Button onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n```tsx\nfunction InitialFocus() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const initialRef = React.useRef()\n  const finalRef = React.useRef()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n      <Button ml={4} ref={finalRef}>\n        I'll receive focus on close\n      </Button>\n\n      <Modal\n        initialFocusRef={initialRef}\n        finalFocusRef={finalRef}\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create your account</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <FormControl>\n              <FormLabel>First name</FormLabel>\n              <Input ref={initialRef} placeholder=\"First name\" />\n            </FormControl>\n\n            <FormControl mt={4}>\n              <FormLabel>Last name</FormLabel>\n              <Input placeholder=\"Last name\" />\n            </FormControl>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3}>\n              Save\n            </Button>\n            <Button onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n### Close Modal on Overlay Click\n\nBy default, the modal closes when you click its overlay. You can set\n`closeOnOverlayClick` to `false` if you want the modal to stay visible.\n\n```jsx\nfunction ManualClose() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create your account</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3}>\n              Save\n            </Button>\n            <Button onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n```tsx\nfunction ManualClose() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create your account</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <Lorem count={2} />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3}>\n              Save\n            </Button>\n            <Button onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n### Make modal vertically centered\n\nBy default the modal has a vertical offset of `3.75rem` which you can change by\npassing `top` to the `ModalContent`. If you need to vertically center the modal,\npass the `isCentered` prop.\n\n> If the content within the modal overflows beyond the viewport, don't use this\n> prop. Try setting the [overflow behavior](#modal-overflow-behavior) instead.\n\n```jsx\nfunction VerticallyCenter() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Trigger modal</Button>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n```tsx\nfunction VerticallyCenter() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Trigger modal</Button>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n### Changing the transition\n\nThe `Modal` comes with a scale transition by default but you can change it by\npassing a `motionPreset` prop, and set its value to either `slideInBottom`,\n`slideInRight`, `scale` or `none`.\n\n```jsx\nfunction TransitionExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n      <Modal\n        isCentered\n        onClose={onClose}\n        isOpen={isOpen}\n        motionPreset=\"slideInBottom\"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n```tsx\nfunction TransitionExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n      <Modal\n        isCentered\n        onClose={onClose}\n        isOpen={isOpen}\n        motionPreset=\"slideInBottom\"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button colorScheme=\"brand\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button variant=\"ghost\">Secondary Action</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n### Modal overflow behavior\n\nIf the content within the modal overflows beyond the viewport, you can use the\n`scrollBehavior` to control how scrolling should happen.\n\n- If set to `inside`, scroll only occurs within the `ModalBody`.\n- If set to `outside`, the entire `ModalContent` will scroll within the\n  viewport.\n\n```jsx\nfunction ScrollingExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [scrollBehavior, setScrollBehavior] = React.useState(\"inside\")\n\n  const btnRef = React.useRef()\n  return (\n    <>\n      <RadioGroup value={scrollBehavior} onChange={setScrollBehavior}>\n        <Stack direction=\"row\">\n          <Radio value=\"inside\">inside</Radio>\n          <Radio value=\"outside\">outside</Radio>\n        </Stack>\n      </RadioGroup>\n\n      <Button mt={3} ref={btnRef} onClick={onOpen}>\n        Trigger modal\n      </Button>\n\n      <Modal\n        onClose={onClose}\n        finalFocusRef={btnRef}\n        isOpen={isOpen}\n        scrollBehavior={scrollBehavior}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={15} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n```tsx\nfunction ScrollingExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [scrollBehavior, setScrollBehavior] = React.useState(\"inside\")\n\n  const btnRef = React.useRef()\n  return (\n    <>\n      <RadioGroup value={scrollBehavior} onChange={setScrollBehavior}>\n        <Stack direction=\"row\">\n          <Radio value=\"inside\">inside</Radio>\n          <Radio value=\"outside\">outside</Radio>\n        </Stack>\n      </RadioGroup>\n\n      <Button mt={3} ref={btnRef} onClick={onOpen}>\n        Trigger modal\n      </Button>\n\n      <Modal\n        onClose={onClose}\n        finalFocusRef={btnRef}\n        isOpen={isOpen}\n        scrollBehavior={scrollBehavior}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={15} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n### Modal Sizes\n\nPass the `size` prop if you need to adjust the size of the modal. Values can be\n`xs`, `sm`, `md`, `lg`, `xl`, or `full`.\n\n```jsx\nfunction SizeExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [size, setSize] = React.useState(\"md\")\n\n  const handleSizeClick = (newSize) => {\n    setSize(newSize)\n    onOpen()\n  }\n\n  const sizes = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"full\"]\n\n  return (\n    <>\n      {sizes.map((size) => (\n        <Button\n          onClick={() => handleSizeClick(size)}\n          key={size}\n          m={4}\n        >{`Open ${size} Modal`}</Button>\n      ))}\n\n      <Modal onClose={onClose} size={size} isOpen={isOpen}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n```tsx\nfunction SizeExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [size, setSize] = React.useState(\"md\")\n\n  const handleSizeClick = (newSize) => {\n    setSize(newSize)\n    onOpen()\n  }\n\n  const sizes = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"full\"]\n\n  return (\n    <>\n      {sizes.map((size) => (\n        <Button\n          onClick={() => handleSizeClick(size)}\n          key={size}\n          m={4}\n        >{`Open ${size} Modal`}</Button>\n      ))}\n\n      <Modal onClose={onClose} size={size} isOpen={isOpen}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Modal Title</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n```\n\n### Making other elements Inert\n\nWhen the modal is open, it is rendered within a portal and all its siblings have\n`aria-hidden` set to `true` so the only thing screen readers see is the modal.\nTo disable this behavior, set `useInert` to `false`.\n\n### Prevent focus trapping\n\nBy default the modal, alert dialog and drawer locks the focus inside them.\nNormally this is what you want to maintain accessibility standards.\n\n**While strongly discourage this use case** due to the accessibility impacts,\nthere are certain situations where you might not want the modal to trap focus.\n\nTo prevent focus trapping, pass `trapFocus` and set its value to `false`.\n\n## Accessibility\n\n### Keyboard and Focus Management\n\n- When the modal opens, focus is trapped within it.\n- When the modal opens, focus is automatically set to the first enabled element,\n  or the element from `initialFocusRef`.\n- When the modal closes, focus returns to the element that was focused before\n  the modal activated, or the element from `finalFocusRef`.\n- Clicking on the overlay closes the Modal.\n- Pressing <kbd>Esc</kbd> closes the Modal.\n- Scrolling is blocked on the elements behind the modal.\n- The modal is rendered in a portal attached to the end of `document.body` to\n  break it out of the source order and make it easy to add `aria-hidden` to its\n  siblings.\n\n### ARIA\n\n- The `ModalContent` has `aria-modal` set to `true`.\n- The `ModalContent` has `aria-labelledby` set to the `id` of the `ModalHeader`.\n- The `ModalContent` has `aria-describedby` set to the `id` of the `ModalBody`.\n\n## Props\n\n### Modal Props\n\n<PropsTable of=\"Modal\" />\n\n### Other components\n\n- `ModalOverlay`, `ModalHeader`, `ModalFooter` and `ModalBody` composes `Box`\n  component.\n- `ModalCloseButton` composes `CloseButton`.\n","title":"Chakra UI Modal Dialog - Horizon UI","package":"@chakra-ui/modal","image":"components/modal.svg","description":"A dialog is a window overlaid on either the primary window or another dialog window","slug":"/docs/overlay/modal","lastEdited":{"date":"April 02, 2022","author":"Simmmple"},"headings":[{"text":"Import","id":"import","level":"h2"},{"text":"Usage","id":"usage","level":"h2"},{"text":"Control Focus when Modal closes","id":"control-focus-when-modal-closes","level":"h3"},{"text":"Block Scrolling when Modal opens","id":"block-scrolling-when-modal-opens","level":"h3"},{"text":"Focus on specific element","id":"focus-on-specific-element","level":"h3"},{"text":"Close Modal on Overlay Click","id":"close-modal-on-overlay-click","level":"h3"},{"text":"Make modal vertically centered","id":"make-modal-vertically-centered","level":"h3"},{"text":"Changing the transition","id":"changing-the-transition","level":"h3"},{"text":"Modal overflow behavior","id":"modal-overflow-behavior","level":"h3"},{"text":"Modal Sizes","id":"modal-sizes","level":"h3"},{"text":"Making other elements Inert","id":"making-other-elements-inert","level":"h3"},{"text":"Prevent focus trapping","id":"prevent-focus-trapping","level":"h3"},{"text":"Accessibility","id":"accessibility","level":"h2"},{"text":"Keyboard and Focus Management","id":"keyboard-and-focus-management","level":"h3"},{"text":"ARIA","id":"aria","level":"h3"},{"text":"Props","id":"props","level":"h2"},{"text":"Modal Props","id":"modal-props","level":"h3"},{"text":"Other components","id":"other-components","level":"h3"}],"editUrl":"https://github.com/simmmple-web/horizon-ui-dashboard/edit/main/website/pages/docs/overlay/modal.mdx","author":null,"tags":[]},"_superjson":{"values":{"frontMatter.author":["undefined"]}}},"__N_SSG":true}
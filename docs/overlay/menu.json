{"pageProps":{"mdxSource":{"compiledSource":"var d=Object.defineProperty,s=Object.defineProperties;var M=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var p=(n,t,o)=>t in n?d(n,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):n[t]=o,e=(n,t)=>{for(var o in t||(t={}))u.call(t,o)&&p(n,o,t[o]);if(a)for(var o of a(t))r.call(t,o)&&p(n,o,t[o]);return n},l=(n,t)=>s(n,M(t));var m=(n,t)=>{var o={};for(var i in n)u.call(n,i)&&t.indexOf(i)<0&&(o[i]=n[i]);if(n!=null&&a)for(var i of a(n))t.indexOf(i)<0&&r.call(n,i)&&(o[i]=n[i]);return o};const makeShortcode=n=>function(o){return console.warn(\"Component \"+n+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},o))},PropsTable=makeShortcode(\"PropsTable\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var i=o,{components:n}=i,t=m(i,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),t),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`An accessible dropdown menu for the common dropdown menu button design pattern.\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"Menu\"),\" uses roving \",mdx(\"inlineCode\",{parentName:\"p\"},\"tabIndex\"),\" for focus management.\"),mdx(\"h2\",e({},{id:\"import\"}),\"Import\"),mdx(\"p\",null,\"Chakra UI exports 8 components for rendering menus:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"Menu\"),\": The wrapper component provides context, state, and focus management.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"MenuList\"),\": The wrapper for the menu items. Must be a direct child of \",mdx(\"inlineCode\",{parentName:\"li\"},\"Menu\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"MenuButton\"),\": The trigger for the menu list. Must be a direct child of \",mdx(\"inlineCode\",{parentName:\"li\"},\"Menu\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"MenuItem\"),`: The trigger that handles menu selection. Must be a direct child of\na `,mdx(\"inlineCode\",{parentName:\"li\"},\"MenuList\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"MenuGroup\"),\": A wrapper to group related menu items.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"MenuDivider\"),\": A visual separator for menu items and groups.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"MenuOptionGroup\"),\": A wrapper for checkable menu items (radio and checkbox).\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"MenuItemOption\"),\": The checkable menu item, to be used with \",mdx(\"inlineCode\",{parentName:\"li\"},\"MenuOptionGroup\"),\".\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`import {\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  MenuItemOption,\n  MenuGroup,\n  MenuOptionGroup,\n  MenuIcon,\n  MenuCommand,\n  MenuDivider,\n} from \"@chakra-ui/react\"\n`)),mdx(\"h2\",e({},{id:\"usage\"}),\"Usage\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Menu>\n  <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n    Actions\n  </MenuButton>\n  <MenuList>\n    <MenuItem>Download</MenuItem>\n    <MenuItem>Create a Copy</MenuItem>\n    <MenuItem>Mark as Draft</MenuItem>\n    <MenuItem>Delete</MenuItem>\n    <MenuItem>Attend a Workshop</MenuItem>\n  </MenuList>\n</Menu>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Menu>\n  <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n    Actions\n  </MenuButton>\n  <MenuList>\n    <MenuItem>Download</MenuItem>\n    <MenuItem>Create a Copy</MenuItem>\n    <MenuItem>Mark as Draft</MenuItem>\n    <MenuItem>Delete</MenuItem>\n    <MenuItem>Attend a Workshop</MenuItem>\n  </MenuList>\n</Menu>\n`)),mdx(\"h3\",e({},{id:\"accessing-the-internal-state\"}),\"Accessing the internal state\"),mdx(\"p\",null,\"To access the internal state of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Menu\"),\", use a function as \",mdx(\"inlineCode\",{parentName:\"p\"},\"children\"),`\n(commonly known as a render prop). You'll get access to the internal state\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"isOpen\"),\" and method \",mdx(\"inlineCode\",{parentName:\"p\"},\"onClose\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Menu>\n  {({ isOpen }) => (\n    <>\n      <MenuButton isActive={isOpen} as={Button} rightIcon={<ChevronDownIcon />}>\n        {isOpen ? \"Close\" : \"Open\"}\n      </MenuButton>\n      <MenuList>\n        <MenuItem>Download</MenuItem>\n        <MenuItem onClick={() => alert(\"Kagebunshin\")}>Create a Copy</MenuItem>\n      </MenuList>\n    </>\n  )}\n</Menu>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Menu>\n  {({ isOpen }) => (\n    <>\n      <MenuButton isActive={isOpen} as={Button} rightIcon={<ChevronDownIcon />}>\n        {isOpen ? \"Close\" : \"Open\"}\n      </MenuButton>\n      <MenuList>\n        <MenuItem>Download</MenuItem>\n        <MenuItem onClick={() => alert(\"Kagebunshin\")}>Create a Copy</MenuItem>\n      </MenuList>\n    </>\n  )}\n</Menu>\n`)),mdx(\"h3\",e({},{id:\"customizing-the-button\"}),\"Customizing the button\"),mdx(\"p\",null,\"The default \",mdx(\"inlineCode\",{parentName:\"p\"},\"MenuButton\"),` can be styled using the usual styled-system props, but\nit starts off plainly styled.`),mdx(\"p\",null,\"Using the \",mdx(\"inlineCode\",{parentName:\"p\"},\"as\"),\" prop of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"MenuButton\"),`, you can render a custom component\ninstead of the default `,mdx(\"inlineCode\",{parentName:\"p\"},\"MenuButton\"),\". For instance, you can use Chakra's \",mdx(\"inlineCode\",{parentName:\"p\"},\"Button\"),`\ncomponent, or your own custom component.`),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"Custom components must take a \",mdx(\"inlineCode\",{parentName:\"p\"},\"ref\"),` prop which is assigned to the React\ncomponent that triggers the menu opening. This is so that the `,mdx(\"inlineCode\",{parentName:\"p\"},\"MenuList\"),`\npopover can be positioned correctly. Without this, the `,mdx(\"inlineCode\",{parentName:\"p\"},\"MenuList\"),` will render\nin an undefined position.`)),mdx(\"h3\",e({},{id:\"letter-navigation\"}),\"Letter Navigation\"),mdx(\"p\",null,\"When focus is on the \",mdx(\"inlineCode\",{parentName:\"p\"},\"MenuButton\"),\" or within the \",mdx(\"inlineCode\",{parentName:\"p\"},\"MenuList\"),` and you type a letter\nkey, a search begins. Focus will move to the first `,mdx(\"inlineCode\",{parentName:\"p\"},\"MenuItem\"),` that starts with\nthe letter you typed.`),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},'Open the menu, try and type any letter, (say \"S\") to see the focus movement.')),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Menu>\n  <MenuButton\n    px={4}\n    py={2}\n    transition=\"all 0.2s\"\n    borderRadius=\"md\"\n    borderWidth=\"1px\"\n    _hover={{ bg: \"gray.400\" }}\n    _expanded={{ bg: \"blue.400\" }}\n    _focus={{ boxShadow: \"outline\" }}\n  >\n    File <ChevronDownIcon />\n  </MenuButton>\n  <MenuList>\n    <MenuItem>New File</MenuItem>\n    <MenuItem>New Window</MenuItem>\n    <MenuDivider />\n    <MenuItem>Open...</MenuItem>\n    <MenuItem>Save File</MenuItem>\n  </MenuList>\n</Menu>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Menu>\n  <MenuButton\n    px={4}\n    py={2}\n    transition=\"all 0.2s\"\n    borderRadius=\"md\"\n    borderWidth=\"1px\"\n    _hover={{ bg: \"gray.400\" }}\n    _expanded={{ bg: \"blue.400\" }}\n    _focus={{ boxShadow: \"outline\" }}\n  >\n    File <ChevronDownIcon />\n  </MenuButton>\n  <MenuList>\n    <MenuItem>New File</MenuItem>\n    <MenuItem>New Window</MenuItem>\n    <MenuDivider />\n    <MenuItem>Open...</MenuItem>\n    <MenuItem>Save File</MenuItem>\n  </MenuList>\n</Menu>\n`)),mdx(\"h3\",e({},{id:\"just-another-example\"}),\"Just another example\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Menu>\n  <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n    Your Cats\n  </MenuButton>\n  <MenuList>\n    <MenuItem minH=\"48px\">\n      <Image\n        boxSize=\"2rem\"\n        borderRadius=\"full\"\n        src=\"https://placekitten.com/100/100\"\n        alt=\"Fluffybuns the destroyer\"\n        mr=\"12px\"\n      />\n      <span>Fluffybuns the Destroyer</span>\n    </MenuItem>\n    <MenuItem minH=\"40px\">\n      <Image\n        boxSize=\"2rem\"\n        borderRadius=\"full\"\n        src=\"https://placekitten.com/120/120\"\n        alt=\"Simon the pensive\"\n        mr=\"12px\"\n      />\n      <span>Simon the pensive</span>\n    </MenuItem>\n  </MenuList>\n</Menu>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Menu>\n  <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n    Your Cats\n  </MenuButton>\n  <MenuList>\n    <MenuItem minH=\"48px\">\n      <Image\n        boxSize=\"2rem\"\n        borderRadius=\"full\"\n        src=\"https://placekitten.com/100/100\"\n        alt=\"Fluffybuns the destroyer\"\n        mr=\"12px\"\n      />\n      <span>Fluffybuns the Destroyer</span>\n    </MenuItem>\n    <MenuItem minH=\"40px\">\n      <Image\n        boxSize=\"2rem\"\n        borderRadius=\"full\"\n        src=\"https://placekitten.com/120/120\"\n        alt=\"Simon the pensive\"\n        mr=\"12px\"\n      />\n      <span>Simon the pensive</span>\n    </MenuItem>\n  </MenuList>\n</Menu>\n`)),mdx(\"h3\",e({},{id:\"adding-icons-and-commands\"}),\"Adding icons and commands\"),mdx(\"p\",null,\"You can add icon to each \",mdx(\"inlineCode\",{parentName:\"p\"},\"MenuItem\"),\" by passing the \",mdx(\"inlineCode\",{parentName:\"p\"},\"icon\"),` prop. To add a\ncommands (or hotkeys) to menu items, you can use the `,mdx(\"inlineCode\",{parentName:\"p\"},\"command\"),\" prop.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Menu>\n  <MenuButton\n    as={IconButton}\n    aria-label=\"Options\"\n    icon={<HamburgerIcon />}\n    variant=\"outline\"\n  />\n  <MenuList>\n    <MenuItem icon={<AddIcon />} command=\"\\u2318T\">\n      New Tab\n    </MenuItem>\n    <MenuItem icon={<ExternalLinkIcon />} command=\"\\u2318N\">\n      New Window\n    </MenuItem>\n    <MenuItem icon={<RepeatIcon />} command=\"\\u2318\\u21E7N\">\n      Open Closed Tab\n    </MenuItem>\n    <MenuItem icon={<EditIcon />} command=\"\\u2318O\">\n      Open File...\n    </MenuItem>\n  </MenuList>\n</Menu>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Menu>\n  <MenuButton\n    as={IconButton}\n    aria-label=\"Options\"\n    icon={<HamburgerIcon />}\n    variant=\"outline\"\n  />\n  <MenuList>\n    <MenuItem icon={<AddIcon />} command=\"\\u2318T\">\n      New Tab\n    </MenuItem>\n    <MenuItem icon={<ExternalLinkIcon />} command=\"\\u2318N\">\n      New Window\n    </MenuItem>\n    <MenuItem icon={<RepeatIcon />} command=\"\\u2318\\u21E7N\">\n      Open Closed Tab\n    </MenuItem>\n    <MenuItem icon={<EditIcon />} command=\"\\u2318O\">\n      Open File...\n    </MenuItem>\n  </MenuList>\n</Menu>\n`)),mdx(\"h3\",e({},{id:\"lazily-mounting-menuitem\"}),\"Lazily mounting MenuItem\"),mdx(\"p\",null,\"By default, the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Menu\"),\" component renders all children of \",mdx(\"inlineCode\",{parentName:\"p\"},\"MenuList\"),` to the DOM,\nmeaning that invisible menu items are still rendered but are hidden by styles.`),mdx(\"p\",null,\"If you want to defer rendering of each children of \",mdx(\"inlineCode\",{parentName:\"p\"},\"MenuList\"),` until that menu is\nopen, you can use the `,mdx(\"inlineCode\",{parentName:\"p\"},\"isLazy\"),\" prop. This is useful if your \",mdx(\"inlineCode\",{parentName:\"p\"},\"Menu\"),` needs to be\nextra performant, or make network calls on mount that should only happen when\nthe component is displayed.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Menu isLazy>\n  <MenuButton>Open menu</MenuButton>\n  <MenuList>\n    {/* MenuItems are not rendered unless Menu is open */}\n    <MenuItem>New Window</MenuItem>\n    <MenuItem>Open Closed Tab</MenuItem>\n    <MenuItem>Open File</MenuItem>\n  </MenuList>\n</Menu>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Menu isLazy>\n  <MenuButton>Open menu</MenuButton>\n  <MenuList>\n    {/* MenuItems are not rendered unless Menu is open */}\n    <MenuItem>New Window</MenuItem>\n    <MenuItem>Open Closed Tab</MenuItem>\n    <MenuItem>Open File</MenuItem>\n  </MenuList>\n</Menu>\n`)),mdx(\"h3\",e({},{id:\"rendering-menu-in-a-portal\"}),\"Rendering menu in a portal\"),mdx(\"p\",null,\"To render menus in a portal, import the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Portal\"),` component and wrap the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"MenuList\"),\" within the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Portal\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Menu>\n  <MenuButton>Open menu</MenuButton>\n  <Portal>\n    <MenuList>\n      <MenuItem>Menu 1</MenuItem>\n      <MenuItem>New Window</MenuItem>\n      <MenuItem>Open Closed Tab</MenuItem>\n      <MenuItem>Open File</MenuItem>\n    </MenuList>\n  </Portal>\n</Menu>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Menu>\n  <MenuButton>Open menu</MenuButton>\n  <Portal>\n    <MenuList>\n      <MenuItem>Menu 1</MenuItem>\n      <MenuItem>New Window</MenuItem>\n      <MenuItem>Open Closed Tab</MenuItem>\n      <MenuItem>Open File</MenuItem>\n    </MenuList>\n  </Portal>\n</Menu>\n`)),mdx(\"h3\",e({},{id:\"menugroup\"}),\"MenuGroup\"),mdx(\"p\",null,\"To group related \",mdx(\"inlineCode\",{parentName:\"p\"},\"MenuItem\"),\"s, use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"MenuGroup\"),` component and pass it a\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"title\"),\" for the group name.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Menu>\n  <MenuButton as={Button} colorScheme=\"pink\">\n    Profile\n  </MenuButton>\n  <MenuList>\n    <MenuGroup title=\"Profile\">\n      <MenuItem>My Account</MenuItem>\n      <MenuItem>Payments </MenuItem>\n    </MenuGroup>\n    <MenuDivider />\n    <MenuGroup title=\"Help\">\n      <MenuItem>Docs</MenuItem>\n      <MenuItem>FAQ</MenuItem>\n    </MenuGroup>\n  </MenuList>\n</Menu>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Menu>\n  <MenuButton as={Button} colorScheme=\"pink\">\n    Profile\n  </MenuButton>\n  <MenuList>\n    <MenuGroup title=\"Profile\">\n      <MenuItem>My Account</MenuItem>\n      <MenuItem>Payments </MenuItem>\n    </MenuGroup>\n    <MenuDivider />\n    <MenuGroup title=\"Help\">\n      <MenuItem>Docs</MenuItem>\n      <MenuItem>FAQ</MenuItem>\n    </MenuGroup>\n  </MenuList>\n</Menu>\n`)),mdx(\"h2\",e({},{id:\"menu-option-groups\"}),\"Menu option groups\"),mdx(\"p\",null,`You can compose a menu for table headers to help with sorting and filtering\noptions. Use the `,mdx(\"inlineCode\",{parentName:\"p\"},\"MenuOptionGroup\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"MenuItemOption\"),\" components.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Menu closeOnSelect={false}>\n  <MenuButton as={Button} colorScheme=\"brand\">\n    MenuItem\n  </MenuButton>\n  <MenuList minWidth=\"240px\">\n    <MenuOptionGroup defaultValue=\"asc\" title=\"Order\" type=\"radio\">\n      <MenuItemOption value=\"asc\">Ascending</MenuItemOption>\n      <MenuItemOption value=\"desc\">Descending</MenuItemOption>\n    </MenuOptionGroup>\n    <MenuDivider />\n    <MenuOptionGroup title=\"Country\" type=\"checkbox\">\n      <MenuItemOption value=\"email\">Email</MenuItemOption>\n      <MenuItemOption value=\"phone\">Phone</MenuItemOption>\n      <MenuItemOption value=\"country\">Country</MenuItemOption>\n    </MenuOptionGroup>\n  </MenuList>\n</Menu>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Menu closeOnSelect={false}>\n  <MenuButton as={Button} colorScheme=\"brand\">\n    MenuItem\n  </MenuButton>\n  <MenuList minWidth=\"240px\">\n    <MenuOptionGroup defaultValue=\"asc\" title=\"Order\" type=\"radio\">\n      <MenuItemOption value=\"asc\">Ascending</MenuItemOption>\n      <MenuItemOption value=\"desc\">Descending</MenuItemOption>\n    </MenuOptionGroup>\n    <MenuDivider />\n    <MenuOptionGroup title=\"Country\" type=\"checkbox\">\n      <MenuItemOption value=\"email\">Email</MenuItemOption>\n      <MenuItemOption value=\"phone\">Phone</MenuItemOption>\n      <MenuItemOption value=\"country\">Country</MenuItemOption>\n    </MenuOptionGroup>\n  </MenuList>\n</Menu>\n`)),mdx(\"h2\",e({},{id:\"accessibility\"}),\"Accessibility\"),mdx(\"h3\",e({},{id:\"keyboard-interaction\"}),\"Keyboard Interaction\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Key\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Action\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"Enter\"),\" or \",mdx(\"inlineCode\",{parentName:\"td\"},\"Space\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"When \",mdx(\"inlineCode\",{parentName:\"td\"},\"MenuButton\"),\" receives focus, opens the menu and places focus on the first menu item.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"ArrowDown\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"When \",mdx(\"inlineCode\",{parentName:\"td\"},\"MenuButton\"),\" receives focus, opens the menu and moves focus to the first menu item.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"ArrowUp\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"When \",mdx(\"inlineCode\",{parentName:\"td\"},\"MenuButton\"),\" receives focus, opens the menu and moves focus to the last menu item.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"Escape\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"When the menu is open, closes the menu and sets focus to the \",mdx(\"inlineCode\",{parentName:\"td\"},\"MenuButton\"),\".\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"Tab\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"no effect\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"Home\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"When the menu is open, moves focus to the first item.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"End\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"When the menu is open, moves focus to the last item.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),mdx(\"inlineCode\",{parentName:\"td\"},\"A-Z\"),\" or \",mdx(\"inlineCode\",{parentName:\"td\"},\"a-z\")),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"When the menu is open, moves focus to the next menu item with a label that starts with the typed character if such an menu item exists.\")))),mdx(\"h3\",e({},{id:\"aria-roles\"}),\"ARIA roles\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"For \",mdx(\"inlineCode\",{parentName:\"strong\"},\"MenuButton\"),\":\")),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"role\"),\" is set to \",mdx(\"inlineCode\",{parentName:\"li\"},\"button\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"aria-haspopup\"),\" is set to \",mdx(\"inlineCode\",{parentName:\"li\"},\"menu\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"When the menu is displayed, \",mdx(\"inlineCode\",{parentName:\"li\"},\"aria-expanded\"),\" is set to \",mdx(\"inlineCode\",{parentName:\"li\"},\"true\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"aria-controls\"),\" is set to the \",mdx(\"inlineCode\",{parentName:\"li\"},\"id\"),\" of the \",mdx(\"inlineCode\",{parentName:\"li\"},\"MenuList\"),\".\")),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"For \",mdx(\"inlineCode\",{parentName:\"strong\"},\"MenuList\"),\":\")),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"role\"),\" is set to \",mdx(\"inlineCode\",{parentName:\"li\"},\"menu\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"aria-orientation\"),\" is set to \",mdx(\"inlineCode\",{parentName:\"li\"},\"vertical\"),\".\")),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"For \",mdx(\"inlineCode\",{parentName:\"strong\"},\"MenuItem\"),\":\")),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"role\"),\" is set to \",mdx(\"inlineCode\",{parentName:\"li\"},\"menuitem\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"Gets one of these roles \",mdx(\"inlineCode\",{parentName:\"li\"},\"menuitem\"),\"/\",mdx(\"inlineCode\",{parentName:\"li\"},\"menuitemradio\"),\"/ \",mdx(\"inlineCode\",{parentName:\"li\"},\"menuitemcheckbox\"),\".\")),mdx(\"h2\",e({},{id:\"props\"}),\"Props\"),mdx(\"h3\",e({},{id:\"menu-props\"}),\"Menu Props\"),mdx(PropsTable,{of:\"Menu\",mdxType:\"PropsTable\"}),mdx(\"h3\",e({},{id:\"menubutton-props\"}),\"MenuButton Props\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"MenuButton\"),\" composes \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs-horizon-ui-dashboard/docs/layout/box\"}),\"Box\"),` so you\ncan pass all `,mdx(\"inlineCode\",{parentName:\"p\"},\"Box\"),\" props to change its style.\"),mdx(\"h3\",e({},{id:\"menulist-props\"}),\"MenuList Props\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"MenuList\"),\" composes \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs-horizon-ui-dashboard/docs/layout/box\"}),\"Box\"),` so you can\npass all `,mdx(\"inlineCode\",{parentName:\"p\"},\"Box\"),\" props to change its style.\"),mdx(\"h3\",e({},{id:\"menuitem-props\"}),\"MenuItem Props\"),mdx(PropsTable,{of:\"MenuItem\",mdxType:\"PropsTable\"}),mdx(\"h3\",e({},{id:\"menugroup-props\"}),\"MenuGroup Props\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"MenuGroup\"),\" composes \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs-horizon-ui-dashboard/docs/layout/box\"}),\"Box\"),` so you\ncan pass all `,mdx(\"inlineCode\",{parentName:\"p\"},\"Box\"),\" props to change its style.\"),mdx(\"h3\",e({},{id:\"menuoptiongroup-props\"}),\"MenuOptionGroup Props\"),mdx(PropsTable,{of:\"MenuOptionGroup\",mdxType:\"PropsTable\"}),mdx(\"h3\",e({},{id:\"menuitemoption-props\"}),\"MenuItemOption Props\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"MenuItemOption\"),\" composes \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs-horizon-ui-dashboard/docs/layout/box\"}),\"Box\"),` so\nyou can pass all box props in addition to these:`),mdx(PropsTable,{of:\"MenuItemOption\",mdxType:\"PropsTable\"}))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Chakra UI Menu - Horizon UI","package":"@chakra-ui/menu","image":"components/menu.svg","description":"An accessible dropdown menu for the common dropdown menu button design pattern. Menu uses roving tabIndex for focus management."}},"frontMatter":{"excerpt":"An accessible dropdown menu for the common dropdown menu button design pattern.","readTimeMinutes":11,"mdxContent":"---\ntitle: Chakra UI Menu - Horizon UI\npackage: \"@chakra-ui/menu\"\nimage: \"components/menu.svg\"\ndescription:\n  An accessible dropdown menu for the common dropdown menu button design\n  pattern. Menu uses roving tabIndex for focus management.\n---\n\nAn accessible dropdown menu for the common dropdown menu button design pattern.\n`Menu` uses roving `tabIndex` for focus management.\n\n## Import\n\nChakra UI exports 8 components for rendering menus:\n\n- `Menu`: The wrapper component provides context, state, and focus management.\n- `MenuList`: The wrapper for the menu items. Must be a direct child of `Menu`.\n- `MenuButton`: The trigger for the menu list. Must be a direct child of `Menu`.\n- `MenuItem`: The trigger that handles menu selection. Must be a direct child of\n  a `MenuList`.\n- `MenuGroup`: A wrapper to group related menu items.\n- `MenuDivider`: A visual separator for menu items and groups.\n- `MenuOptionGroup`: A wrapper for checkable menu items (radio and checkbox).\n- `MenuItemOption`: The checkable menu item, to be used with `MenuOptionGroup`.\n\n```tsx\nimport {\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  MenuItemOption,\n  MenuGroup,\n  MenuOptionGroup,\n  MenuIcon,\n  MenuCommand,\n  MenuDivider,\n} from \"@chakra-ui/react\"\n```\n\n## Usage\n\n```jsx\n<Menu>\n  <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n    Actions\n  </MenuButton>\n  <MenuList>\n    <MenuItem>Download</MenuItem>\n    <MenuItem>Create a Copy</MenuItem>\n    <MenuItem>Mark as Draft</MenuItem>\n    <MenuItem>Delete</MenuItem>\n    <MenuItem>Attend a Workshop</MenuItem>\n  </MenuList>\n</Menu>\n```\n\n```tsx\n<Menu>\n  <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n    Actions\n  </MenuButton>\n  <MenuList>\n    <MenuItem>Download</MenuItem>\n    <MenuItem>Create a Copy</MenuItem>\n    <MenuItem>Mark as Draft</MenuItem>\n    <MenuItem>Delete</MenuItem>\n    <MenuItem>Attend a Workshop</MenuItem>\n  </MenuList>\n</Menu>\n```\n\n### Accessing the internal state\n\nTo access the internal state of the `Menu`, use a function as `children`\n(commonly known as a render prop). You'll get access to the internal state\n`isOpen` and method `onClose`.\n\n```jsx\n<Menu>\n  {({ isOpen }) => (\n    <>\n      <MenuButton isActive={isOpen} as={Button} rightIcon={<ChevronDownIcon />}>\n        {isOpen ? \"Close\" : \"Open\"}\n      </MenuButton>\n      <MenuList>\n        <MenuItem>Download</MenuItem>\n        <MenuItem onClick={() => alert(\"Kagebunshin\")}>Create a Copy</MenuItem>\n      </MenuList>\n    </>\n  )}\n</Menu>\n```\n\n```tsx\n<Menu>\n  {({ isOpen }) => (\n    <>\n      <MenuButton isActive={isOpen} as={Button} rightIcon={<ChevronDownIcon />}>\n        {isOpen ? \"Close\" : \"Open\"}\n      </MenuButton>\n      <MenuList>\n        <MenuItem>Download</MenuItem>\n        <MenuItem onClick={() => alert(\"Kagebunshin\")}>Create a Copy</MenuItem>\n      </MenuList>\n    </>\n  )}\n</Menu>\n```\n\n### Customizing the button\n\nThe default `MenuButton` can be styled using the usual styled-system props, but\nit starts off plainly styled.\n\nUsing the `as` prop of the `MenuButton`, you can render a custom component\ninstead of the default `MenuButton`. For instance, you can use Chakra's `Button`\ncomponent, or your own custom component.\n\n> Custom components must take a `ref` prop which is assigned to the React\n> component that triggers the menu opening. This is so that the `MenuList`\n> popover can be positioned correctly. Without this, the `MenuList` will render\n> in an undefined position.\n\n### Letter Navigation\n\nWhen focus is on the `MenuButton` or within the `MenuList` and you type a letter\nkey, a search begins. Focus will move to the first `MenuItem` that starts with\nthe letter you typed.\n\n> Open the menu, try and type any letter, (say \"S\") to see the focus movement.\n\n```jsx\n<Menu>\n  <MenuButton\n    px={4}\n    py={2}\n    transition=\"all 0.2s\"\n    borderRadius=\"md\"\n    borderWidth=\"1px\"\n    _hover={{ bg: \"gray.400\" }}\n    _expanded={{ bg: \"blue.400\" }}\n    _focus={{ boxShadow: \"outline\" }}\n  >\n    File <ChevronDownIcon />\n  </MenuButton>\n  <MenuList>\n    <MenuItem>New File</MenuItem>\n    <MenuItem>New Window</MenuItem>\n    <MenuDivider />\n    <MenuItem>Open...</MenuItem>\n    <MenuItem>Save File</MenuItem>\n  </MenuList>\n</Menu>\n```\n\n```tsx\n<Menu>\n  <MenuButton\n    px={4}\n    py={2}\n    transition=\"all 0.2s\"\n    borderRadius=\"md\"\n    borderWidth=\"1px\"\n    _hover={{ bg: \"gray.400\" }}\n    _expanded={{ bg: \"blue.400\" }}\n    _focus={{ boxShadow: \"outline\" }}\n  >\n    File <ChevronDownIcon />\n  </MenuButton>\n  <MenuList>\n    <MenuItem>New File</MenuItem>\n    <MenuItem>New Window</MenuItem>\n    <MenuDivider />\n    <MenuItem>Open...</MenuItem>\n    <MenuItem>Save File</MenuItem>\n  </MenuList>\n</Menu>\n```\n\n### Just another example\n\n```jsx\n<Menu>\n  <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n    Your Cats\n  </MenuButton>\n  <MenuList>\n    <MenuItem minH=\"48px\">\n      <Image\n        boxSize=\"2rem\"\n        borderRadius=\"full\"\n        src=\"https://placekitten.com/100/100\"\n        alt=\"Fluffybuns the destroyer\"\n        mr=\"12px\"\n      />\n      <span>Fluffybuns the Destroyer</span>\n    </MenuItem>\n    <MenuItem minH=\"40px\">\n      <Image\n        boxSize=\"2rem\"\n        borderRadius=\"full\"\n        src=\"https://placekitten.com/120/120\"\n        alt=\"Simon the pensive\"\n        mr=\"12px\"\n      />\n      <span>Simon the pensive</span>\n    </MenuItem>\n  </MenuList>\n</Menu>\n```\n\n```tsx\n<Menu>\n  <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n    Your Cats\n  </MenuButton>\n  <MenuList>\n    <MenuItem minH=\"48px\">\n      <Image\n        boxSize=\"2rem\"\n        borderRadius=\"full\"\n        src=\"https://placekitten.com/100/100\"\n        alt=\"Fluffybuns the destroyer\"\n        mr=\"12px\"\n      />\n      <span>Fluffybuns the Destroyer</span>\n    </MenuItem>\n    <MenuItem minH=\"40px\">\n      <Image\n        boxSize=\"2rem\"\n        borderRadius=\"full\"\n        src=\"https://placekitten.com/120/120\"\n        alt=\"Simon the pensive\"\n        mr=\"12px\"\n      />\n      <span>Simon the pensive</span>\n    </MenuItem>\n  </MenuList>\n</Menu>\n```\n\n### Adding icons and commands\n\nYou can add icon to each `MenuItem` by passing the `icon` prop. To add a\ncommands (or hotkeys) to menu items, you can use the `command` prop.\n\n```jsx\n<Menu>\n  <MenuButton\n    as={IconButton}\n    aria-label=\"Options\"\n    icon={<HamburgerIcon />}\n    variant=\"outline\"\n  />\n  <MenuList>\n    <MenuItem icon={<AddIcon />} command=\"⌘T\">\n      New Tab\n    </MenuItem>\n    <MenuItem icon={<ExternalLinkIcon />} command=\"⌘N\">\n      New Window\n    </MenuItem>\n    <MenuItem icon={<RepeatIcon />} command=\"⌘⇧N\">\n      Open Closed Tab\n    </MenuItem>\n    <MenuItem icon={<EditIcon />} command=\"⌘O\">\n      Open File...\n    </MenuItem>\n  </MenuList>\n</Menu>\n```\n\n```tsx\n<Menu>\n  <MenuButton\n    as={IconButton}\n    aria-label=\"Options\"\n    icon={<HamburgerIcon />}\n    variant=\"outline\"\n  />\n  <MenuList>\n    <MenuItem icon={<AddIcon />} command=\"⌘T\">\n      New Tab\n    </MenuItem>\n    <MenuItem icon={<ExternalLinkIcon />} command=\"⌘N\">\n      New Window\n    </MenuItem>\n    <MenuItem icon={<RepeatIcon />} command=\"⌘⇧N\">\n      Open Closed Tab\n    </MenuItem>\n    <MenuItem icon={<EditIcon />} command=\"⌘O\">\n      Open File...\n    </MenuItem>\n  </MenuList>\n</Menu>\n```\n\n### Lazily mounting MenuItem\n\nBy default, the `Menu` component renders all children of `MenuList` to the DOM,\nmeaning that invisible menu items are still rendered but are hidden by styles.\n\nIf you want to defer rendering of each children of `MenuList` until that menu is\nopen, you can use the `isLazy` prop. This is useful if your `Menu` needs to be\nextra performant, or make network calls on mount that should only happen when\nthe component is displayed.\n\n```jsx\n<Menu isLazy>\n  <MenuButton>Open menu</MenuButton>\n  <MenuList>\n    {/* MenuItems are not rendered unless Menu is open */}\n    <MenuItem>New Window</MenuItem>\n    <MenuItem>Open Closed Tab</MenuItem>\n    <MenuItem>Open File</MenuItem>\n  </MenuList>\n</Menu>\n```\n\n```tsx\n<Menu isLazy>\n  <MenuButton>Open menu</MenuButton>\n  <MenuList>\n    {/* MenuItems are not rendered unless Menu is open */}\n    <MenuItem>New Window</MenuItem>\n    <MenuItem>Open Closed Tab</MenuItem>\n    <MenuItem>Open File</MenuItem>\n  </MenuList>\n</Menu>\n```\n\n### Rendering menu in a portal\n\nTo render menus in a portal, import the `Portal` component and wrap the\n`MenuList` within the `Portal`.\n\n```jsx\n<Menu>\n  <MenuButton>Open menu</MenuButton>\n  <Portal>\n    <MenuList>\n      <MenuItem>Menu 1</MenuItem>\n      <MenuItem>New Window</MenuItem>\n      <MenuItem>Open Closed Tab</MenuItem>\n      <MenuItem>Open File</MenuItem>\n    </MenuList>\n  </Portal>\n</Menu>\n```\n\n```tsx\n<Menu>\n  <MenuButton>Open menu</MenuButton>\n  <Portal>\n    <MenuList>\n      <MenuItem>Menu 1</MenuItem>\n      <MenuItem>New Window</MenuItem>\n      <MenuItem>Open Closed Tab</MenuItem>\n      <MenuItem>Open File</MenuItem>\n    </MenuList>\n  </Portal>\n</Menu>\n```\n\n### MenuGroup\n\nTo group related `MenuItem`s, use the `MenuGroup` component and pass it a\n`title` for the group name.\n\n```jsx\n<Menu>\n  <MenuButton as={Button} colorScheme=\"pink\">\n    Profile\n  </MenuButton>\n  <MenuList>\n    <MenuGroup title=\"Profile\">\n      <MenuItem>My Account</MenuItem>\n      <MenuItem>Payments </MenuItem>\n    </MenuGroup>\n    <MenuDivider />\n    <MenuGroup title=\"Help\">\n      <MenuItem>Docs</MenuItem>\n      <MenuItem>FAQ</MenuItem>\n    </MenuGroup>\n  </MenuList>\n</Menu>\n```\n\n```tsx\n<Menu>\n  <MenuButton as={Button} colorScheme=\"pink\">\n    Profile\n  </MenuButton>\n  <MenuList>\n    <MenuGroup title=\"Profile\">\n      <MenuItem>My Account</MenuItem>\n      <MenuItem>Payments </MenuItem>\n    </MenuGroup>\n    <MenuDivider />\n    <MenuGroup title=\"Help\">\n      <MenuItem>Docs</MenuItem>\n      <MenuItem>FAQ</MenuItem>\n    </MenuGroup>\n  </MenuList>\n</Menu>\n```\n\n## Menu option groups\n\nYou can compose a menu for table headers to help with sorting and filtering\noptions. Use the `MenuOptionGroup` and `MenuItemOption` components.\n\n```jsx\n<Menu closeOnSelect={false}>\n  <MenuButton as={Button} colorScheme=\"brand\">\n    MenuItem\n  </MenuButton>\n  <MenuList minWidth=\"240px\">\n    <MenuOptionGroup defaultValue=\"asc\" title=\"Order\" type=\"radio\">\n      <MenuItemOption value=\"asc\">Ascending</MenuItemOption>\n      <MenuItemOption value=\"desc\">Descending</MenuItemOption>\n    </MenuOptionGroup>\n    <MenuDivider />\n    <MenuOptionGroup title=\"Country\" type=\"checkbox\">\n      <MenuItemOption value=\"email\">Email</MenuItemOption>\n      <MenuItemOption value=\"phone\">Phone</MenuItemOption>\n      <MenuItemOption value=\"country\">Country</MenuItemOption>\n    </MenuOptionGroup>\n  </MenuList>\n</Menu>\n```\n\n```tsx\n<Menu closeOnSelect={false}>\n  <MenuButton as={Button} colorScheme=\"brand\">\n    MenuItem\n  </MenuButton>\n  <MenuList minWidth=\"240px\">\n    <MenuOptionGroup defaultValue=\"asc\" title=\"Order\" type=\"radio\">\n      <MenuItemOption value=\"asc\">Ascending</MenuItemOption>\n      <MenuItemOption value=\"desc\">Descending</MenuItemOption>\n    </MenuOptionGroup>\n    <MenuDivider />\n    <MenuOptionGroup title=\"Country\" type=\"checkbox\">\n      <MenuItemOption value=\"email\">Email</MenuItemOption>\n      <MenuItemOption value=\"phone\">Phone</MenuItemOption>\n      <MenuItemOption value=\"country\">Country</MenuItemOption>\n    </MenuOptionGroup>\n  </MenuList>\n</Menu>\n```\n\n## Accessibility\n\n### Keyboard Interaction\n\n| Key                | Action                                                                                                                                  |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------- |\n| `Enter` or `Space` | When `MenuButton` receives focus, opens the menu and places focus on the first menu item.                                               |\n| `ArrowDown`        | When `MenuButton` receives focus, opens the menu and moves focus to the first menu item.                                                |\n| `ArrowUp`          | When `MenuButton` receives focus, opens the menu and moves focus to the last menu item.                                                 |\n| `Escape`           | When the menu is open, closes the menu and sets focus to the `MenuButton`.                                                              |\n| `Tab`              | no effect                                                                                                                               |\n| `Home`             | When the menu is open, moves focus to the first item.                                                                                   |\n| `End`              | When the menu is open, moves focus to the last item.                                                                                    |\n| `A-Z` or `a-z`     | When the menu is open, moves focus to the next menu item with a label that starts with the typed character if such an menu item exists. |\n\n### ARIA roles\n\n**For `MenuButton`:**\n\n- `role` is set to `button`.\n- `aria-haspopup` is set to `menu`.\n- When the menu is displayed, `aria-expanded` is set to `true`.\n- `aria-controls` is set to the `id` of the `MenuList`.\n\n**For `MenuList`:**\n\n- `role` is set to `menu`.\n- `aria-orientation` is set to `vertical`.\n\n**For `MenuItem`:**\n\n- `role` is set to `menuitem`.\n- Gets one of these roles `menuitem`/`menuitemradio`/ `menuitemcheckbox`.\n\n## Props\n\n### Menu Props\n\n<PropsTable of=\"Menu\" />\n\n### MenuButton Props\n\n`MenuButton` composes [Box](/docs-horizon-ui-dashboard/docs/layout/box) so you\ncan pass all `Box` props to change its style.\n\n### MenuList Props\n\n`MenuList` composes [Box](/docs-horizon-ui-dashboard/docs/layout/box) so you can\npass all `Box` props to change its style.\n\n### MenuItem Props\n\n<PropsTable of=\"MenuItem\" />\n\n### MenuGroup Props\n\n`MenuGroup` composes [Box](/docs-horizon-ui-dashboard/docs/layout/box) so you\ncan pass all `Box` props to change its style.\n\n### MenuOptionGroup Props\n\n<PropsTable of=\"MenuOptionGroup\" />\n\n### MenuItemOption Props\n\n`MenuItemOption` composes [Box](/docs-horizon-ui-dashboard/docs/layout/box) so\nyou can pass all box props in addition to these:\n\n<PropsTable of=\"MenuItemOption\" />\n","title":"Chakra UI Menu - Horizon UI","package":"@chakra-ui/menu","image":"components/menu.svg","description":"An accessible dropdown menu for the common dropdown menu button design pattern. Menu uses roving tabIndex for focus management.","slug":"/docs/overlay/menu","lastEdited":{"date":"April 02, 2022","author":"Simmmple"},"headings":[{"text":"Import","id":"import","level":"h2"},{"text":"Usage","id":"usage","level":"h2"},{"text":"Accessing the internal state","id":"accessing-the-internal-state","level":"h3"},{"text":"Customizing the button","id":"customizing-the-button","level":"h3"},{"text":"Letter Navigation","id":"letter-navigation","level":"h3"},{"text":"Just another example","id":"just-another-example","level":"h3"},{"text":"Adding icons and commands","id":"adding-icons-and-commands","level":"h3"},{"text":"Lazily mounting MenuItem","id":"lazily-mounting-menuitem","level":"h3"},{"text":"Rendering menu in a portal","id":"rendering-menu-in-a-portal","level":"h3"},{"text":"MenuGroup","id":"menugroup","level":"h3"},{"text":"Menu option groups","id":"menu-option-groups","level":"h2"},{"text":"Accessibility","id":"accessibility","level":"h2"},{"text":"Keyboard Interaction","id":"keyboard-interaction","level":"h3"},{"text":"ARIA roles","id":"aria-roles","level":"h3"},{"text":"Props","id":"props","level":"h2"},{"text":"Menu Props","id":"menu-props","level":"h3"},{"text":"MenuButton Props","id":"menubutton-props","level":"h3"},{"text":"MenuList Props","id":"menulist-props","level":"h3"},{"text":"MenuItem Props","id":"menuitem-props","level":"h3"},{"text":"MenuGroup Props","id":"menugroup-props","level":"h3"},{"text":"MenuOptionGroup Props","id":"menuoptiongroup-props","level":"h3"},{"text":"MenuItemOption Props","id":"menuitemoption-props","level":"h3"}],"editUrl":"https://github.com/simmmple-web/horizon-ui-dashboard/edit/main/website/pages/docs/overlay/menu.mdx","author":null,"tags":[]},"_superjson":{"values":{"frontMatter.author":["undefined"]}}},"__N_SSG":true}
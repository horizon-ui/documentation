{"pageProps":{"mdxSource":{"compiledSource":"var g=Object.defineProperty,m=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var l=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable;var t=(a,n,i)=>n in a?g(a,n,{enumerable:!0,configurable:!0,writable:!0,value:i}):a[n]=i,e=(a,n)=>{for(var i in n||(n={}))o.call(n,i)&&t(a,i,n[i]);if(l)for(var i of l(n))d.call(n,i)&&t(a,i,n[i]);return a},p=(a,n)=>m(a,c(n));var s=(a,n)=>{var i={};for(var r in a)o.call(a,r)&&n.indexOf(r)<0&&(i[r]=a[r]);if(a!=null&&l)for(var r of l(a))n.indexOf(r)<0&&d.call(a,r)&&(i[r]=a[r]);return i};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var r=i,{components:a}=r,n=s(r,[\"components\"]);return mdx(MDXLayout,p(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"RangeSlider\"),` is a multi thumb slider used to select a range of related\nvalues. A common use-case of this component is a price range picker that allows\na user to set the minimum and maximum price.`),mdx(\"h2\",e({},{id:\"import\"}),\"Import\"),mdx(\"p\",null,\"Chakra UI exports the following component parts to implement the Range Slider:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"RangeSlider\")),`: The wrapper that provides context and functionality for all\nchildren.`),mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"RangeSliderTrack\")),\": The empty part of the slider that shows the track.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"RangeSliderFilledTrack\")),\": The filled part of the slider.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"RangeSliderThumb\")),\": The handle that's used to change the slider value.\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-js\"}),`import {\n  RangeSlider,\n  RangeSliderTrack,\n  RangeSliderFilledTrack,\n  RangeSliderThumb,\n} from \"@chakra-ui/react\"\n`)),mdx(\"h2\",e({},{id:\"usage\"}),\"Usage\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"Note:\"),\" We recommend adding a \",mdx(\"inlineCode\",{parentName:\"p\"},\"aria-label\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"aria-labelledby\"),` prop to\nprovide an accessible label for the Slider.`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<RangeSlider aria-label={[\"min\", \"max\"]} defaultValue={[10, 30]}>\n  <RangeSliderTrack>\n    <RangeSliderFilledTrack />\n  </RangeSliderTrack>\n  <RangeSliderThumb index={0} />\n  <RangeSliderThumb index={1} />\n</RangeSlider>\n`)),mdx(\"h3\",e({},{id:\"changing-the-slider-color-scheme\"}),\"Changing the slider color scheme\"),mdx(\"p\",null,`You can override the color scheme of the slider to any color key specified in\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"theme.colors\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<RangeSlider\n  aria-label={[\"min\", \"max\"]}\n  colorScheme=\"pink\"\n  defaultValue={[10, 30]}\n>\n  <RangeSliderTrack>\n    <RangeSliderFilledTrack />\n  </RangeSliderTrack>\n  <RangeSliderThumb index={0} />\n  <RangeSliderThumb index={1} />\n</RangeSlider>\n`)),mdx(\"h3\",e({},{id:\"changing-the-slider-orientation\"}),\"Changing the slider orientation\"),mdx(\"p\",null,\"By default, the slider orientation is \",mdx(\"inlineCode\",{parentName:\"p\"},\"horizontal\"),`. However, if you want to have\nit vertical, pass the `,mdx(\"inlineCode\",{parentName:\"p\"},\"orientation\"),\" prop and set its value to \",mdx(\"inlineCode\",{parentName:\"p\"},\"vertical\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<RangeSlider\n  aria-label={[\"min\", \"max\"]}\n  colorScheme=\"pink\"\n  defaultValue={[10, 30]}\n  orientation=\"vertical\"\n  minH=\"32\"\n>\n  <RangeSliderTrack>\n    <RangeSliderFilledTrack />\n  </RangeSliderTrack>\n  <RangeSliderThumb index={0} />\n  <RangeSliderThumb index={1} />\n</RangeSlider>\n`)),mdx(\"h3\",e({},{id:\"customizing-the-slider\"}),\"Customizing the Slider\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"Slider\"),` component was designed to be composed to make it easy for you to\ncustomize its styles.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<RangeSlider aria-label={[\"min\", \"max\"]} defaultValue={[30, 80]}>\n  <RangeSliderTrack bg=\"red.100\">\n    <RangeSliderFilledTrack bg=\"tomato\" />\n  </RangeSliderTrack>\n  <RangeSliderThumb boxSize={6} index={0}>\n    <Box color=\"tomato\" as={MdGraphicEq} />\n  </RangeSliderThumb>\n  <RangeSliderThumb boxSize={6} index={1}>\n    <Box color=\"tomato\" as={MdGraphicEq} />\n  </RangeSliderThumb>\n</RangeSlider>\n`)),mdx(\"h3\",e({},{id:\"discrete-sliders\"}),\"Discrete Sliders\"),mdx(\"p\",null,`Discrete sliders allow you to snap to predefined sets of values. This can be\naccomplished using the `,mdx(\"inlineCode\",{parentName:\"p\"},\"step\"),\" prop.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<RangeSlider defaultValue={[120, 240]} min={0} max={300} step={30}>\n  <RangeSliderTrack bg=\"red.100\">\n    <RangeSliderFilledTrack bg=\"tomato\" />\n  </RangeSliderTrack>\n  <RangeSliderThumb boxSize={6} index={0} />\n  <RangeSliderThumb boxSize={6} index={1} />\n</RangeSlider>\n`)),mdx(\"h3\",e({},{id:\"getting-the-final-value-when-dragging-the-slider\"}),\"Getting the final value when dragging the slider\"),mdx(\"p\",null,`Dragging the slider can trigger lots of updates and the user might only be\ninterested in the final result after sliding is complete. You can use\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"onChangeEnd\"),\" for this.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\",metastring:\"live=false\",live:\"false\"}),`<RangeSlider\n  aria-label={[\"min\", \"max\"]}\n  onChangeEnd={(val) => console.log(val)}\n>\n  <RangeSliderTrack>\n    <RangeSliderFilledTrack />\n  </RangeSliderTrack>\n  <RangeSliderThumb index={0} />\n  <RangeSliderThumb index={1} />\n</RangeSlider>\n`)),mdx(\"h3\",e({},{id:\"userangeslider\"}),\"useRangeSlider\"),mdx(\"p\",null,\"We've exported the \",mdx(\"inlineCode\",{parentName:\"p\"},\"useRangeSlider\"),` hook to help users manage and build custom\nslider UIs.`),mdx(\"h3\",e({},{id:\"rangesliderthumb-props\"}),\"RangeSliderThumb Props\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"RangeSliderThumb\"),\" composes \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/components/layout/box\"}),\"Box\"),` so you can pass\nall `,mdx(\"inlineCode\",{parentName:\"p\"},\"Box\"),\" props to change its style.\"),mdx(\"h3\",e({},{id:\"rangesliderfilledtrack-props\"}),\"RangeSliderFilledTrack Props\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"RangeSliderFilledTrack\"),\" composes \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/components/layout/box\"}),\"Box\"),` so you can\npass all `,mdx(\"inlineCode\",{parentName:\"p\"},\"Box\"),\" props to change its style.\"),mdx(\"h3\",e({},{id:\"rangeslidertrack-props\"}),\"RangeSliderTrack Props\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"RangeSliderTrack\"),\" composes \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/components/layout/box\"}),\"Box\"),` so you can pass\nall `,mdx(\"inlineCode\",{parentName:\"p\"},\"Box\"),\" props to change its style.\"))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Chakra UI Range Slider - Horizon UI","package":"@chakra-ui/slider","version":"1.6.9","image":"components/range-slider.svg","description":"The RangeSlider is a multi thumb slider used to select a range of related values."}},"frontMatter":{"excerpt":"The RangeSlider is a multi thumb slider used to select a range of related","readTimeMinutes":2,"mdxContent":"---\ntitle: Chakra UI Range Slider - Horizon UI\npackage: \"@chakra-ui/slider\"\nversion: 1.6.9\nimage: \"components/range-slider.svg\"\ndescription:\n  \"The RangeSlider is a multi thumb slider used to select a range of related\n  values.\"\n---\n\nThe `RangeSlider` is a multi thumb slider used to select a range of related\nvalues. A common use-case of this component is a price range picker that allows\na user to set the minimum and maximum price.\n\n## Import\n\nChakra UI exports the following component parts to implement the Range Slider:\n\n- **`RangeSlider`**: The wrapper that provides context and functionality for all\n  children.\n- **`RangeSliderTrack`**: The empty part of the slider that shows the track.\n- **`RangeSliderFilledTrack`**: The filled part of the slider.\n- **`RangeSliderThumb`**: The handle that's used to change the slider value.\n\n```js\nimport {\n  RangeSlider,\n  RangeSliderTrack,\n  RangeSliderFilledTrack,\n  RangeSliderThumb,\n} from \"@chakra-ui/react\"\n```\n\n## Usage\n\n> **Note:** We recommend adding a `aria-label` or `aria-labelledby` prop to\n> provide an accessible label for the Slider.\n\n```jsx\n<RangeSlider aria-label={[\"min\", \"max\"]} defaultValue={[10, 30]}>\n  <RangeSliderTrack>\n    <RangeSliderFilledTrack />\n  </RangeSliderTrack>\n  <RangeSliderThumb index={0} />\n  <RangeSliderThumb index={1} />\n</RangeSlider>\n```\n\n### Changing the slider color scheme\n\nYou can override the color scheme of the slider to any color key specified in\n`theme.colors`.\n\n```jsx\n<RangeSlider\n  aria-label={[\"min\", \"max\"]}\n  colorScheme=\"pink\"\n  defaultValue={[10, 30]}\n>\n  <RangeSliderTrack>\n    <RangeSliderFilledTrack />\n  </RangeSliderTrack>\n  <RangeSliderThumb index={0} />\n  <RangeSliderThumb index={1} />\n</RangeSlider>\n```\n\n### Changing the slider orientation\n\nBy default, the slider orientation is `horizontal`. However, if you want to have\nit vertical, pass the `orientation` prop and set its value to `vertical`.\n\n```jsx\n<RangeSlider\n  aria-label={[\"min\", \"max\"]}\n  colorScheme=\"pink\"\n  defaultValue={[10, 30]}\n  orientation=\"vertical\"\n  minH=\"32\"\n>\n  <RangeSliderTrack>\n    <RangeSliderFilledTrack />\n  </RangeSliderTrack>\n  <RangeSliderThumb index={0} />\n  <RangeSliderThumb index={1} />\n</RangeSlider>\n```\n\n### Customizing the Slider\n\n`Slider` component was designed to be composed to make it easy for you to\ncustomize its styles.\n\n```jsx\n<RangeSlider aria-label={[\"min\", \"max\"]} defaultValue={[30, 80]}>\n  <RangeSliderTrack bg=\"red.100\">\n    <RangeSliderFilledTrack bg=\"tomato\" />\n  </RangeSliderTrack>\n  <RangeSliderThumb boxSize={6} index={0}>\n    <Box color=\"tomato\" as={MdGraphicEq} />\n  </RangeSliderThumb>\n  <RangeSliderThumb boxSize={6} index={1}>\n    <Box color=\"tomato\" as={MdGraphicEq} />\n  </RangeSliderThumb>\n</RangeSlider>\n```\n\n### Discrete Sliders\n\nDiscrete sliders allow you to snap to predefined sets of values. This can be\naccomplished using the `step` prop.\n\n```jsx\n<RangeSlider defaultValue={[120, 240]} min={0} max={300} step={30}>\n  <RangeSliderTrack bg=\"red.100\">\n    <RangeSliderFilledTrack bg=\"tomato\" />\n  </RangeSliderTrack>\n  <RangeSliderThumb boxSize={6} index={0} />\n  <RangeSliderThumb boxSize={6} index={1} />\n</RangeSlider>\n```\n\n### Getting the final value when dragging the slider\n\nDragging the slider can trigger lots of updates and the user might only be\ninterested in the final result after sliding is complete. You can use\n`onChangeEnd` for this.\n\n```jsx live=false\n<RangeSlider\n  aria-label={[\"min\", \"max\"]}\n  onChangeEnd={(val) => console.log(val)}\n>\n  <RangeSliderTrack>\n    <RangeSliderFilledTrack />\n  </RangeSliderTrack>\n  <RangeSliderThumb index={0} />\n  <RangeSliderThumb index={1} />\n</RangeSlider>\n```\n\n### useRangeSlider\n\nWe've exported the `useRangeSlider` hook to help users manage and build custom\nslider UIs.\n\n### RangeSliderThumb Props\n\n`RangeSliderThumb` composes [Box](/docs/components/layout/box) so you can pass\nall `Box` props to change its style.\n\n### RangeSliderFilledTrack Props\n\n`RangeSliderFilledTrack` composes [Box](/docs/components/layout/box) so you can\npass all `Box` props to change its style.\n\n### RangeSliderTrack Props\n\n`RangeSliderTrack` composes [Box](/docs/components/layout/box) so you can pass\nall `Box` props to change its style.\n","title":"Chakra UI Range Slider - Horizon UI","package":"@chakra-ui/slider","version":"1.6.9","image":"components/range-slider.svg","description":"The RangeSlider is a multi thumb slider used to select a range of related values.","slug":"/docs/form/range-slider","lastEdited":{"date":"April 17, 2022","author":"Simmmple"},"headings":[{"text":"Import","id":"import","level":"h2"},{"text":"Usage","id":"usage","level":"h2"},{"text":"Changing the slider color scheme","id":"changing-the-slider-color-scheme","level":"h3"},{"text":"Changing the slider orientation","id":"changing-the-slider-orientation","level":"h3"},{"text":"Customizing the Slider","id":"customizing-the-slider","level":"h3"},{"text":"Discrete Sliders","id":"discrete-sliders","level":"h3"},{"text":"Getting the final value when dragging the slider","id":"getting-the-final-value-when-dragging-the-slider","level":"h3"},{"text":"useRangeSlider","id":"userangeslider","level":"h3"},{"text":"RangeSliderThumb Props","id":"rangesliderthumb-props","level":"h3"},{"text":"RangeSliderFilledTrack Props","id":"rangesliderfilledtrack-props","level":"h3"},{"text":"RangeSliderTrack Props","id":"rangeslidertrack-props","level":"h3"}],"editUrl":"https://github.com/horizon-ui/horizon-ui-chakra/edit/main/website/pages/docs/form/range-slider.mdx","author":null,"tags":[]},"_superjson":{"values":{"frontMatter.author":["undefined"]}}},"__N_SSG":true}
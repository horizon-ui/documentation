{"pageProps":{"mdxSource":{"compiledSource":"var s=Object.defineProperty,c=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var p=(o,n,t)=>n in o?s(o,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[n]=t,e=(o,n)=>{for(var t in n||(n={}))i.call(n,t)&&p(o,t,n[t]);if(r)for(var t of r(n))l.call(n,t)&&p(o,t,n[t]);return o},d=(o,n)=>c(o,m(n));var u=(o,n)=>{var t={};for(var a in o)i.call(o,a)&&n.indexOf(a)<0&&(t[a]=o[a]);if(o!=null&&r)for(var a of r(o))n.indexOf(a)<0&&l.call(o,a)&&(t[a]=o[a]);return t};const makeShortcode=o=>function(t){return console.warn(\"Component \"+o+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},t))},PropsTable=makeShortcode(\"PropsTable\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var a=t,{components:o}=a,n=u(a,[\"components\"]);return mdx(MDXLayout,d(e(e({},layoutProps),n),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`The Button component is used to trigger an action or event, such as submitting a\nform, opening a dialog, canceling an action, or performing a delete operation.`),mdx(\"h2\",e({},{id:\"import\"}),\"Import\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`import { Button, ButtonGroup } from \"@chakra-ui/react\"\n`)),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},\"Button:\"),\" The button component with support for custom icons, spinners, etc.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},\"ButtonGroup:\"),` Used to group buttons whose actions are related, with an\noption to flush them together.`)),mdx(\"h2\",e({},{id:\"usage\"}),\"Usage\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Button borderRadius=\"12px\" colorScheme=\"brand\">\n  Button\n</Button>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Button colorScheme=\"brand\">Button</Button>\n`)),mdx(\"h3\",e({},{id:\"button-sizes\"}),\"Button Sizes\"),mdx(\"p\",null,\"Use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"size\"),` prop to change the size of the button. You can set the value to\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"xs\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"sm\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"md\"),\", or \",mdx(\"inlineCode\",{parentName:\"p\"},\"lg\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Stack spacing={4} direction=\"row\" align=\"center\">\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"xs\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"sm\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"md\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"lg\">\n    Button\n  </Button>\n</Stack>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Stack spacing={4} direction=\"row\" align=\"center\">\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"xs\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"sm\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"md\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"lg\">\n    Button\n  </Button>\n</Stack>\n`)),mdx(\"h3\",e({},{id:\"button-variants\"}),\"Button variants\"),mdx(\"p\",null,\"Use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"variant\"),` prop to change the visual style of the Button. You can set the\nvalue to `,mdx(\"inlineCode\",{parentName:\"p\"},\"solid\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"ghost\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"outline\"),\", or \",mdx(\"inlineCode\",{parentName:\"p\"},\"link\"),\".\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" variant=\"solid\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" variant=\"outline\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" variant=\"ghost\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" variant=\"link\">\n    Button\n  </Button>\n</Stack>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button colorScheme=\"brand\" variant=\"solid\">\n    Button\n  </Button>\n  <Button colorScheme=\"brand\" variant=\"outline\">\n    Button\n  </Button>\n  <Button colorScheme=\"brand\" variant=\"ghost\">\n    Button\n  </Button>\n  <Button colorScheme=\"brand\" variant=\"link\">\n    Button\n  </Button>\n</Stack>\n`)),mdx(\"h3\",e({},{id:\"button-with-icon\"}),\"Button with icon\"),mdx(\"p\",null,\"You can add left and right icons to the Button component using the \",mdx(\"inlineCode\",{parentName:\"p\"},\"leftIcon\"),`\nand `,mdx(\"inlineCode\",{parentName:\"p\"},\"rightIcon\"),\" props respectively.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"Note: The \",mdx(\"inlineCode\",{parentName:\"p\"},\"leftIcon\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"rightIcon\"),` prop values should be react elements NOT\nstrings.`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Stack direction=\"row\" spacing={4}>\n  <Button\n    borderRadius=\"12px\"\n    leftIcon={<EmailIcon />}\n    colorScheme=\"brand\"\n    variant=\"solid\"\n  >\n    Email\n  </Button>\n  <Button\n    borderRadius=\"12px\"\n    rightIcon={<ArrowForwardIcon />}\n    colorScheme=\"brand\"\n    variant=\"outline\"\n  >\n    Call us\n  </Button>\n</Stack>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Stack direction=\"row\" spacing={4}>\n  <Button leftIcon={<EmailIcon />} colorScheme=\"brand\" variant=\"solid\">\n    Email\n  </Button>\n  <Button\n    rightIcon={<ArrowForwardIcon />}\n    colorScheme=\"brand\"\n    variant=\"outline\"\n  >\n    Call us\n  </Button>\n</Stack>\n`)),mdx(\"p\",null,`You can also use icons from popular libraries like\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://react-icons.github.io/react-icons/\"}),\"react-icons\"),` and pass it into the\nbutton.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`// import { MdBuild , MdCall } from \"react-icons/md\"\n\n<Stack direction=\"row\" spacing={4}>\n  <Button\n    borderRadius=\"12px\"\n    leftIcon={<MdBuild />}\n    colorScheme=\"brand\"\n    variant=\"solid\"\n  >\n    Settings\n  </Button>\n  <Button\n    borderRadius=\"12px\"\n    rightIcon={<MdCall />}\n    colorScheme=\"brand\"\n    variant=\"outline\"\n  >\n    Call us\n  </Button>\n</Stack>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// import { MdBuild , MdCall } from \"react-icons/md\"\n\n<Stack direction=\"row\" spacing={4}>\n  <Button leftIcon={<MdBuild />} colorScheme=\"brand\" variant=\"solid\">\n    Settings\n  </Button>\n  <Button rightIcon={<MdCall />} colorScheme=\"brand\" variant=\"outline\">\n    Call us\n  </Button>\n</Stack>\n`)),mdx(\"h3\",e({},{id:\"button-loading-state\"}),\"Button loading state\"),mdx(\"p\",null,\"Pass the \",mdx(\"inlineCode\",{parentName:\"p\"},\"isLoading\"),` prop to show its loading state. By default, the button will\nshow a spinner and leave the button's width unchanged.`),mdx(\"p\",null,\"You can also pass the \",mdx(\"inlineCode\",{parentName:\"p\"},\"loadingText\"),\" prop to show a spinner and the loading text.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Stack direction=\"row\" spacing={4}>\n  <Button borderRadius=\"12px\" isLoading colorScheme=\"brand\" variant=\"solid\">\n    Email\n  </Button>\n  <Button\n    borderRadius=\"12px\"\n    isLoading\n    loadingText=\"Submitting\"\n    colorScheme=\"brand\"\n    variant=\"outline\"\n  >\n    Submit\n  </Button>\n</Stack>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Stack direction=\"row\" spacing={4}>\n  <Button isLoading colorScheme=\"brand\" variant=\"solid\">\n    Email\n  </Button>\n  <Button\n    isLoading\n    loadingText=\"Submitting\"\n    colorScheme=\"brand\"\n    variant=\"outline\"\n  >\n    Submit\n  </Button>\n</Stack>\n`)),mdx(\"p\",null,`You can change the spinner element to use custom loaders as per your design\nrequirements. Pass the `,mdx(\"inlineCode\",{parentName:\"p\"},\"spinner\"),\" prop and set it to a custom react element.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Button\n  borderRadius=\"12px\"\n  isLoading\n  colorScheme=\"brand\"\n  spinner={<BeatLoader size={8} color=\"white\" />}\n>\n  Click me\n</Button>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Button\n  isLoading\n  colorScheme=\"brand\"\n  spinner={<BeatLoader size={8} color=\"white\" />}\n>\n  Click me\n</Button>\n`)),mdx(\"p\",null,\"When a \",mdx(\"inlineCode\",{parentName:\"p\"},\"loadingText\"),` is present, you can change the placement of the spinner\nelement to either `,mdx(\"inlineCode\",{parentName:\"p\"},\"start\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"end\"),\". It is \",mdx(\"inlineCode\",{parentName:\"p\"},\"start\"),\" by default.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button\n    borderRadius=\"12px\"\n    isLoading\n    loadingText=\"Loading\"\n    colorScheme=\"red\"\n    variant=\"outline\"\n    spinnerPlacement=\"start\"\n  >\n    Submit\n  </Button>\n  <Button\n    borderRadius=\"12px\"\n    isLoading\n    loadingText=\"Loading\"\n    colorScheme=\"brand\"\n    variant=\"outline\"\n    spinnerPlacement=\"end\"\n  >\n    Continue\n  </Button>\n</Stack>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button\n    isLoading\n    loadingText=\"Loading\"\n    colorScheme=\"red\"\n    variant=\"outline\"\n    spinnerPlacement=\"start\"\n  >\n    Submit\n  </Button>\n  <Button\n    isLoading\n    loadingText=\"Loading\"\n    colorScheme=\"brand\"\n    variant=\"outline\"\n    spinnerPlacement=\"end\"\n  >\n    Continue\n  </Button>\n</Stack>\n`)),mdx(\"h3\",e({},{id:\"social-buttons\"}),\"Social Buttons\"),mdx(\"p\",null,`We've included the colors for common social media platforms, and you can simply\nuse their buttons via the `,mdx(\"inlineCode\",{parentName:\"p\"},\"colorScheme\"),\" prop.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<HStack>\n  <Button borderRadius=\"12px\" colorScheme=\"facebook\" leftIcon={<FaFacebook />}>\n    Facebook\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"twitter\" leftIcon={<FaTwitter />}>\n    Twitter\n  </Button>\n</HStack>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<HStack>\n  <Button colorScheme=\"facebook\" leftIcon={<FaFacebook />}>\n    Facebook\n  </Button>\n  <Button colorScheme=\"twitter\" leftIcon={<FaTwitter />}>\n    Twitter\n  </Button>\n</HStack>\n`)),mdx(\"p\",null,`The Facebook and Twitter icons in the above example are available from\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://react-icons.netlify.com/#/\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"react-icons\")),\" as \",mdx(\"inlineCode\",{parentName:\"p\"},\"FaFacebook\"),` and\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"FaTwitter\"),\", found in the \",mdx(\"inlineCode\",{parentName:\"p\"},\"react-icons/fa\"),\" import.\"),mdx(\"h3\",e({},{id:\"grouping-buttons\"}),\"Grouping Buttons\"),mdx(\"p\",null,\"You can use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Stack\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"ButtonGroup\"),` component to group buttons. When you\nuse the `,mdx(\"inlineCode\",{parentName:\"p\"},\"ButtonGroup\"),\" component, it allows you to:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Set the \",mdx(\"inlineCode\",{parentName:\"li\"},\"size\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"variant\"),\" of all buttons within it.\"),mdx(\"li\",{parentName:\"ul\"},\"Add \",mdx(\"inlineCode\",{parentName:\"li\"},\"spacing\"),\" between the buttons.\"),mdx(\"li\",{parentName:\"ul\"},`Flush the buttons together by removing the border radius of the its children\nas needed.`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<ButtonGroup borderRadius=\"15px\" variant=\"outline\" spacing=\"6\">\n  <Button borderRadius=\"15px\" colorScheme=\"brand\">\n    Save\n  </Button>\n  <Button borderRadius=\"15px\">Cancel</Button>\n</ButtonGroup>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<ButtonGroup variant=\"outline\" spacing=\"6\">\n  <Button colorScheme=\"brand\">Save</Button>\n  <Button>Cancel</Button>\n</ButtonGroup>\n`)),mdx(\"p\",null,\"To flush the buttons, pass the \",mdx(\"inlineCode\",{parentName:\"p\"},\"isAttached\"),\" prop.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<ButtonGroup borderRadius=\"15px\" size=\"sm\" isAttached variant=\"outline\">\n  <Button borderRadius=\"15px\" mr=\"-px\">\n    Save\n  </Button>\n  <IconButton\n    borderRadius=\"15px\"\n    aria-label=\"Add to friends\"\n    icon={<AddIcon />}\n  />\n</ButtonGroup>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<ButtonGroup size=\"sm\" isAttached variant=\"outline\">\n  <Button mr=\"-px\">Save</Button>\n  <IconButton aria-label=\"Add to friends\" icon={<AddIcon />} />\n</ButtonGroup>\n`)),mdx(\"h3\",e({},{id:\"variants\"}),\"Variants\"),mdx(\"p\",null,\"You can use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Stack\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"ButtonGroup\"),` component to group buttons. When you\nuse the `,mdx(\"inlineCode\",{parentName:\"p\"},\"ButtonGroup\"),\" component, it allows you to:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Set the \",mdx(\"inlineCode\",{parentName:\"li\"},\"size\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"variant\"),\" of all buttons within it.\"),mdx(\"li\",{parentName:\"ul\"},\"Add \",mdx(\"inlineCode\",{parentName:\"li\"},\"spacing\"),\" between the buttons.\"),mdx(\"li\",{parentName:\"ul\"},`Flush the buttons together by removing the border radius of the its children\nas needed.`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`<ButtonGroup borderRadius=\"15px\" variant=\"outline\" spacing=\"6\">\n  <Button borderRadius=\"15px\" colorScheme=\"brand\">\n    Save\n  </Button>\n  <Button borderRadius=\"15px\">Cancel</Button>\n</ButtonGroup>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<ButtonGroup variant=\"outline\" spacing=\"6\">\n  <Button colorScheme=\"brand\">Save</Button>\n  <Button>Cancel</Button>\n</ButtonGroup>\n`)),mdx(\"h2\",e({},{id:\"accessibility\"}),\"Accessibility\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Button has \",mdx(\"inlineCode\",{parentName:\"li\"},\"role\"),\" of \",mdx(\"inlineCode\",{parentName:\"li\"},\"button\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"When Button has focus, \",mdx(\"kbd\",null,\"Space\"),\" or \",mdx(\"kbd\",null,\"Enter\"),\" activates it.\")),mdx(\"h2\",e({},{id:\"composition\"}),\"Composition\"),mdx(\"p\",null,\"All props you pass (\",mdx(\"inlineCode\",{parentName:\"p\"},\"variant\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"colorScheme\"),`, etc.) are converted to style\nprops. This means you can override any style of the Button via props.`),mdx(\"h2\",e({},{id:\"custom-variants\"}),\"Custom variants:\"),mdx(\"p\",null,'\"transparent-with-icon\"'),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function Example() {\n  let mainTeal = useColorModeValue(\"brand.300\", \"brand.300\")\n  let inputBg = useColorModeValue(\"white\", \"gray.800\")\n  let mainText = useColorModeValue(\"gray.700\", \"gray.200\")\n  let navbarIcon = useColorModeValue(\"gray.500\", \"gray.200\")\n  let searchIcon = useColorModeValue(\"gray.700\", \"gray.200\")\n  return (\n    <Button\n      bg=\"transparent\"\n      fontWeight=\"bold\"\n      borderRadius=\"inherit\"\n      cursor=\"pointer\"\n      _hover=\"none\"\n      _active={{\n        bg: \"transparent\",\n        transform: \"none\",\n        borderColor: \"transparent\",\n      }}\n      _focus={{ boxShadow: \"none\" }}\n      _hover={{ boxShadow: \"none\" }}\n      borderRadius=\"15px\"\n      colorScheme=\"brand\"\n      ms=\"0px\"\n      px=\"0px\"\n      me={{ sm: \"2px\", md: \"16px\" }}\n      color={navbarIcon}\n      variant=\"transparent-with-icon\"\n      leftIcon={<EmailIcon color={navbarIcon} w=\"22px\" h=\"22px\" me=\"0px\" />}\n    >\n      Email\n    </Button>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`<Button variant=\"transparent-with-icon\" colorScheme=\"brand\">\n  Email\n</Button>\n`)),mdx(\"p\",null,'\"no-hover\"'),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`function Example() {\n  let navbarIcon = useColorModeValue(\"gray.700\", \"gray.200\")\n  let mainText = useColorModeValue(\"gray.700\", \"gray.200\")\n  let navbarBg = useColorModeValue(\n    \"linear-gradient(112.83deg, rgba(255, 255, 255, 0.82) 0%, rgba(255, 255, 255, 0.8) 110.84%)\",\n    \"linear-gradient(112.83deg, rgba(255, 255, 255, 0.21) 0%, rgba(255, 255, 255, 0) 110.84%)\",\n  )\n  let navbarBorder = useColorModeValue(\n    \"1.5px solid #FFFFFF\",\n    \"1.5px solid rgba(255, 255, 255, 0.31)\",\n  )\n  let navbarShadow = useColorModeValue(\n    \"0px 7px 23px rgba(0, 0, 0, 0.05)\",\n    \"none\",\n  )\n  let navbarFilter = useColorModeValue(\n    \"none\",\n    \"drop-shadow(0px 7px 23px rgba(0, 0, 0, 0.05))\",\n  )\n  let navbarBackdrop = \"blur(21px)\"\n  let bgButton = useColorModeValue(\n    \"linear-gradient(135deg, #868CFF 0%, #4318FF 100%)\",\n    \"linear-gradient(135deg, #868CFF 0%, #4318FF 100%)\",\n  )\n  let navbarPosition = \"fixed\"\n  let colorButton = \"white\"\n  return (\n    <Button\n      _hover={{ boxShadow: \"none\" }}\n      bg={bgButton}\n      color={colorButton}\n      fontSize=\"sm\"\n      borderRadius=\"14px\"\n      px=\"30px\"\n      _active=\"none\"\n      display={{\n        sm: \"none\",\n        lg: \"flex\",\n      }}\n    >\n      Free Download\n    </Button>\n  )\n}\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`let bgButton = useColorModeValue(\n  \"linear-gradient(135deg, #868CFF 0%, #4318FF 100%)\",\n  \"linear-gradient(135deg, #868CFF 0%, #4318FF 100%)\",\n)\nlet navbarPosition = \"fixed\"\nlet colorButton = \"white\"\nreturn (\n  <Button\n    _hover={{ boxShadow: \"none\" }}\n    bg={bgButton}\n    color={colorButton}\n    fontSize=\"sm\"\n    borderRadius=\"14px\"\n    px=\"30px\"\n    _active=\"none\"\n    display={{\n      sm: \"none\",\n      lg: \"flex\",\n    }}\n  >\n    Free Download\n  </Button>\n)\n`)),mdx(\"hr\",null),mdx(\"h2\",e({},{id:\"custom-button\"}),\"Custom Button\"),mdx(\"p\",null,`In the event that you need to make your own custom button, you can leverage the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"Box\"),\" component. It provides the \",mdx(\"inlineCode\",{parentName:\"p\"},\"hover\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"focus\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"active\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"disabled\"),` style\nprops to style the button.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-jsx\"}),`// Button from facebook.com\n<Box\n  as=\"button\"\n  height=\"24px\"\n  lineHeight=\"1.2\"\n  transition=\"all 0.2s cubic-bezier(.08,.52,.52,1)\"\n  border=\"1px\"\n  px=\"8px\"\n  borderRadius=\"2px\"\n  fontSize=\"14px\"\n  fontWeight=\"semibold\"\n  bg=\"#f5f6f7\"\n  borderColor=\"#ccd0d5\"\n  color=\"#4b4f56\"\n  _hover={{ bg: \"#ebedf0\" }}\n  _active={{\n    bg: \"#dddfe2\",\n    transform: \"scale(0.98)\",\n    borderColor: \"#bec3c9\",\n  }}\n  _focus={{\n    boxShadow:\n      \"0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)\",\n  }}\n>\n  Join Group\n</Box>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\"}),`// Button from facebook.com\n<Box\n  as=\"button\"\n  height=\"24px\"\n  lineHeight=\"1.2\"\n  transition=\"all 0.2s cubic-bezier(.08,.52,.52,1)\"\n  border=\"1px\"\n  px=\"8px\"\n  borderRadius=\"2px\"\n  fontSize=\"14px\"\n  fontWeight=\"semibold\"\n  bg=\"#f5f6f7\"\n  borderColor=\"#ccd0d5\"\n  color=\"#4b4f56\"\n  _hover={{ bg: \"#ebedf0\" }}\n  _active={{\n    bg: \"#dddfe2\",\n    transform: \"scale(0.98)\",\n    borderColor: \"#bec3c9\",\n  }}\n  _focus={{\n    boxShadow:\n      \"0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)\",\n  }}\n>\n  Join Group\n</Box>\n`)),mdx(\"h2\",e({},{id:\"props\"}),\"Props\"),mdx(\"h3\",e({},{id:\"button-props\"}),\"Button Props\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"Button\"),\" composes the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Box\"),` component, so you can pass all its props. These are\nprops specific to the `,mdx(\"inlineCode\",{parentName:\"p\"},\"Button\"),\" component:\"),mdx(PropsTable,{of:\"Button\",mdxType:\"PropsTable\"}),mdx(\"h3\",e({},{id:\"button-group-props\"}),\"Button Group Props\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"ButtonGroup\"),\" composes the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Box\"),` component, so you can pass all its props. These\nare props specific to the `,mdx(\"inlineCode\",{parentName:\"p\"},\"ButtonGroup\"),\" component:\"),mdx(PropsTable,{of:\"ButtonGroup\",mdxType:\"PropsTable\"}))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Chakra UI Button - Horizon UI","package":"@chakra-ui/button","image":"components/button.svg","description":"Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation."}},"frontMatter":{"excerpt":"The Button component is used to trigger an action or event, such as submitting a","readTimeMinutes":8,"mdxContent":"---\ntitle: Chakra UI Button - Horizon UI\npackage: \"@chakra-ui/button\"\nimage: \"components/button.svg\"\ndescription:\n  Button component is used to trigger an action or event, such as submitting a\n  form, opening a Dialog, canceling an action, or performing a delete operation.\n---\n\nThe Button component is used to trigger an action or event, such as submitting a\nform, opening a dialog, canceling an action, or performing a delete operation.\n\n## Import\n\n```tsx\nimport { Button, ButtonGroup } from \"@chakra-ui/react\"\n```\n\n- **Button:** The button component with support for custom icons, spinners, etc.\n- **ButtonGroup:** Used to group buttons whose actions are related, with an\n  option to flush them together.\n\n## Usage\n\n```jsx\n<Button borderRadius=\"12px\" colorScheme=\"brand\">\n  Button\n</Button>\n```\n\n```tsx\n<Button colorScheme=\"brand\">Button</Button>\n```\n\n### Button Sizes\n\nUse the `size` prop to change the size of the button. You can set the value to\n`xs`, `sm`, `md`, or `lg`.\n\n```jsx\n<Stack spacing={4} direction=\"row\" align=\"center\">\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"xs\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"sm\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"md\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"lg\">\n    Button\n  </Button>\n</Stack>\n```\n\n```tsx\n<Stack spacing={4} direction=\"row\" align=\"center\">\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"xs\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"sm\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"md\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" size=\"lg\">\n    Button\n  </Button>\n</Stack>\n```\n\n### Button variants\n\nUse the `variant` prop to change the visual style of the Button. You can set the\nvalue to `solid`, `ghost`, `outline`, or `link`.\n\n```jsx\n<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" variant=\"solid\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" variant=\"outline\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" variant=\"ghost\">\n    Button\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"brand\" variant=\"link\">\n    Button\n  </Button>\n</Stack>\n```\n\n```tsx\n<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button colorScheme=\"brand\" variant=\"solid\">\n    Button\n  </Button>\n  <Button colorScheme=\"brand\" variant=\"outline\">\n    Button\n  </Button>\n  <Button colorScheme=\"brand\" variant=\"ghost\">\n    Button\n  </Button>\n  <Button colorScheme=\"brand\" variant=\"link\">\n    Button\n  </Button>\n</Stack>\n```\n\n### Button with icon\n\nYou can add left and right icons to the Button component using the `leftIcon`\nand `rightIcon` props respectively.\n\n> Note: The `leftIcon` and `rightIcon` prop values should be react elements NOT\n> strings.\n\n```jsx\n<Stack direction=\"row\" spacing={4}>\n  <Button\n    borderRadius=\"12px\"\n    leftIcon={<EmailIcon />}\n    colorScheme=\"brand\"\n    variant=\"solid\"\n  >\n    Email\n  </Button>\n  <Button\n    borderRadius=\"12px\"\n    rightIcon={<ArrowForwardIcon />}\n    colorScheme=\"brand\"\n    variant=\"outline\"\n  >\n    Call us\n  </Button>\n</Stack>\n```\n\n```tsx\n<Stack direction=\"row\" spacing={4}>\n  <Button leftIcon={<EmailIcon />} colorScheme=\"brand\" variant=\"solid\">\n    Email\n  </Button>\n  <Button\n    rightIcon={<ArrowForwardIcon />}\n    colorScheme=\"brand\"\n    variant=\"outline\"\n  >\n    Call us\n  </Button>\n</Stack>\n```\n\nYou can also use icons from popular libraries like\n[react-icons](https://react-icons.github.io/react-icons/) and pass it into the\nbutton.\n\n```jsx\n// import { MdBuild , MdCall } from \"react-icons/md\"\n\n<Stack direction=\"row\" spacing={4}>\n  <Button\n    borderRadius=\"12px\"\n    leftIcon={<MdBuild />}\n    colorScheme=\"brand\"\n    variant=\"solid\"\n  >\n    Settings\n  </Button>\n  <Button\n    borderRadius=\"12px\"\n    rightIcon={<MdCall />}\n    colorScheme=\"brand\"\n    variant=\"outline\"\n  >\n    Call us\n  </Button>\n</Stack>\n```\n\n```tsx\n// import { MdBuild , MdCall } from \"react-icons/md\"\n\n<Stack direction=\"row\" spacing={4}>\n  <Button leftIcon={<MdBuild />} colorScheme=\"brand\" variant=\"solid\">\n    Settings\n  </Button>\n  <Button rightIcon={<MdCall />} colorScheme=\"brand\" variant=\"outline\">\n    Call us\n  </Button>\n</Stack>\n```\n\n### Button loading state\n\nPass the `isLoading` prop to show its loading state. By default, the button will\nshow a spinner and leave the button's width unchanged.\n\nYou can also pass the `loadingText` prop to show a spinner and the loading text.\n\n```jsx\n<Stack direction=\"row\" spacing={4}>\n  <Button borderRadius=\"12px\" isLoading colorScheme=\"brand\" variant=\"solid\">\n    Email\n  </Button>\n  <Button\n    borderRadius=\"12px\"\n    isLoading\n    loadingText=\"Submitting\"\n    colorScheme=\"brand\"\n    variant=\"outline\"\n  >\n    Submit\n  </Button>\n</Stack>\n```\n\n```tsx\n<Stack direction=\"row\" spacing={4}>\n  <Button isLoading colorScheme=\"brand\" variant=\"solid\">\n    Email\n  </Button>\n  <Button\n    isLoading\n    loadingText=\"Submitting\"\n    colorScheme=\"brand\"\n    variant=\"outline\"\n  >\n    Submit\n  </Button>\n</Stack>\n```\n\nYou can change the spinner element to use custom loaders as per your design\nrequirements. Pass the `spinner` prop and set it to a custom react element.\n\n```jsx\n<Button\n  borderRadius=\"12px\"\n  isLoading\n  colorScheme=\"brand\"\n  spinner={<BeatLoader size={8} color=\"white\" />}\n>\n  Click me\n</Button>\n```\n\n```tsx\n<Button\n  isLoading\n  colorScheme=\"brand\"\n  spinner={<BeatLoader size={8} color=\"white\" />}\n>\n  Click me\n</Button>\n```\n\nWhen a `loadingText` is present, you can change the placement of the spinner\nelement to either `start` or `end`. It is `start` by default.\n\n```jsx\n<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button\n    borderRadius=\"12px\"\n    isLoading\n    loadingText=\"Loading\"\n    colorScheme=\"red\"\n    variant=\"outline\"\n    spinnerPlacement=\"start\"\n  >\n    Submit\n  </Button>\n  <Button\n    borderRadius=\"12px\"\n    isLoading\n    loadingText=\"Loading\"\n    colorScheme=\"brand\"\n    variant=\"outline\"\n    spinnerPlacement=\"end\"\n  >\n    Continue\n  </Button>\n</Stack>\n```\n\n```tsx\n<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button\n    isLoading\n    loadingText=\"Loading\"\n    colorScheme=\"red\"\n    variant=\"outline\"\n    spinnerPlacement=\"start\"\n  >\n    Submit\n  </Button>\n  <Button\n    isLoading\n    loadingText=\"Loading\"\n    colorScheme=\"brand\"\n    variant=\"outline\"\n    spinnerPlacement=\"end\"\n  >\n    Continue\n  </Button>\n</Stack>\n```\n\n### Social Buttons\n\nWe've included the colors for common social media platforms, and you can simply\nuse their buttons via the `colorScheme` prop.\n\n```jsx\n<HStack>\n  <Button borderRadius=\"12px\" colorScheme=\"facebook\" leftIcon={<FaFacebook />}>\n    Facebook\n  </Button>\n  <Button borderRadius=\"12px\" colorScheme=\"twitter\" leftIcon={<FaTwitter />}>\n    Twitter\n  </Button>\n</HStack>\n```\n\n```tsx\n<HStack>\n  <Button colorScheme=\"facebook\" leftIcon={<FaFacebook />}>\n    Facebook\n  </Button>\n  <Button colorScheme=\"twitter\" leftIcon={<FaTwitter />}>\n    Twitter\n  </Button>\n</HStack>\n```\n\nThe Facebook and Twitter icons in the above example are available from\n[`react-icons`](https://react-icons.netlify.com/#/) as `FaFacebook` and\n`FaTwitter`, found in the `react-icons/fa` import.\n\n### Grouping Buttons\n\nYou can use the `Stack` or `ButtonGroup` component to group buttons. When you\nuse the `ButtonGroup` component, it allows you to:\n\n- Set the `size` and `variant` of all buttons within it.\n- Add `spacing` between the buttons.\n- Flush the buttons together by removing the border radius of the its children\n  as needed.\n\n```jsx\n<ButtonGroup borderRadius=\"15px\" variant=\"outline\" spacing=\"6\">\n  <Button borderRadius=\"15px\" colorScheme=\"brand\">\n    Save\n  </Button>\n  <Button borderRadius=\"15px\">Cancel</Button>\n</ButtonGroup>\n```\n\n```tsx\n<ButtonGroup variant=\"outline\" spacing=\"6\">\n  <Button colorScheme=\"brand\">Save</Button>\n  <Button>Cancel</Button>\n</ButtonGroup>\n```\n\nTo flush the buttons, pass the `isAttached` prop.\n\n```jsx\n<ButtonGroup borderRadius=\"15px\" size=\"sm\" isAttached variant=\"outline\">\n  <Button borderRadius=\"15px\" mr=\"-px\">\n    Save\n  </Button>\n  <IconButton\n    borderRadius=\"15px\"\n    aria-label=\"Add to friends\"\n    icon={<AddIcon />}\n  />\n</ButtonGroup>\n```\n\n```tsx\n<ButtonGroup size=\"sm\" isAttached variant=\"outline\">\n  <Button mr=\"-px\">Save</Button>\n  <IconButton aria-label=\"Add to friends\" icon={<AddIcon />} />\n</ButtonGroup>\n```\n\n### Variants\n\nYou can use the `Stack` or `ButtonGroup` component to group buttons. When you\nuse the `ButtonGroup` component, it allows you to:\n\n- Set the `size` and `variant` of all buttons within it.\n- Add `spacing` between the buttons.\n- Flush the buttons together by removing the border radius of the its children\n  as needed.\n\n```jsx\n<ButtonGroup borderRadius=\"15px\" variant=\"outline\" spacing=\"6\">\n  <Button borderRadius=\"15px\" colorScheme=\"brand\">\n    Save\n  </Button>\n  <Button borderRadius=\"15px\">Cancel</Button>\n</ButtonGroup>\n```\n\n```tsx\n<ButtonGroup variant=\"outline\" spacing=\"6\">\n  <Button colorScheme=\"brand\">Save</Button>\n  <Button>Cancel</Button>\n</ButtonGroup>\n```\n\n## Accessibility\n\n- Button has `role` of `button`.\n- When Button has focus, <kbd>Space</kbd> or <kbd>Enter</kbd> activates it.\n\n## Composition\n\nAll props you pass (`variant`, `colorScheme`, etc.) are converted to style\nprops. This means you can override any style of the Button via props.\n\n## Custom variants:\n\n\"transparent-with-icon\"\n\n```jsx\nfunction Example() {\n  let mainTeal = useColorModeValue(\"brand.300\", \"brand.300\")\n  let inputBg = useColorModeValue(\"white\", \"gray.800\")\n  let mainText = useColorModeValue(\"gray.700\", \"gray.200\")\n  let navbarIcon = useColorModeValue(\"gray.500\", \"gray.200\")\n  let searchIcon = useColorModeValue(\"gray.700\", \"gray.200\")\n  return (\n    <Button\n      bg=\"transparent\"\n      fontWeight=\"bold\"\n      borderRadius=\"inherit\"\n      cursor=\"pointer\"\n      _hover=\"none\"\n      _active={{\n        bg: \"transparent\",\n        transform: \"none\",\n        borderColor: \"transparent\",\n      }}\n      _focus={{ boxShadow: \"none\" }}\n      _hover={{ boxShadow: \"none\" }}\n      borderRadius=\"15px\"\n      colorScheme=\"brand\"\n      ms=\"0px\"\n      px=\"0px\"\n      me={{ sm: \"2px\", md: \"16px\" }}\n      color={navbarIcon}\n      variant=\"transparent-with-icon\"\n      leftIcon={<EmailIcon color={navbarIcon} w=\"22px\" h=\"22px\" me=\"0px\" />}\n    >\n      Email\n    </Button>\n  )\n}\n```\n\n```tsx\n<Button variant=\"transparent-with-icon\" colorScheme=\"brand\">\n  Email\n</Button>\n```\n\n\"no-hover\"\n\n```jsx\nfunction Example() {\n  let navbarIcon = useColorModeValue(\"gray.700\", \"gray.200\")\n  let mainText = useColorModeValue(\"gray.700\", \"gray.200\")\n  let navbarBg = useColorModeValue(\n    \"linear-gradient(112.83deg, rgba(255, 255, 255, 0.82) 0%, rgba(255, 255, 255, 0.8) 110.84%)\",\n    \"linear-gradient(112.83deg, rgba(255, 255, 255, 0.21) 0%, rgba(255, 255, 255, 0) 110.84%)\",\n  )\n  let navbarBorder = useColorModeValue(\n    \"1.5px solid #FFFFFF\",\n    \"1.5px solid rgba(255, 255, 255, 0.31)\",\n  )\n  let navbarShadow = useColorModeValue(\n    \"0px 7px 23px rgba(0, 0, 0, 0.05)\",\n    \"none\",\n  )\n  let navbarFilter = useColorModeValue(\n    \"none\",\n    \"drop-shadow(0px 7px 23px rgba(0, 0, 0, 0.05))\",\n  )\n  let navbarBackdrop = \"blur(21px)\"\n  let bgButton = useColorModeValue(\n    \"linear-gradient(135deg, #868CFF 0%, #4318FF 100%)\",\n    \"linear-gradient(135deg, #868CFF 0%, #4318FF 100%)\",\n  )\n  let navbarPosition = \"fixed\"\n  let colorButton = \"white\"\n  return (\n    <Button\n      _hover={{ boxShadow: \"none\" }}\n      bg={bgButton}\n      color={colorButton}\n      fontSize=\"sm\"\n      borderRadius=\"14px\"\n      px=\"30px\"\n      _active=\"none\"\n      display={{\n        sm: \"none\",\n        lg: \"flex\",\n      }}\n    >\n      Free Download\n    </Button>\n  )\n}\n```\n\n```tsx\nlet bgButton = useColorModeValue(\n  \"linear-gradient(135deg, #868CFF 0%, #4318FF 100%)\",\n  \"linear-gradient(135deg, #868CFF 0%, #4318FF 100%)\",\n)\nlet navbarPosition = \"fixed\"\nlet colorButton = \"white\"\nreturn (\n  <Button\n    _hover={{ boxShadow: \"none\" }}\n    bg={bgButton}\n    color={colorButton}\n    fontSize=\"sm\"\n    borderRadius=\"14px\"\n    px=\"30px\"\n    _active=\"none\"\n    display={{\n      sm: \"none\",\n      lg: \"flex\",\n    }}\n  >\n    Free Download\n  </Button>\n)\n```\n\n---\n\n## Custom Button\n\nIn the event that you need to make your own custom button, you can leverage the\n`Box` component. It provides the `hover`, `focus`, `active` and `disabled` style\nprops to style the button.\n\n```jsx\n// Button from facebook.com\n<Box\n  as=\"button\"\n  height=\"24px\"\n  lineHeight=\"1.2\"\n  transition=\"all 0.2s cubic-bezier(.08,.52,.52,1)\"\n  border=\"1px\"\n  px=\"8px\"\n  borderRadius=\"2px\"\n  fontSize=\"14px\"\n  fontWeight=\"semibold\"\n  bg=\"#f5f6f7\"\n  borderColor=\"#ccd0d5\"\n  color=\"#4b4f56\"\n  _hover={{ bg: \"#ebedf0\" }}\n  _active={{\n    bg: \"#dddfe2\",\n    transform: \"scale(0.98)\",\n    borderColor: \"#bec3c9\",\n  }}\n  _focus={{\n    boxShadow:\n      \"0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)\",\n  }}\n>\n  Join Group\n</Box>\n```\n\n```tsx\n// Button from facebook.com\n<Box\n  as=\"button\"\n  height=\"24px\"\n  lineHeight=\"1.2\"\n  transition=\"all 0.2s cubic-bezier(.08,.52,.52,1)\"\n  border=\"1px\"\n  px=\"8px\"\n  borderRadius=\"2px\"\n  fontSize=\"14px\"\n  fontWeight=\"semibold\"\n  bg=\"#f5f6f7\"\n  borderColor=\"#ccd0d5\"\n  color=\"#4b4f56\"\n  _hover={{ bg: \"#ebedf0\" }}\n  _active={{\n    bg: \"#dddfe2\",\n    transform: \"scale(0.98)\",\n    borderColor: \"#bec3c9\",\n  }}\n  _focus={{\n    boxShadow:\n      \"0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)\",\n  }}\n>\n  Join Group\n</Box>\n```\n\n## Props\n\n### Button Props\n\n`Button` composes the `Box` component, so you can pass all its props. These are\nprops specific to the `Button` component:\n\n<PropsTable of=\"Button\" />\n\n### Button Group Props\n\n`ButtonGroup` composes the `Box` component, so you can pass all its props. These\nare props specific to the `ButtonGroup` component:\n\n<PropsTable of=\"ButtonGroup\" />\n","title":"Chakra UI Button - Horizon UI","package":"@chakra-ui/button","image":"components/button.svg","description":"Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.","slug":"/docs/form/button","lastEdited":{"date":"April 02, 2022","author":"Simmmple"},"headings":[{"text":"Import","id":"import","level":"h2"},{"text":"Usage","id":"usage","level":"h2"},{"text":"Button Sizes","id":"button-sizes","level":"h3"},{"text":"Button variants","id":"button-variants","level":"h3"},{"text":"Button with icon","id":"button-with-icon","level":"h3"},{"text":"Button loading state","id":"button-loading-state","level":"h3"},{"text":"Social Buttons","id":"social-buttons","level":"h3"},{"text":"Grouping Buttons","id":"grouping-buttons","level":"h3"},{"text":"Variants","id":"variants","level":"h3"},{"text":"Accessibility","id":"accessibility","level":"h2"},{"text":"Composition","id":"composition","level":"h2"},{"text":"Custom variants:","id":"custom-variants","level":"h2"},{"text":"Custom Button","id":"custom-button","level":"h2"},{"text":"Props","id":"props","level":"h2"},{"text":"Button Props","id":"button-props","level":"h3"},{"text":"Button Group Props","id":"button-group-props","level":"h3"}],"editUrl":"https://github.com/simmmple-web/horizon-ui-dashboard/edit/main/website/pages/docs/form/button.mdx","author":null,"tags":[]},"_superjson":{"values":{"frontMatter.author":["undefined"]}}},"__N_SSG":true}
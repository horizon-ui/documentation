{"pageProps":{"mdxSource":{"compiledSource":"var m=Object.defineProperty,c=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var t=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var l=(e,a,o)=>a in e?m(e,a,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[a]=o,n=(e,a)=>{for(var o in a||(a={}))i.call(a,o)&&l(e,o,a[o]);if(t)for(var o of t(a))r.call(a,o)&&l(e,o,a[o]);return e},d=(e,a)=>c(e,g(a));var s=(e,a)=>{var o={};for(var p in e)i.call(e,p)&&a.indexOf(p)<0&&(o[p]=e[p]);if(e!=null&&t)for(var p of t(e))a.indexOf(p)<0&&r.call(e,p)&&(o[p]=e[p]);return o};const makeShortcode=e=>function(o){return console.warn(\"Component \"+e+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",n({},o))},PropsTable=makeShortcode(\"PropsTable\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var p=o,{components:e}=p,a=s(p,[\"components\"]);return mdx(MDXLayout,d(n(n({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"A primitive useful for grid layouts. Grid is \",mdx(\"inlineCode\",{parentName:\"p\"},\"Box\"),\" with \",mdx(\"inlineCode\",{parentName:\"p\"},\"display: grid\"),` and it\ncomes with helpful style shorthand. It renders a `,mdx(\"inlineCode\",{parentName:\"p\"},\"div\"),\" element.\"),mdx(\"h2\",n({},{id:\"import\"}),\"Import\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-tsx\"}),`import { Grid, GridItem } from \"@chakra-ui/react\"\n`)),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},\"Grid:\"),\" The main wrapper with \",mdx(\"inlineCode\",{parentName:\"li\"},\"display: grid\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},\"GridItem:\"),\" Used as a child of \",mdx(\"inlineCode\",{parentName:\"li\"},\"Grid\"),` to control the span, and start\npositions within the grid.`)),mdx(\"h2\",n({},{id:\"template-columns\"}),\"Template columns\"),mdx(\"p\",null,\"Here's an example of using grid template columns with the \",mdx(\"inlineCode\",{parentName:\"p\"},\"grid\"),` component, and\napplying a `,mdx(\"inlineCode\",{parentName:\"p\"},\"gap\"),\" or space between the grid items.\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\"}),`<Grid templateColumns=\"repeat(5, 1fr)\" gap={6}>\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n</Grid>\n`)),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-tsx\"}),`<Grid templateColumns=\"repeat(5, 1fr)\" gap={6}>\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n</Grid>\n`)),mdx(\"h2\",n({},{id:\"spanning-columns\"}),\"Spanning columns\"),mdx(\"p\",null,`In some layouts, you may need certain grid items to span specific amount of\ncolumns or rows instead of an even distribution. To achieve this, you need to\npass the `,mdx(\"inlineCode\",{parentName:\"p\"},\"colSpan\"),\" prop to the \",mdx(\"inlineCode\",{parentName:\"p\"},\"GridItem\"),` component to span across columns and\nalso pass the `,mdx(\"inlineCode\",{parentName:\"p\"},\"rowSpan\"),` component to span across rows. You also need to specify\nthe `,mdx(\"inlineCode\",{parentName:\"p\"},\"templateColumns\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"templateRows\"),\".\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\"}),`<Grid\n  h=\"200px\"\n  templateRows=\"repeat(2, 1fr)\"\n  templateColumns=\"repeat(5, 1fr)\"\n  gap={4}\n>\n  <GridItem rowSpan={2} colSpan={1} bg=\"tomato\" />\n  <GridItem colSpan={2} bg=\"papayawhip\" />\n  <GridItem colSpan={2} bg=\"papayawhip\" />\n  <GridItem colSpan={4} bg=\"tomato\" />\n</Grid>\n`)),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-tsx\"}),`<Grid\n  h=\"200px\"\n  templateRows=\"repeat(2, 1fr)\"\n  templateColumns=\"repeat(5, 1fr)\"\n  gap={4}\n>\n  <GridItem rowSpan={2} colSpan={1} bg=\"tomato\" />\n  <GridItem colSpan={2} bg=\"papayawhip\" />\n  <GridItem colSpan={2} bg=\"papayawhip\" />\n  <GridItem colSpan={4} bg=\"tomato\" />\n</Grid>\n`)),mdx(\"h2\",n({},{id:\"starting-and-ending-lines\"}),\"Starting and ending lines\"),mdx(\"p\",null,\"Pass the \",mdx(\"inlineCode\",{parentName:\"p\"},\"colStart\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"colEnd\"),\" prop to \",mdx(\"inlineCode\",{parentName:\"p\"},\"GridItem\"),` component to make an element\nstart or end at the `,mdx(\"inlineCode\",{parentName:\"p\"},\"nth\"),\" grid position.\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\"}),`<Grid templateColumns=\"repeat(5, 1fr)\" gap={4}>\n  <GridItem colSpan={2} h=\"10\" bg=\"tomato\" />\n  <GridItem colStart={4} colEnd={6} h=\"10\" bg=\"papayawhip\" />\n</Grid>\n`)),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-tsx\"}),`<Grid templateColumns=\"repeat(5, 1fr)\" gap={4}>\n  <GridItem colSpan={2} h=\"10\" bg=\"tomato\" />\n  <GridItem colStart={4} colEnd={6} h=\"10\" bg=\"papayawhip\" />\n</Grid>\n`)),mdx(\"h2\",n({},{id:\"props\"}),\"Props\"),mdx(\"h3\",n({},{id:\"grid-props\"}),\"Grid Props\"),mdx(\"p\",null,\"Grid composes \",mdx(\"inlineCode\",{parentName:\"p\"},\"Box\"),\" so you can pass all the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Box\"),` prop, and these shorthand prop\nto save you some time:`),mdx(PropsTable,{of:\"Grid\",mdxType:\"PropsTable\"}),mdx(\"h3\",n({},{id:\"griditem-props\"}),\"GridItem Props\"),mdx(PropsTable,{of:\"GridItem\",mdxType:\"PropsTable\"}))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Chakra UI Grid - Horizon UI","package":"@chakra-ui/layout","description":"Grid is Box with display set to grid and comes with helpful style shorthand. It renders a `div` element."}},"frontMatter":{"excerpt":"A primitive useful for grid layouts. Grid is Box with display: grid and it","readTimeMinutes":2,"mdxContent":"---\ntitle: Chakra UI Grid - Horizon UI\npackage: \"@chakra-ui/layout\"\ndescription:\n  Grid is Box with display set to grid and comes with helpful style shorthand.\n  It renders a `div` element.\n---\n\nA primitive useful for grid layouts. Grid is `Box` with `display: grid` and it\ncomes with helpful style shorthand. It renders a `div` element.\n\n## Import\n\n```tsx\nimport { Grid, GridItem } from \"@chakra-ui/react\"\n```\n\n- **Grid:** The main wrapper with `display: grid`.\n- **GridItem:** Used as a child of `Grid` to control the span, and start\n  positions within the grid.\n\n## Template columns\n\nHere's an example of using grid template columns with the `grid` component, and\napplying a `gap` or space between the grid items.\n\n```jsx\n<Grid templateColumns=\"repeat(5, 1fr)\" gap={6}>\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n</Grid>\n```\n\n```tsx\n<Grid templateColumns=\"repeat(5, 1fr)\" gap={6}>\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n  <Box w=\"100%\" h=\"10\" bg=\"blue.500\" />\n</Grid>\n```\n\n## Spanning columns\n\nIn some layouts, you may need certain grid items to span specific amount of\ncolumns or rows instead of an even distribution. To achieve this, you need to\npass the `colSpan` prop to the `GridItem` component to span across columns and\nalso pass the `rowSpan` component to span across rows. You also need to specify\nthe `templateColumns` and `templateRows`.\n\n```jsx\n<Grid\n  h=\"200px\"\n  templateRows=\"repeat(2, 1fr)\"\n  templateColumns=\"repeat(5, 1fr)\"\n  gap={4}\n>\n  <GridItem rowSpan={2} colSpan={1} bg=\"tomato\" />\n  <GridItem colSpan={2} bg=\"papayawhip\" />\n  <GridItem colSpan={2} bg=\"papayawhip\" />\n  <GridItem colSpan={4} bg=\"tomato\" />\n</Grid>\n```\n\n```tsx\n<Grid\n  h=\"200px\"\n  templateRows=\"repeat(2, 1fr)\"\n  templateColumns=\"repeat(5, 1fr)\"\n  gap={4}\n>\n  <GridItem rowSpan={2} colSpan={1} bg=\"tomato\" />\n  <GridItem colSpan={2} bg=\"papayawhip\" />\n  <GridItem colSpan={2} bg=\"papayawhip\" />\n  <GridItem colSpan={4} bg=\"tomato\" />\n</Grid>\n```\n\n## Starting and ending lines\n\nPass the `colStart` and `colEnd` prop to `GridItem` component to make an element\nstart or end at the `nth` grid position.\n\n```jsx\n<Grid templateColumns=\"repeat(5, 1fr)\" gap={4}>\n  <GridItem colSpan={2} h=\"10\" bg=\"tomato\" />\n  <GridItem colStart={4} colEnd={6} h=\"10\" bg=\"papayawhip\" />\n</Grid>\n```\n\n```tsx\n<Grid templateColumns=\"repeat(5, 1fr)\" gap={4}>\n  <GridItem colSpan={2} h=\"10\" bg=\"tomato\" />\n  <GridItem colStart={4} colEnd={6} h=\"10\" bg=\"papayawhip\" />\n</Grid>\n```\n\n## Props\n\n### Grid Props\n\nGrid composes `Box` so you can pass all the `Box` prop, and these shorthand prop\nto save you some time:\n\n<PropsTable of=\"Grid\" />\n\n### GridItem Props\n\n<PropsTable of=\"GridItem\" />\n","title":"Chakra UI Grid - Horizon UI","package":"@chakra-ui/layout","description":"Grid is Box with display set to grid and comes with helpful style shorthand. It renders a `div` element.","slug":"/docs/layout/grid","lastEdited":{"date":"April 02, 2022","author":"Simmmple"},"headings":[{"text":"Import","id":"import","level":"h2"},{"text":"Template columns","id":"template-columns","level":"h2"},{"text":"Spanning columns","id":"spanning-columns","level":"h2"},{"text":"Starting and ending lines","id":"starting-and-ending-lines","level":"h2"},{"text":"Props","id":"props","level":"h2"},{"text":"Grid Props","id":"grid-props","level":"h3"},{"text":"GridItem Props","id":"griditem-props","level":"h3"}],"editUrl":"https://github.com/horizon-ui/horizon-ui-chakra/edit/main/website/pages/docs/layout/grid.mdx","author":null,"tags":[]},"_superjson":{"values":{"frontMatter.author":["undefined"]}}},"__N_SSG":true}
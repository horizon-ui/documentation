{"pageProps":{"mdxSource":{"compiledSource":"var s=Object.defineProperty,c=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var t=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var p=(e,a,i)=>a in e?s(e,a,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[a]=i,n=(e,a)=>{for(var i in a||(a={}))l.call(a,i)&&p(e,i,a[i]);if(t)for(var i of t(a))r.call(a,i)&&p(e,i,a[i]);return e},d=(e,a)=>c(e,h(a));var x=(e,a)=>{var i={};for(var o in e)l.call(e,o)&&a.indexOf(o)<0&&(i[o]=e[o]);if(e!=null&&t)for(var o of t(e))a.indexOf(o)<0&&r.call(e,o)&&(i[o]=e[o]);return i};const makeShortcode=e=>function(i){return console.warn(\"Component \"+e+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",n({},i))},PropsTable=makeShortcode(\"PropsTable\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var o=i,{components:e}=o,a=x(o,[\"components\"]);return mdx(MDXLayout,d(n(n({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Flex is \",mdx(\"a\",n({parentName:\"p\"},{href:\"/docs-horizon-ui-dashboard/docs/layout/box\"}),\"Box\"),\" with \",mdx(\"inlineCode\",{parentName:\"p\"},\"display: flex\"),`\nand comes with helpful style shorthand. It renders a `,mdx(\"inlineCode\",{parentName:\"p\"},\"div\"),\" element.\"),mdx(\"h2\",n({},{id:\"import\"}),\"Import\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-tsx\"}),`import { Flex, Spacer } from \"@chakra-ui/react\"\n`)),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},\"Flex:\"),\" A \",mdx(\"inlineCode\",{parentName:\"li\"},\"Box\"),\" with \",mdx(\"inlineCode\",{parentName:\"li\"},\"display: flex\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},\"Spacer:\"),` Creates an adjustable, empty space that can be used to tune the\nspacing between child elements within `,mdx(\"inlineCode\",{parentName:\"li\"},\"Flex\"),\".\")),mdx(\"h2\",n({},{id:\"usage\"}),\"Usage\"),mdx(\"p\",null,\"Using the Flex components, here are some helpful shorthand props:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"flexDirection\"),\" is \",mdx(\"inlineCode\",{parentName:\"li\"},\"direction\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"flexWrap\"),\" is \",mdx(\"inlineCode\",{parentName:\"li\"},\"wrap\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"flexBasis\"),\" is \",mdx(\"inlineCode\",{parentName:\"li\"},\"basis\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"flexGrow\"),\" is \",mdx(\"inlineCode\",{parentName:\"li\"},\"grow\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"flexShrink\"),\" is \",mdx(\"inlineCode\",{parentName:\"li\"},\"shrink\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"alignItems\"),\" is \",mdx(\"inlineCode\",{parentName:\"li\"},\"align\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"justifyContent\"),\" is \",mdx(\"inlineCode\",{parentName:\"li\"},\"justify\"))),mdx(\"p\",null,`While you can pass the verbose props, using the shorthand can save you some\ntime.`),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\"}),`<Flex color=\"white\">\n  <Center w=\"100px\" bg=\"green.500\">\n    <Text>Box 1</Text>\n  </Center>\n  <Square bg=\"blue.500\" size=\"150px\">\n    <Text>Box 2</Text>\n  </Square>\n  <Box flex=\"1\" bg=\"tomato\">\n    <Text>Box 3</Text>\n  </Box>\n</Flex>\n`)),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-tsx\"}),`<Flex color=\"white\">\n  <Center w=\"100px\" bg=\"green.500\">\n    <Text>Box 1</Text>\n  </Center>\n  <Square bg=\"blue.500\" size=\"150px\">\n    <Text>Box 2</Text>\n  </Square>\n  <Box flex=\"1\" bg=\"tomato\">\n    <Text>Box 3</Text>\n  </Box>\n</Flex>\n`)),mdx(\"h3\",n({},{id:\"using-the-spacer\"}),\"Using the Spacer\"),mdx(\"p\",null,\"As an alternative to \",mdx(\"inlineCode\",{parentName:\"p\"},\"Stack\"),\", you can combine \",mdx(\"inlineCode\",{parentName:\"p\"},\"Flex\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"Spacer\"),` to create\nstackable and responsive layouts.`),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\"}),`<Flex>\n  <Box p=\"4\" bg=\"red.400\">\n    Box 1\n  </Box>\n  <Spacer />\n  <Box p=\"4\" bg=\"green.400\">\n    Box 2\n  </Box>\n</Flex>\n`)),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-tsx\"}),`<Flex>\n  <Box p=\"4\" bg=\"red.400\">\n    Box 1\n  </Box>\n  <Spacer />\n  <Box p=\"4\" bg=\"green.400\">\n    Box 2\n  </Box>\n</Flex>\n`)),mdx(\"h3\",n({},{id:\"flex-and-spacer-vs-grid-vs-stack\"}),\"Flex and Spacer vs Grid vs Stack\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"Flex\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"Spacer\"),\" components, \",mdx(\"inlineCode\",{parentName:\"p\"},\"Grid\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"HStack\"),` treat children of\ndifferent widths differently.`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"In \",mdx(\"inlineCode\",{parentName:\"li\"},\"HStack\"),`, the children will have equal spacing between them but they won't\nspan the entire width of the container.`),mdx(\"li\",{parentName:\"ul\"},\"In \",mdx(\"inlineCode\",{parentName:\"li\"},\"Grid\"),`, the starting points of the children will be equally spaced but the\ngaps between them will not be equal.`),mdx(\"li\",{parentName:\"ul\"},\"With \",mdx(\"inlineCode\",{parentName:\"li\"},\"Flex\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"Spacer\"),`, the children will span the entire width of the\ncontainer and also have equal spacing between them.`)),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\"}),`<Box>\n  <Text>Flex and Spacer: Full width, equal Spacing</Text>\n  <Flex>\n    <Box w=\"70px\" h=\"10\" bg=\"red.500\" />\n    <Spacer />\n    <Box w=\"170px\" h=\"10\" bg=\"red.500\" />\n    <Spacer />\n    <Box w=\"180px\" h=\"10\" bg=\"red.500\" />\n  </Flex>\n\n  <Text>\n    Grid: The children start at the beginning, the 1/3 mark and 2/3 mark\n  </Text>\n  <Grid templateColumns=\"repeat(3, 1fr)\" gap={6}>\n    <Box w=\"70px\" h=\"10\" bg=\"blue.500\" />\n    <Box w=\"170px\" h=\"10\" bg=\"blue.500\" />\n    <Box w=\"180px\" h=\"10\" bg=\"blue.500\" />\n  </Grid>\n\n  <Text>\n    HStack: The children have equal spacing but don't span the whole container\n  </Text>\n  <HStack spacing=\"24px\">\n    <Box w=\"70px\" h=\"10\" bg=\"brand.500\" />\n    <Box w=\"170px\" h=\"10\" bg=\"brand.500\" />\n    <Box w=\"180px\" h=\"10\" bg=\"brand.500\" />\n  </HStack>\n</Box>\n`)),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-tsx\"}),`<Box>\n  <Text>Flex and Spacer: Full width, equal Spacing</Text>\n  <Flex>\n    <Box w=\"70px\" h=\"10\" bg=\"red.500\" />\n    <Spacer />\n    <Box w=\"170px\" h=\"10\" bg=\"red.500\" />\n    <Spacer />\n    <Box w=\"180px\" h=\"10\" bg=\"red.500\" />\n  </Flex>\n\n  <Text>\n    Grid: The children start at the beginning, the 1/3 mark and 2/3 mark\n  </Text>\n  <Grid templateColumns=\"repeat(3, 1fr)\" gap={6}>\n    <Box w=\"70px\" h=\"10\" bg=\"blue.500\" />\n    <Box w=\"170px\" h=\"10\" bg=\"blue.500\" />\n    <Box w=\"180px\" h=\"10\" bg=\"blue.500\" />\n  </Grid>\n\n  <Text>\n    HStack: The children have equal spacing but don't span the whole container\n  </Text>\n  <HStack spacing=\"24px\">\n    <Box w=\"70px\" h=\"10\" bg=\"brand.500\" />\n    <Box w=\"170px\" h=\"10\" bg=\"brand.500\" />\n    <Box w=\"180px\" h=\"10\" bg=\"brand.500\" />\n  </HStack>\n</Box>\n`)),mdx(\"p\",null,\"A good use case for \",mdx(\"inlineCode\",{parentName:\"p\"},\"Spacer\"),` is to create a navbar with a signup/login button\naligned to the right.`),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-jsx\"}),`<Flex>\n  <Box p=\"2\">\n    <Heading size=\"md\">Horizon UI Dashboard</Heading>\n  </Box>\n  <Spacer />\n  <Box>\n    <Button colorScheme=\"brand\" mr=\"4\">\n      Sign Up\n    </Button>\n    <Button colorScheme=\"brand\">Log in</Button>\n  </Box>\n</Flex>\n`)),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-tsx\"}),`<Flex>\n  <Box p=\"2\">\n    <Heading size=\"md\">Horizon UI Dashboard</Heading>\n  </Box>\n  <Spacer />\n  <Box>\n    <Button colorScheme=\"brand\" mr=\"4\">\n      Sign Up\n    </Button>\n    <Button colorScheme=\"brand\">Log in</Button>\n  </Box>\n</Flex>\n`)),mdx(\"h2\",n({},{id:\"props\"}),\"Props\"),mdx(PropsTable,{of:\"Flex\",mdxType:\"PropsTable\"}))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Chakra UI Flex - Horizon UI","package":"@chakra-ui/layout","description":"Flex is Box with display set to flex and comes with helpful style shorthand. It renders a `div` element."}},"frontMatter":{"excerpt":"Flex is Box with display: flex","readTimeMinutes":3,"mdxContent":"---\ntitle: Chakra UI Flex - Horizon UI\npackage: \"@chakra-ui/layout\"\ndescription:\n  Flex is Box with display set to flex and comes with helpful style shorthand.\n  It renders a `div` element.\n---\n\nFlex is [Box](/docs-horizon-ui-dashboard/docs/layout/box) with `display: flex`\nand comes with helpful style shorthand. It renders a `div` element.\n\n## Import\n\n```tsx\nimport { Flex, Spacer } from \"@chakra-ui/react\"\n```\n\n- **Flex:** A `Box` with `display: flex`.\n- **Spacer:** Creates an adjustable, empty space that can be used to tune the\n  spacing between child elements within `Flex`.\n\n## Usage\n\nUsing the Flex components, here are some helpful shorthand props:\n\n- `flexDirection` is `direction`\n- `flexWrap` is `wrap`\n- `flexBasis` is `basis`\n- `flexGrow` is `grow`\n- `flexShrink` is `shrink`\n- `alignItems` is `align`\n- `justifyContent` is `justify`\n\nWhile you can pass the verbose props, using the shorthand can save you some\ntime.\n\n```jsx\n<Flex color=\"white\">\n  <Center w=\"100px\" bg=\"green.500\">\n    <Text>Box 1</Text>\n  </Center>\n  <Square bg=\"blue.500\" size=\"150px\">\n    <Text>Box 2</Text>\n  </Square>\n  <Box flex=\"1\" bg=\"tomato\">\n    <Text>Box 3</Text>\n  </Box>\n</Flex>\n```\n\n```tsx\n<Flex color=\"white\">\n  <Center w=\"100px\" bg=\"green.500\">\n    <Text>Box 1</Text>\n  </Center>\n  <Square bg=\"blue.500\" size=\"150px\">\n    <Text>Box 2</Text>\n  </Square>\n  <Box flex=\"1\" bg=\"tomato\">\n    <Text>Box 3</Text>\n  </Box>\n</Flex>\n```\n\n### Using the Spacer\n\nAs an alternative to `Stack`, you can combine `Flex` and `Spacer` to create\nstackable and responsive layouts.\n\n```jsx\n<Flex>\n  <Box p=\"4\" bg=\"red.400\">\n    Box 1\n  </Box>\n  <Spacer />\n  <Box p=\"4\" bg=\"green.400\">\n    Box 2\n  </Box>\n</Flex>\n```\n\n```tsx\n<Flex>\n  <Box p=\"4\" bg=\"red.400\">\n    Box 1\n  </Box>\n  <Spacer />\n  <Box p=\"4\" bg=\"green.400\">\n    Box 2\n  </Box>\n</Flex>\n```\n\n### Flex and Spacer vs Grid vs Stack\n\nThe `Flex` and `Spacer` components, `Grid` and `HStack` treat children of\ndifferent widths differently.\n\n- In `HStack`, the children will have equal spacing between them but they won't\n  span the entire width of the container.\n- In `Grid`, the starting points of the children will be equally spaced but the\n  gaps between them will not be equal.\n- With `Flex` and `Spacer`, the children will span the entire width of the\n  container and also have equal spacing between them.\n\n```jsx\n<Box>\n  <Text>Flex and Spacer: Full width, equal Spacing</Text>\n  <Flex>\n    <Box w=\"70px\" h=\"10\" bg=\"red.500\" />\n    <Spacer />\n    <Box w=\"170px\" h=\"10\" bg=\"red.500\" />\n    <Spacer />\n    <Box w=\"180px\" h=\"10\" bg=\"red.500\" />\n  </Flex>\n\n  <Text>\n    Grid: The children start at the beginning, the 1/3 mark and 2/3 mark\n  </Text>\n  <Grid templateColumns=\"repeat(3, 1fr)\" gap={6}>\n    <Box w=\"70px\" h=\"10\" bg=\"blue.500\" />\n    <Box w=\"170px\" h=\"10\" bg=\"blue.500\" />\n    <Box w=\"180px\" h=\"10\" bg=\"blue.500\" />\n  </Grid>\n\n  <Text>\n    HStack: The children have equal spacing but don't span the whole container\n  </Text>\n  <HStack spacing=\"24px\">\n    <Box w=\"70px\" h=\"10\" bg=\"brand.500\" />\n    <Box w=\"170px\" h=\"10\" bg=\"brand.500\" />\n    <Box w=\"180px\" h=\"10\" bg=\"brand.500\" />\n  </HStack>\n</Box>\n```\n\n```tsx\n<Box>\n  <Text>Flex and Spacer: Full width, equal Spacing</Text>\n  <Flex>\n    <Box w=\"70px\" h=\"10\" bg=\"red.500\" />\n    <Spacer />\n    <Box w=\"170px\" h=\"10\" bg=\"red.500\" />\n    <Spacer />\n    <Box w=\"180px\" h=\"10\" bg=\"red.500\" />\n  </Flex>\n\n  <Text>\n    Grid: The children start at the beginning, the 1/3 mark and 2/3 mark\n  </Text>\n  <Grid templateColumns=\"repeat(3, 1fr)\" gap={6}>\n    <Box w=\"70px\" h=\"10\" bg=\"blue.500\" />\n    <Box w=\"170px\" h=\"10\" bg=\"blue.500\" />\n    <Box w=\"180px\" h=\"10\" bg=\"blue.500\" />\n  </Grid>\n\n  <Text>\n    HStack: The children have equal spacing but don't span the whole container\n  </Text>\n  <HStack spacing=\"24px\">\n    <Box w=\"70px\" h=\"10\" bg=\"brand.500\" />\n    <Box w=\"170px\" h=\"10\" bg=\"brand.500\" />\n    <Box w=\"180px\" h=\"10\" bg=\"brand.500\" />\n  </HStack>\n</Box>\n```\n\nA good use case for `Spacer` is to create a navbar with a signup/login button\naligned to the right.\n\n```jsx\n<Flex>\n  <Box p=\"2\">\n    <Heading size=\"md\">Horizon UI Dashboard</Heading>\n  </Box>\n  <Spacer />\n  <Box>\n    <Button colorScheme=\"brand\" mr=\"4\">\n      Sign Up\n    </Button>\n    <Button colorScheme=\"brand\">Log in</Button>\n  </Box>\n</Flex>\n```\n\n```tsx\n<Flex>\n  <Box p=\"2\">\n    <Heading size=\"md\">Horizon UI Dashboard</Heading>\n  </Box>\n  <Spacer />\n  <Box>\n    <Button colorScheme=\"brand\" mr=\"4\">\n      Sign Up\n    </Button>\n    <Button colorScheme=\"brand\">Log in</Button>\n  </Box>\n</Flex>\n```\n\n## Props\n\n<PropsTable of=\"Flex\" />\n","title":"Chakra UI Flex - Horizon UI","package":"@chakra-ui/layout","description":"Flex is Box with display set to flex and comes with helpful style shorthand. It renders a `div` element.","slug":"/docs/layout/flex","lastEdited":{"date":"April 02, 2022","author":"Simmmple"},"headings":[{"text":"Import","id":"import","level":"h2"},{"text":"Usage","id":"usage","level":"h2"},{"text":"Using the Spacer","id":"using-the-spacer","level":"h3"},{"text":"Flex and Spacer vs Grid vs Stack","id":"flex-and-spacer-vs-grid-vs-stack","level":"h3"},{"text":"Props","id":"props","level":"h2"}],"editUrl":"https://github.com/simmmple-web/horizon-ui-dashboard/edit/main/website/pages/docs/layout/flex.mdx","author":null,"tags":[]},"_superjson":{"values":{"frontMatter.author":["undefined"]}}},"__N_SSG":true}
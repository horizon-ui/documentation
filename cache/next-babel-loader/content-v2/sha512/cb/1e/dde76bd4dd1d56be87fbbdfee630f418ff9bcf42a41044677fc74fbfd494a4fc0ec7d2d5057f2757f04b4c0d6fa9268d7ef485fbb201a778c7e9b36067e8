{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as Chakra from \"@chakra-ui/react\";\nimport { ColorPalette, ColorPalettes, ColorWrapper } from \"components/color-palette\";\nimport { Anchor } from \"components/mdx-components/anchor\";\nimport { InlineCode } from \"components/mdx-components/inline-code\";\nimport { LinkedHeading } from \"components/mdx-components/linked-heading\";\nimport { Pre } from \"components/mdx-components/pre\";\nimport { Table, TData, THead } from \"components/mdx-components/table\";\nimport { VideoPlayer } from \"components/mdx-components/video-player\";\nimport * as React from \"react\";\nimport PropsTable from \"../props-table\";\nimport CarbonAd from \"./carbon-ad\";\nimport CodeBlock from \"./codeblock/codeblock\";\nimport ComponentLinks from \"./component-links\";\nimport IconsList from \"./icons-list\";\nvar Alert = Chakra.Alert,\n    Box = Chakra.Box,\n    chakra = Chakra.chakra,\n    Kbd = Chakra.Kbd;\nexport var MDXComponents = _objectSpread(_objectSpread({}, Chakra), {}, {\n  h1: function h1(props) {\n    return __jsx(chakra.h1, _extends({\n      apply: \"mdx.h1\"\n    }, props));\n  },\n  h2: function h2(props) {\n    return __jsx(LinkedHeading, _extends({\n      apply: \"mdx.h2\"\n    }, props));\n  },\n  h3: function h3(props) {\n    return __jsx(LinkedHeading, _extends({\n      as: \"h3\",\n      apply: \"mdx.h3\"\n    }, props));\n  },\n  h4: function h4(props) {\n    return __jsx(LinkedHeading, _extends({\n      as: \"h4\",\n      apply: \"mdx.h4\"\n    }, props));\n  },\n  hr: function hr(props) {\n    return __jsx(chakra.hr, _extends({\n      apply: \"mdx.hr\"\n    }, props));\n  },\n  strong: function strong(props) {\n    return __jsx(Box, _extends({\n      as: \"strong\",\n      fontWeight: \"semibold\"\n    }, props));\n  },\n  inlineCode: InlineCode,\n  code: CodeBlock,\n  pre: Pre,\n  kbd: Kbd,\n  br: function br(_ref) {\n    var reset = _ref.reset,\n        props = _objectWithoutProperties(_ref, [\"reset\"]);\n\n    return __jsx(Box, _extends({\n      as: reset ? \"br\" : undefined,\n      height: reset ? undefined : \"24px\"\n    }, props));\n  },\n  table: Table,\n  th: THead,\n  td: TData,\n  a: Anchor,\n  p: function p(props) {\n    return __jsx(chakra.p, _extends({\n      apply: \"mdx.p\"\n    }, props));\n  },\n  ul: function ul(props) {\n    return __jsx(chakra.ul, _extends({\n      apply: \"mdx.ul\"\n    }, props));\n  },\n  ol: function ol(props) {\n    return __jsx(chakra.ol, _extends({\n      apply: \"mdx.ul\"\n    }, props));\n  },\n  li: function li(props) {\n    return __jsx(chakra.li, _extends({\n      pb: \"4px\"\n    }, props));\n  },\n  blockquote: function blockquote(props) {\n    return __jsx(Alert, _extends({\n      mt: \"4\",\n      role: \"none\",\n      status: \"warning\",\n      variant: \"left-accent\",\n      as: \"blockquote\",\n      rounded: \"4px\",\n      my: \"1.5rem\"\n    }, props));\n  },\n  \"carbon-ad\": CarbonAd,\n  ComponentLinks: ComponentLinks,\n  IconsList: IconsList,\n  PropsTable: PropsTable,\n  VideoPlayer: VideoPlayer,\n  ColorPalette: ColorPalette,\n  ColorPalettes: ColorPalettes,\n  ColorWrapper: ColorWrapper\n});","map":null,"metadata":{},"sourceType":"module"}
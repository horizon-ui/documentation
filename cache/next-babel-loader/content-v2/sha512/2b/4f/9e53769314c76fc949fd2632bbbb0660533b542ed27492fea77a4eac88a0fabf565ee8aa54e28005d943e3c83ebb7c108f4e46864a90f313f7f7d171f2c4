{"ast":null,"code":"var _jsxFileName = \"/Users/andreifredy/Desktop/docs-horizon-ui/website/src/utils/convert-backticks-to-inline-code.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { isObject } from \"@chakra-ui/utils\";\nimport { MDXComponents } from \"components/mdx-components\";\n/**\n * Replace the code blocks wrapped in backticks\n * with inline code blocks.\n */\n\nfunction toInlineCode(input) {\n  return input.split(/(`\\w+`)/).map(chunk => chunk.startsWith(\"`\") && chunk.endsWith(\"`\") ? __jsx(MDXComponents.inlineCode, {\n    key: chunk,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, chunk.slice(1, -1)) : chunk);\n}\n\nexport function convertBackticksToInlineCode(input) {\n  if (!input) return \"\";\n  return isObject(input) ? input : toInlineCode(input);\n}","map":{"version":3,"sources":["/Users/andreifredy/Desktop/docs-horizon-ui/website/src/utils/convert-backticks-to-inline-code.tsx"],"names":["isObject","MDXComponents","toInlineCode","input","split","map","chunk","startsWith","endsWith","slice","convertBackticksToInlineCode"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SAASC,aAAT,QAA8B,2BAA9B;AAEA;AACA;AACA;AACA;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAAqC;AACnC,SAAOA,KAAK,CACTC,KADI,CACE,SADF,EAEJC,GAFI,CAECC,KAAD,IACHA,KAAK,CAACC,UAAN,CAAiB,GAAjB,KAAyBD,KAAK,CAACE,QAAN,CAAe,GAAf,CAAzB,GACE,MAAC,aAAD,CAAe,UAAf;AAA0B,IAAA,GAAG,EAAEF,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CADH,CADF,GAKEH,KARC,CAAP;AAWD;;AAED,OAAO,SAASI,4BAAT,CAAsCP,KAAtC,EAAsD;AAC3D,MAAI,CAACA,KAAL,EAAY,OAAO,EAAP;AACZ,SAAOH,QAAQ,CAACG,KAAD,CAAR,GAAkBA,KAAlB,GAA0BD,YAAY,CAACC,KAAD,CAA7C;AACD","sourcesContent":["import { isObject } from \"@chakra-ui/utils\"\nimport { MDXComponents } from \"components/mdx-components\"\n\n/**\n * Replace the code blocks wrapped in backticks\n * with inline code blocks.\n */\n\nfunction toInlineCode(input: string) {\n  return input\n    .split(/(`\\w+`)/)\n    .map((chunk) =>\n      chunk.startsWith(\"`\") && chunk.endsWith(\"`\") ? (\n        <MDXComponents.inlineCode key={chunk}>\n          {chunk.slice(1, -1)}\n        </MDXComponents.inlineCode>\n      ) : (\n        chunk\n      ),\n    )\n}\n\nexport function convertBackticksToInlineCode(input?: string) {\n  if (!input) return \"\"\n  return isObject(input) ? input : toInlineCode(input)\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andreifredy/Desktop/docs-horizon-ui/website/src/components/mdx-components/codeblock/highlight.tsx\";\nvar __jsx = React.createElement;\nimport { chakra } from \"@chakra-ui/react\";\nimport BaseHighlight, { defaultProps } from \"prism-react-renderer\";\nimport React from \"react\";\nimport { liveEditorStyle } from \"./styles\";\nvar RE = /{([\\d,-]+)}/;\n\nvar calculateLinesToHighlight = function calculateLinesToHighlight(meta) {\n  if (!RE.test(meta)) {\n    return function () {\n      return false;\n    };\n  }\n\n  var lineNumbers = RE.exec(meta)[1].split(\",\").map(function (v) {\n    return v.split(\"-\").map(function (x) {\n      return parseInt(x, 10);\n    });\n  });\n  return function (index) {\n    var lineNumber = index + 1;\n    var inRange = lineNumbers.some(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          start = _ref2[0],\n          end = _ref2[1];\n\n      return end ? lineNumber >= start && lineNumber <= end : lineNumber === start;\n    });\n    return inRange;\n  };\n};\n\nfunction Highlight(_ref3) {\n  var _this = this;\n\n  var codeString = _ref3.codeString,\n      language = _ref3.language,\n      metastring = _ref3.metastring,\n      showLines = _ref3.showLines,\n      props = _objectWithoutProperties(_ref3, [\"codeString\", \"language\", \"metastring\", \"showLines\"]);\n\n  var shouldHighlightLine = calculateLinesToHighlight(metastring);\n  return __jsx(BaseHighlight, _extends({}, defaultProps, {\n    code: codeString,\n    language: language\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }), function (_ref4) {\n    var className = _ref4.className,\n        style = _ref4.style,\n        tokens = _ref4.tokens,\n        getLineProps = _ref4.getLineProps,\n        getTokenProps = _ref4.getTokenProps;\n    return __jsx(\"div\", {\n      style: liveEditorStyle,\n      \"data-language\": language,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, __jsx(\"pre\", {\n      className: className,\n      style: style,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, tokens.map(function (line, i) {\n      var lineProps = getLineProps({\n        line: line,\n        key: i\n      });\n      return __jsx(chakra.div, _extends({\n        px: \"5\",\n        bg: shouldHighlightLine(i) ? \"whiteAlpha.200\" : undefined\n      }, lineProps, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }\n      }), showLines && __jsx(chakra.span, {\n        opacity: 0.3,\n        mr: \"6\",\n        fontSize: \"xs\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }\n      }, i + 1), line.map(function (token, key) {\n        return __jsx(\"span\", _extends({}, getTokenProps({\n          token: token,\n          key: key\n        }), {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }\n        }));\n      }));\n    })));\n  });\n}\n\n_c = Highlight;\nexport default Highlight;\n\nvar _c;\n\n$RefreshReg$(_c, \"Highlight\");","map":{"version":3,"sources":["/Users/andreifredy/Desktop/docs-horizon-ui/website/src/components/mdx-components/codeblock/highlight.tsx"],"names":["chakra","BaseHighlight","defaultProps","React","liveEditorStyle","RE","calculateLinesToHighlight","meta","test","lineNumbers","exec","split","map","v","x","parseInt","index","lineNumber","inRange","some","start","end","Highlight","codeString","language","metastring","showLines","props","shouldHighlightLine","className","style","tokens","getLineProps","getTokenProps","line","i","lineProps","key","undefined","token"],"mappings":"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","sourcesContent":["import { chakra } from \"@chakra-ui/react\"\nimport BaseHighlight, {\n  defaultProps,\n  Language,\n  PrismTheme,\n} from \"prism-react-renderer\"\nimport React from \"react\"\nimport { liveEditorStyle } from \"./styles\"\n\nconst RE = /{([\\d,-]+)}/\n\nconst calculateLinesToHighlight = (meta: string) => {\n  if (!RE.test(meta)) {\n    return () => false\n  }\n  const lineNumbers = RE.exec(meta)[1]\n    .split(`,`)\n    .map((v) => v.split(`-`).map((x) => parseInt(x, 10)))\n\n  return (index: number) => {\n    const lineNumber = index + 1\n    const inRange = lineNumbers.some(([start, end]) =>\n      end ? lineNumber >= start && lineNumber <= end : lineNumber === start,\n    )\n    return inRange\n  }\n}\n\ninterface HighlightProps {\n  codeString: string\n  language: Language\n  theme: PrismTheme\n  metastring?: string\n  showLines?: boolean\n}\n\nfunction Highlight({\n  codeString,\n  language,\n  metastring,\n  showLines,\n  ...props\n}: HighlightProps) {\n  const shouldHighlightLine = calculateLinesToHighlight(metastring)\n\n  return (\n    <BaseHighlight\n      {...defaultProps}\n      code={codeString}\n      language={language}\n      {...props}\n    >\n      {({ className, style, tokens, getLineProps, getTokenProps }) => (\n        <div style={liveEditorStyle} data-language={language}>\n          <pre className={className} style={style}>\n            {tokens.map((line, i) => {\n              const lineProps = getLineProps({ line, key: i })\n              return (\n                <chakra.div\n                  px=\"5\"\n                  bg={shouldHighlightLine(i) ? \"whiteAlpha.200\" : undefined}\n                  {...lineProps}\n                >\n                  {showLines && (\n                    <chakra.span opacity={0.3} mr=\"6\" fontSize=\"xs\">\n                      {i + 1}\n                    </chakra.span>\n                  )}\n                  {line.map((token, key) => (\n                    <span {...getTokenProps({ token, key })} />\n                  ))}\n                </chakra.div>\n              )\n            })}\n          </pre>\n        </div>\n      )}\n    </BaseHighlight>\n  )\n}\n\nexport default Highlight\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Grid, useTheme } from \"@chakra-ui/react\";\nimport React from \"react\";\nexport var ColorPalette = function ColorPalette(props) {\n  var color = props.color,\n      name = props.name,\n      rest = _objectWithoutProperties(props, [\"color\", \"name\"]);\n\n  var theme = useTheme();\n  var colorCode = color;\n\n  var _color$split = color.split(\".\"),\n      _color$split2 = _slicedToArray(_color$split, 2),\n      shade = _color$split2[0],\n      hue = _color$split2[1];\n\n  if (shade && hue) {\n    colorCode = theme.colors[shade][hue];\n  }\n\n  if (color in theme.colors && typeof theme.colors[color] === \"string\") {\n    colorCode = theme.colors[color];\n  }\n\n  return __jsx(Flex, _extends({\n    align: \"center\"\n  }, rest), __jsx(Box, {\n    borderRadius: \"md\",\n    boxSize: \"3rem\",\n    boxShadow: \"inner\",\n    mr: 3,\n    bg: color\n  }), __jsx(Box, {\n    fontSize: \"sm\"\n  }, __jsx(Box, {\n    fontWeight: \"semibold\",\n    textTransform: \"capitalize\"\n  }, name), __jsx(Box, {\n    textTransform: \"uppercase\"\n  }, colorCode)));\n};\nexport var ColorPalettes = function ColorPalettes(props) {\n  var color = props.color;\n  var theme = useTheme();\n  var keys = Object.keys(theme.colors[color]);\n  return keys.map(function (item) {\n    return __jsx(ColorPalette, {\n      key: \"\".concat(color, \".\").concat(item),\n      color: \"\".concat(color, \".\").concat(item),\n      name: \"\".concat(color, \" \").concat(item)\n    });\n  });\n};\nexport var ColorWrapper = function ColorWrapper(props) {\n  return __jsx(Grid, _extends({\n    mt: 7,\n    gap: 6,\n    templateColumns: \"repeat( auto-fit, minmax(200px, 1fr) )\"\n  }, props));\n};","map":null,"metadata":{},"sourceType":"module"}
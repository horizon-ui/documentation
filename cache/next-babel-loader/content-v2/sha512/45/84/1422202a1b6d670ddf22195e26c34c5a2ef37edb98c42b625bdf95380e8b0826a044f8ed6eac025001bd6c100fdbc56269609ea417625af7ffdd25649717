{"ast":null,"code":"var _jsxFileName = \"/Users/vladmihalache/Documents/GitHub/documentation/website/src/components/sidebar/sidebar.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport NextLink from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport * as React from \"react\";\nimport sortBy from \"lodash/sortBy\";\nimport { Badge, Box, Center, chakra, Flex, List, ListItem, Stack, useColorModeValue } from \"@chakra-ui/react\";\nimport { convertBackticksToInlineCode } from \"utils/convert-backticks-to-inline-code\";\nimport SidebarCategory from \"./sidebar-category\";\nimport SidebarLink from \"./sidebar-link\";\nexport function SidebarContent(props) {\n  const {\n    routes,\n    pathname,\n    contentRef\n  } = props;\n  return __jsx(React.Fragment, null, routes.map((lvl1, idx) => {\n    return __jsx(React.Fragment, {\n      key: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }, lvl1.heading && __jsx(chakra.h4, {\n      fontSize: \"sm\",\n      fontWeight: \"bold\",\n      my: \"1.25rem\",\n      textTransform: \"uppercase\",\n      letterSpacing: \"wider\",\n      color: useColorModeValue(\"gray.700\", \"inherit\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }\n    }, lvl1.title), lvl1.routes.map((lvl2, index) => {\n      if (!lvl2.routes) {\n        return __jsx(SidebarLink, {\n          ml: \"-3\",\n          mt: \"2\",\n          key: lvl2.path,\n          href: lvl2.path,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 19\n          }\n        }, lvl2.title);\n      }\n\n      const selected = pathname.startsWith(lvl2.path);\n      const opened = selected || lvl2.open;\n      const sortedRoutes = !!lvl2.sort ? sortBy(lvl2.routes, i => i.title) : lvl2.routes;\n      return __jsx(SidebarCategory, {\n        contentRef: contentRef,\n        key: lvl2.path + index,\n        title: lvl2.title,\n        selected: selected,\n        opened: opened,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }\n      }, __jsx(Stack, {\n        as: \"ul\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 19\n        }\n      }, sortedRoutes.map(lvl3 => __jsx(SidebarLink, {\n        as: \"li\",\n        key: lvl3.path,\n        href: lvl3.path,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 23\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }\n      }, convertBackticksToInlineCode(lvl3.title)), lvl3.new && __jsx(Badge, {\n        ml: \"2\",\n        lineHeight: \"tall\",\n        fontSize: \"10px\",\n        variant: \"solid\",\n        color: \"white\",\n        borderRadius: \"4px\",\n        bg: useColorModeValue(\"brand.500\", \"brand.400\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 27\n        }\n      }, \"PRO\")))));\n    }));\n  }));\n}\n\nconst MainNavLink = ({\n  href,\n  icon,\n  children\n}) => {\n  const {\n    pathname\n  } = useRouter();\n  const [, group] = href.split(\"/\");\n  const active = pathname.includes(group);\n  const linkColor = useColorModeValue(\"gray.900\", \"whiteAlpha.900\");\n  return __jsx(NextLink, {\n    href: href,\n    passHref: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    display: \"none\",\n    as: \"a\",\n    align: \"center\",\n    fontSize: \"sm\",\n    fontWeight: \"semibold\",\n    transitionProperty: \"colors\",\n    transitionDuration: \"200ms\",\n    color: active ? linkColor : \"gray.500\",\n    _hover: {\n      color: linkColor\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, __jsx(Center, {\n    w: \"6\",\n    h: \"6\",\n    bg: \"brand.400\",\n    rounded: \"base\",\n    mr: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, icon), children));\n};\n\nconst mainNavLinks = [{\n  href: \"/docs/introduction\",\n  label: \"Docs\",\n  icon: \" \"\n}];\n\nconst MainNavLinkGroup = props => {\n  return __jsx(List, _extends({\n    spacing: \"4\",\n    styleType: \"none\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }), mainNavLinks.map(item => __jsx(ListItem, {\n    key: item.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, __jsx(MainNavLink, {\n    icon: item.icon,\n    href: item.href,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, item.label))));\n};\n\nconst Sidebar = ({\n  routes\n}) => {\n  const {\n    pathname\n  } = useRouter();\n  const ref = React.useRef(null);\n  return __jsx(Box, {\n    ref: ref,\n    as: \"nav\",\n    \"aria-label\": \"Main Navigation\",\n    pos: \"sticky\",\n    sx: {\n      overscrollBehavior: \"contain\"\n    },\n    top: \"6.5rem\",\n    w: \"280px\",\n    h: \"calc(100vh - 8.125rem)\",\n    pr: \"8\",\n    pb: \"6\",\n    pl: \"6\",\n    pt: \"4\",\n    overflowY: \"auto\",\n    className: \"sidebar-content\",\n    flexShrink: 0,\n    display: {\n      base: \"none\",\n      md: \"block\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, __jsx(MainNavLinkGroup, {\n    mb: \"10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }), __jsx(SidebarContent, {\n    routes: routes,\n    pathname: pathname,\n    contentRef: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Sidebar;","map":{"version":3,"sources":["/Users/vladmihalache/Documents/GitHub/documentation/website/src/components/sidebar/sidebar.tsx"],"names":["NextLink","useRouter","React","sortBy","Badge","Box","Center","chakra","Flex","List","ListItem","Stack","useColorModeValue","convertBackticksToInlineCode","SidebarCategory","SidebarLink","SidebarContent","props","routes","pathname","contentRef","map","lvl1","idx","heading","title","lvl2","index","path","selected","startsWith","opened","open","sortedRoutes","sort","i","lvl3","new","MainNavLink","href","icon","children","group","split","active","includes","linkColor","color","mainNavLinks","label","MainNavLinkGroup","item","Sidebar","ref","useRef","overscrollBehavior","base","md"],"mappings":"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","sourcesContent":["import NextLink from \"next/link\"\nimport { useRouter } from \"next/router\"\nimport * as React from \"react\"\nimport sortBy from \"lodash/sortBy\"\nimport {\n  Badge,\n  Box,\n  Center,\n  chakra,\n  Flex,\n  List,\n  ListItem,\n  ListProps,\n  Stack,\n  useColorModeValue,\n} from \"@chakra-ui/react\"\nimport { Routes } from \"utils/get-route-context\"\nimport { convertBackticksToInlineCode } from \"utils/convert-backticks-to-inline-code\"\nimport SidebarCategory from \"./sidebar-category\"\nimport SidebarLink from \"./sidebar-link\"\n\nexport type SidebarContentProps = Routes & {\n  pathname?: string\n  contentRef?: any\n}\n\nexport function SidebarContent(props: SidebarContentProps) {\n  const { routes, pathname, contentRef } = props\n  return (\n    <>\n      {routes.map((lvl1, idx) => {\n        return (\n          <React.Fragment key={idx}>\n            {lvl1.heading && (\n              <chakra.h4\n                fontSize=\"sm\"\n                fontWeight=\"bold\"\n                my=\"1.25rem\"\n                textTransform=\"uppercase\"\n                letterSpacing=\"wider\"\n                color={useColorModeValue(\"gray.700\", \"inherit\")}\n              >\n                {lvl1.title}\n              </chakra.h4>\n            )}\n\n            {lvl1.routes.map((lvl2, index) => {\n              if (!lvl2.routes) {\n                return (\n                  <SidebarLink ml=\"-3\" mt=\"2\" key={lvl2.path} href={lvl2.path}>\n                    {lvl2.title}\n                  </SidebarLink>\n                )\n              }\n\n              const selected = pathname.startsWith(lvl2.path)\n              const opened = selected || lvl2.open\n\n              const sortedRoutes = !!lvl2.sort\n                ? sortBy(lvl2.routes, (i) => i.title)\n                : lvl2.routes\n\n              return (\n                <SidebarCategory\n                  contentRef={contentRef}\n                  key={lvl2.path + index}\n                  title={lvl2.title}\n                  selected={selected}\n                  opened={opened}\n                >\n                  <Stack as=\"ul\">\n                    {sortedRoutes.map((lvl3) => (\n                      <SidebarLink as=\"li\" key={lvl3.path} href={lvl3.path}>\n                        <span>{convertBackticksToInlineCode(lvl3.title)}</span>\n                        {lvl3.new && (\n                          <Badge\n                            ml=\"2\"\n                            lineHeight=\"tall\"\n                            fontSize=\"10px\"\n                            variant=\"solid\"\n                            color=\"white\"\n                            borderRadius=\"4px\"\n                            bg={useColorModeValue(\"brand.500\", \"brand.400\")}\n                          >\n                            PRO\n                          </Badge>\n                        )}\n                      </SidebarLink>\n                    ))}\n                  </Stack>\n                </SidebarCategory>\n              )\n            })}\n          </React.Fragment>\n        )\n      })}\n    </>\n  )\n}\n\nconst MainNavLink = ({ href, icon, children }) => {\n  const { pathname } = useRouter()\n  const [, group] = href.split(\"/\")\n  const active = pathname.includes(group)\n  const linkColor = useColorModeValue(\"gray.900\", \"whiteAlpha.900\")\n\n  return (\n    <NextLink href={href} passHref>\n      <Flex\n        display=\"none\"\n        as=\"a\"\n        align=\"center\"\n        fontSize=\"sm\"\n        fontWeight=\"semibold\"\n        transitionProperty=\"colors\"\n        transitionDuration=\"200ms\"\n        color={active ? linkColor : \"gray.500\"}\n        _hover={{ color: linkColor }}\n      >\n        <Center w=\"6\" h=\"6\" bg=\"brand.400\" rounded=\"base\" mr=\"3\">\n          {icon}\n        </Center>\n        {children}\n      </Flex>\n    </NextLink>\n  )\n}\n\nconst mainNavLinks = [\n  {\n    href: \"/docs/introduction\",\n    label: \"Docs\",\n    icon: \" \",\n  },\n]\n\nconst MainNavLinkGroup = (props: ListProps) => {\n  return (\n    <List spacing=\"4\" styleType=\"none\" {...props}>\n      {mainNavLinks.map((item) => (\n        <ListItem key={item.label}>\n          <MainNavLink icon={item.icon} href={item.href}>\n            {item.label}\n          </MainNavLink>\n        </ListItem>\n      ))}\n    </List>\n  )\n}\n\nconst Sidebar = ({ routes }) => {\n  const { pathname } = useRouter()\n  const ref = React.useRef<HTMLDivElement>(null)\n\n  return (\n    <Box\n      ref={ref}\n      as=\"nav\"\n      aria-label=\"Main Navigation\"\n      pos=\"sticky\"\n      sx={{\n        overscrollBehavior: \"contain\",\n      }}\n      top=\"6.5rem\"\n      w=\"280px\"\n      h=\"calc(100vh - 8.125rem)\"\n      pr=\"8\"\n      pb=\"6\"\n      pl=\"6\"\n      pt=\"4\"\n      overflowY=\"auto\"\n      className=\"sidebar-content\"\n      flexShrink={0}\n      display={{ base: \"none\", md: \"block\" }}\n    >\n      <MainNavLinkGroup mb=\"10\" />\n      <SidebarContent routes={routes} pathname={pathname} contentRef={ref} />\n    </Box>\n  )\n}\n\nexport default Sidebar\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { withSuperJSONPage as _withSuperJSONPage } from \"babel-plugin-superjson-next/tools\";\nimport { withSuperJSONProps as _withSuperJSONProps } from \"babel-plugin-superjson-next/tools\";\nvar _jsxFileName = \"/Users/vladmihalache/Documents/GitHub/documentation/website/pages/docs/[[...slug]].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { MDXRemote } from \"next-mdx-remote\";\nimport loadMDXFromPages from \"utils/load-mdx-dir\";\nimport { MDXComponents } from \"components/mdx-components\";\nimport Layout from \"layouts\";\nconst CONTENT_PATH = \"docs\";\n\nfunction Page({\n  mdxSource,\n  frontMatter\n}) {\n  return __jsx(Layout, {\n    frontMatter: frontMatter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, __jsx(MDXRemote, _extends({}, mdxSource, {\n    components: MDXComponents,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  })));\n}\n\nexport default _withSuperJSONPage(Page);\nexport async function getStaticPaths() {\n  const pages = await loadMDXFromPages(CONTENT_PATH);\n  const paths = pages.map(({\n    slug\n  }) => {\n    return {\n      params: {\n        slug: slug.slice(1) // remove the first `/`\n        .split(\"/\") // split to get an array\n        .filter(item => item !== CONTENT_PATH) // remove the CONTENT_PATH since this isnt needed in static paths\n\n      }\n    };\n  });\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport const getStaticProps = _withSuperJSONProps(async function getStaticProps({\n  params\n}) {\n  const slug = params.slug;\n  const combinedPageSlug = `/${[CONTENT_PATH, ...slug].join(\"/\")}`;\n  const pages = await loadMDXFromPages(CONTENT_PATH);\n  const page = pages.find(page => {\n    return combinedPageSlug === page.slug;\n  });\n\n  if (!page) {\n    throw new Error(`No content found for slug \"${slug.join(\"/\")}\"`);\n  }\n\n  const {\n    mdxSource\n  } = page,\n        frontMatter = _objectWithoutProperties(page, [\"mdxSource\"]);\n\n  return {\n    props: {\n      mdxSource,\n      frontMatter\n    }\n  };\n}, []);","map":{"version":3,"sources":["/Users/vladmihalache/Documents/GitHub/documentation/website/pages/docs/[[...slug]].tsx"],"names":["MDXRemote","loadMDXFromPages","MDXComponents","Layout","CONTENT_PATH","Page","mdxSource","frontMatter","getStaticPaths","pages","paths","map","slug","params","slice","split","filter","item","fallback","getStaticProps","combinedPageSlug","join","page","find","Error","props"],"mappings":";;;;;;;;;;;;AACA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,OAAOC,MAAP,MAAmB,SAAnB;AAEA,MAAMC,YAAY,GAAG,MAArB;;AAEe,SAASC,IAAT,CAAc;AAC3BC,EAAAA,SAD2B;AAE3BC,EAAAA;AAF2B,CAAd,EAGoC;AACjD,SACE,MAAC,MAAD;AAAQ,IAAA,WAAW,EAAEA,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeD,SAAf;AAA0B,IAAA,UAAU,EAAEJ,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD;;AATD,kCAAwBG,IAAxB;AAWA,OAAO,eAAeG,cAAf,GAAgC;AACrC,QAAMC,KAAK,GAAG,MAAMR,gBAAgB,CAACG,YAAD,CAApC;AACA,QAAMM,KAAK,GAAGD,KAAK,CAACE,GAAN,CAAU,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAc;AACpC,WAAO;AACLC,MAAAA,MAAM,EAAE;AACND,QAAAA,IAAI,EAAEA,IAAI,CACPE,KADG,CACG,CADH,EACM;AADN,SAEHC,KAFG,CAEG,GAFH,EAEQ;AAFR,SAGHC,MAHG,CAGKC,IAAD,IAAUA,IAAI,KAAKb,YAHvB,CADA,CAIsC;;AAJtC;AADH,KAAP;AAQD,GATa,CAAd;AAWA,SAAO;AACLM,IAAAA,KADK;AAELQ,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID;AAED,aAAsBC,cAAtB,sCAAsBA,cAAtB,CAAqC;AAAEN,EAAAA;AAAF,CAArC,EAAiD;AAC/C,QAAMD,IAAI,GAAGC,MAAM,CAACD,IAApB;AACA,QAAMQ,gBAAgB,GAAI,IAAG,CAAChB,YAAD,EAAe,GAAGQ,IAAlB,EAAwBS,IAAxB,CAA6B,GAA7B,CAAkC,EAA/D;AACA,QAAMZ,KAAK,GAAG,MAAMR,gBAAgB,CAACG,YAAD,CAApC;AAEA,QAAMkB,IAAI,GAAGb,KAAK,CAACc,IAAN,CAAYD,IAAD,IAAU;AAChC,WAAOF,gBAAgB,KAAKE,IAAI,CAACV,IAAjC;AACD,GAFY,CAAb;;AAIA,MAAI,CAACU,IAAL,EAAW;AACT,UAAM,IAAIE,KAAJ,CAAW,8BAA6BZ,IAAI,CAACS,IAAL,CAAU,GAAV,CAAe,GAAvD,CAAN;AACD;;AAED,QAAM;AAAEf,IAAAA;AAAF,MAAgCgB,IAAtC;AAAA,QAAsBf,WAAtB,4BAAsCe,IAAtC;;AAEA,SAAO;AACLG,IAAAA,KAAK,EAAE;AACLnB,MAAAA,SADK;AAELC,MAAAA;AAFK;AADF,GAAP;AAMD,CArBD","sourcesContent":["import { InferGetStaticPropsType } from \"next\"\nimport { MDXRemote } from \"next-mdx-remote\"\nimport loadMDXFromPages from \"utils/load-mdx-dir\"\nimport { MDXComponents } from \"components/mdx-components\"\nimport Layout from \"layouts\"\n\nconst CONTENT_PATH = \"docs\"\n\nexport default function Page({\n  mdxSource,\n  frontMatter,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return (\n    <Layout frontMatter={frontMatter}>\n      <MDXRemote {...mdxSource} components={MDXComponents} />\n    </Layout>\n  )\n}\n\nexport async function getStaticPaths() {\n  const pages = await loadMDXFromPages(CONTENT_PATH)\n  const paths = pages.map(({ slug }) => {\n    return {\n      params: {\n        slug: slug\n          .slice(1) // remove the first `/`\n          .split(\"/\") // split to get an array\n          .filter((item) => item !== CONTENT_PATH), // remove the CONTENT_PATH since this isnt needed in static paths\n      },\n    }\n  })\n\n  return {\n    paths,\n    fallback: false,\n  }\n}\n\nexport async function getStaticProps({ params }) {\n  const slug = params.slug\n  const combinedPageSlug = `/${[CONTENT_PATH, ...slug].join(\"/\")}`\n  const pages = await loadMDXFromPages(CONTENT_PATH)\n\n  const page = pages.find((page) => {\n    return combinedPageSlug === page.slug\n  })\n\n  if (!page) {\n    throw new Error(`No content found for slug \"${slug.join(\"/\")}\"`)\n  }\n\n  const { mdxSource, ...frontMatter } = page\n\n  return {\n    props: {\n      mdxSource,\n      frontMatter,\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
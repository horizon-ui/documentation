{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport { Box, Center, CloseButton, Flex, HStack, IconButton, useBreakpointValue, useColorModeValue, useUpdateEffect } from \"@chakra-ui/react\";\nimport { AnimatePresence, motion, useElementScroll } from \"framer-motion\";\nimport useRouteChanged from \"hooks/use-route-changed\";\nimport { getRoutes } from \"layouts/mdx\";\nimport NextLink from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport * as React from \"react\";\nimport { AiOutlineMenu } from \"react-icons/ai\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport Logo from \"./logo\";\nimport { SidebarContent } from \"./sidebar/sidebar\";\nimport DownloadButton from \"./sponsor-button\";\n\nfunction NavLink(_ref) {\n  var href = _ref.href,\n      children = _ref.children;\n\n  var _useRouter = useRouter(),\n      pathname = _useRouter.pathname;\n\n  var _href$split = href.split(\"/\"),\n      _href$split2 = _slicedToArray(_href$split, 2),\n      group = _href$split2[1];\n\n  var isActive = pathname.includes(group);\n  return __jsx(NextLink, {\n    href: href\n  }, __jsx(Center, {\n    flex: \"1\",\n    minH: \"40px\",\n    as: \"button\",\n    rounded: \"md\",\n    transition: \"0.2s all\",\n    fontWeight: isActive ? \"semibold\" : \"medium\",\n    bg: isActive ? \"brand.400\" : undefined,\n    borderWidth: isActive ? undefined : \"1px\",\n    color: isActive ? \"white\" : undefined,\n    _hover: {\n      bg: isActive ? \"brand.500\" : useColorModeValue(\"gray.100\", \"whiteAlpha.100\")\n    }\n  }, children));\n}\n\nexport function MobileNavContent(props) {\n  var isOpen = props.isOpen,\n      onClose = props.onClose;\n  var closeBtnRef = React.useRef();\n\n  var _useRouter2 = useRouter(),\n      pathname = _useRouter2.pathname;\n\n  useRouteChanged(onClose);\n  /**\n   * Scenario: Menu is open on mobile, and user resizes to desktop/tablet viewport.\n   * Result: We'll close the menu\n   */\n\n  var showOnBreakpoint = useBreakpointValue({\n    base: true,\n    lg: false\n  });\n  React.useEffect(function () {\n    if (showOnBreakpoint == false) {\n      onClose();\n    }\n  }, [showOnBreakpoint]);\n  useUpdateEffect(function () {\n    if (isOpen) {\n      requestAnimationFrame(function () {\n        var _closeBtnRef$current;\n\n        (_closeBtnRef$current = closeBtnRef.current) === null || _closeBtnRef$current === void 0 ? void 0 : _closeBtnRef$current.focus();\n      });\n    }\n  }, [isOpen]);\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      shadow = _React$useState2[0],\n      setShadow = _React$useState2[1];\n\n  return __jsx(AnimatePresence, null, isOpen && __jsx(RemoveScroll, {\n    forwardProps: true\n  }, __jsx(motion.div, {\n    transition: {\n      duration: 0.08\n    },\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    }\n  }, __jsx(Flex, {\n    direction: \"column\",\n    w: \"100%\",\n    bg: useColorModeValue(\"white\", \"gray.800\"),\n    h: \"100vh\",\n    overflow: \"auto\",\n    pos: \"absolute\",\n    top: \"0\",\n    left: \"0\",\n    zIndex: 20,\n    pb: \"8\"\n  }, __jsx(Box, null, __jsx(Flex, {\n    justify: \"space-between\",\n    px: \"6\",\n    pt: \"5\",\n    pb: \"4\"\n  }, __jsx(Logo, {\n    sx: {\n      rect: {\n        fill: \"brand.300\"\n      }\n    }\n  }), __jsx(HStack, {\n    spacing: \"5\"\n  }, __jsx(CloseButton, {\n    ref: closeBtnRef,\n    onClick: onClose\n  })))), __jsx(ScrollView, {\n    onScroll: function onScroll(scrolled) {\n      setShadow(scrolled ? \"md\" : undefined);\n    }\n  }, __jsx(Flex, {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    mb: \"20px\"\n  }, __jsx(DownloadButton, {\n    display: \"flex\",\n    w: \"fit-content\",\n    me: \"20px\"\n  }), __jsx(Box, {\n    display: {\n      base: \"flex\",\n      lg: \"none\"\n    },\n    alignItems: \"center\",\n    as: \"a\",\n    \"aria-label\": \"See Pricing\",\n    href: \"https://horizon-ui.com/#pricing\",\n    target: \"_blank\",\n    bg: useColorModeValue(\"brand.500\", \"brand.400\"),\n    px: \"24px\",\n    minH: \"48px\",\n    borderRadius: \"12px\",\n    fontSize: \"sm\",\n    color: \"white\",\n    outline: \"0\",\n    transition: \"all 0.3s\",\n    w: \"fit-content\",\n    _hover: {\n      bg: useColorModeValue(\"brand.700\", \"brand.300\")\n    },\n    _active: {\n      borderColor: \"brand.200\"\n    },\n    _focus: {\n      boxShadow: \"outline\"\n    }\n  }, __jsx(Box, {\n    as: \"strong\",\n    lineHeight: \"inherit\",\n    fontWeight: \"semibold\"\n  }, \"See Pricing\"))), __jsx(SidebarContent, {\n    pathname: pathname,\n    routes: getRoutes(pathname)\n  }))))));\n}\n\nvar ScrollView = function ScrollView(props) {\n  var onScroll = props.onScroll,\n      rest = _objectWithoutProperties(props, [\"onScroll\"]);\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      y = _React$useState4[0],\n      setY = _React$useState4[1];\n\n  var elRef = React.useRef();\n\n  var _useElementScroll = useElementScroll(elRef),\n      scrollY = _useElementScroll.scrollY;\n\n  React.useEffect(function () {\n    return scrollY.onChange(function () {\n      return setY(scrollY.get());\n    });\n  }, [scrollY]);\n  useUpdateEffect(function () {\n    onScroll === null || onScroll === void 0 ? void 0 : onScroll(y > 5 ? true : false);\n  }, [y]);\n  return __jsx(Box, _extends({\n    ref: elRef,\n    flex: \"1\",\n    id: \"routes\",\n    overflow: \"auto\",\n    px: \"6\",\n    pb: \"6\"\n  }, rest));\n};\n\nexport var MobileNavButton = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return __jsx(IconButton, _extends({\n    ref: ref,\n    display: {\n      base: \"flex\",\n      md: \"none\"\n    },\n    \"aria-label\": \"Open menu\",\n    fontSize: \"20px\",\n    color: useColorModeValue(\"gray.800\", \"inherit\"),\n    variant: \"ghost\",\n    icon: __jsx(AiOutlineMenu, null)\n  }, props));\n});","map":null,"metadata":{},"sourceType":"module"}
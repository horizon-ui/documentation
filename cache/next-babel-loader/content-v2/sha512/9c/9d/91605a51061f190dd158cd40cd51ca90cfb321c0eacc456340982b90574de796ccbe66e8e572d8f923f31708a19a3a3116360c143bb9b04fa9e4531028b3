{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport siteConfig from \"configs/site-config\";\nexport function getSeo(options = {}) {\n  const {\n    omitOpenGraphImage\n  } = options;\n  const {\n    seo\n  } = siteConfig;\n\n  const _seo$openGraph = seo.openGraph,\n        {\n    images\n  } = _seo$openGraph,\n        openGraph = _objectWithoutProperties(_seo$openGraph, [\"images\"]);\n\n  return _objectSpread(_objectSpread({}, seo), {}, {\n    openGraph: _objectSpread(_objectSpread({}, openGraph), {}, {\n      images: omitOpenGraphImage ? undefined : images\n    })\n  });\n}","map":{"version":3,"sources":["/Users/vladmihalache/Documents/GitHub/documentation/website/src/utils/seo.ts"],"names":["siteConfig","getSeo","options","omitOpenGraphImage","seo","openGraph","images","undefined"],"mappings":";;;;;;;;;;AAAA,OAAOA,UAAP,MAAuB,qBAAvB;AAMA,OAAO,SAASC,MAAT,CAAgBC,OAAsB,GAAG,EAAzC,EAA6C;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAyBD,OAA/B;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAUJ,UAAhB;;AACA,yBAAiCI,GAAG,CAACC,SAArC;AAAA,QAAM;AAAEC,IAAAA;AAAF,GAAN;AAAA,QAAmBD,SAAnB;;AAEA,yCACKD,GADL;AAEEC,IAAAA,SAAS,kCACJA,SADI;AAEPC,MAAAA,MAAM,EAAEH,kBAAkB,GAAGI,SAAH,GAAeD;AAFlC;AAFX;AAOD","sourcesContent":["import siteConfig from \"configs/site-config\"\n\ntype GetSeoOptions = {\n  omitOpenGraphImage?: boolean\n}\n\nexport function getSeo(options: GetSeoOptions = {}) {\n  const { omitOpenGraphImage } = options\n  const { seo } = siteConfig\n  const { images, ...openGraph } = seo.openGraph\n\n  return {\n    ...seo,\n    openGraph: {\n      ...openGraph,\n      images: omitOpenGraphImage ? undefined : images,\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
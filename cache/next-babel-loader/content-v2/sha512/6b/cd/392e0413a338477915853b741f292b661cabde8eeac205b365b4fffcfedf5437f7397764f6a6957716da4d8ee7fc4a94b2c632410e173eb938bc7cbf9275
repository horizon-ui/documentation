{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, chakra } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport { LiveError, LivePreview, LiveProvider } from \"react-live\";\nimport scope from \"./react-live-scope\";\nimport { liveErrorStyle } from \"./styles\";\nconst LiveCodePreview = chakra(LivePreview, {\n  baseStyle: {\n    fontFamily: \"body\",\n    mt: 5,\n    p: 3,\n    borderWidth: 1,\n    borderRadius: \"12px\"\n  }\n});\n\nconst EditableNotice = props => {\n  return __jsx(Box, _extends({\n    position: \"absolute\",\n    width: \"full\",\n    top: \"-1.25em\",\n    roundedTop: \"8px\",\n    bg: \"#011627\",\n    py: \"2\",\n    zIndex: \"0\",\n    letterSpacing: \"wide\",\n    color: \"gray.400\",\n    fontSize: \"xs\",\n    fontWeight: \"semibold\",\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    pointerEvents: \"none\"\n  }, props), \"Editable Example\");\n};\n\nfunction ReactLiveBlock(_ref) {\n  let {\n    editable,\n    rawCode\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"editable\", \"rawCode\"]);\n\n  const {\n    0: editorCode,\n    1: setEditorCode\n  } = useState(rawCode.trim());\n\n  const onChange = newCode => setEditorCode(newCode.trim());\n\n  const liveProviderProps = _objectSpread({\n    code: editorCode,\n    scope\n  }, rest);\n\n  return __jsx(LiveProvider, liveProviderProps, __jsx(LiveCodePreview, {\n    zIndex: \"1\"\n  }), editable && __jsx(LiveError, {\n    style: liveErrorStyle\n  }));\n}\n\nexport default ReactLiveBlock;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport * as ComponentProps from \"@chakra-ui/props-docs\";\nimport { chakra, Code, Flex, HStack, Stack, theme } from \"@chakra-ui/react\";\nimport Link from \"next/link\";\nimport * as React from \"react\";\nimport { convertBackticksToInlineCode } from \"utils/convert-backticks-to-inline-code\";\nimport { InlineCode } from \"components/mdx-components/inline-code\";\nimport { Anchor } from \"components/mdx-components/anchor\";\n/**\n * A map of components that use foreign theme key.\n * The key is name of the component and value is the theme key it uses.\n */\n\nvar themeComponentKeyAliases = {\n  AlertDialog: \"Modal\",\n  IconButton: \"Button\"\n};\n\nvar PropsTable = function PropsTable(_ref) {\n  var of = _ref.of,\n      _ref$omit = _ref.omit,\n      omit = _ref$omit === void 0 ? [\"isTruncated\", \"layerStyle\", \"noOfLines\", \"textStyle\", \"orientation\", \"styleConfig\"] : _ref$omit,\n      only = _ref.only;\n  var propList = React.useMemo(function () {\n    return makePropsTable({\n      of: of,\n      omit: omit,\n      only: only\n    });\n  }, [of, omit, only]);\n\n  if (!propList.length) {\n    // this error breaks the build to notify you when there would be an empty table\n    throw new Error(\"No props left to render for component \".concat(of, \".\\nRemove the use of <PropsTable of=\\\"\").concat(of, \"\\\" /> for this component in the docs.\"));\n  }\n\n  return __jsx(Stack, {\n    spacing: \"10\",\n    my: \"10\"\n  }, propList.map(function (prop) {\n    return __jsx(chakra.div, {\n      key: prop.name,\n      css: {\n        width: \"100%\",\n        fontSize: \"0.95em\",\n        borderCollapse: \"collapse\",\n        \".row\": {\n          minWidth: 100,\n          width: \"20%\",\n          fontSize: \"0.9em\",\n          textAlign: \"start\",\n          fontWeight: 500,\n          padding: \"4px 16px 4px 8px\",\n          whiteSpace: \"nowrap\",\n          verticalAlign: \"baseline\"\n        },\n        \".cell\": {\n          padding: \"4px 0px 4px 8px\",\n          width: \"100%\"\n        }\n      }\n    }, __jsx(chakra.div, {\n      css: {\n        textAlign: \"start\",\n        fontSize: \"1em\"\n      }\n    }, __jsx(chakra.h3, {\n      css: {\n        fontSize: \"0.8em\",\n        paddingBottom: 16,\n        marginBottom: 16,\n        borderBottomWidth: 1\n      }\n    }, __jsx(HStack, null, __jsx(Code, {\n      colorScheme: \"purple\"\n    }, prop.name), prop.required && __jsx(Code, {\n      colorScheme: \"red\"\n    }, \"required\")))), __jsx(\"div\", null, prop.description && __jsx(Flex, null, __jsx(\"div\", {\n      className: \"row\"\n    }, \"Description\"), __jsx(\"div\", {\n      className: \"cell\"\n    }, __jsx(\"p\", null, convertBackticksToInlineCode(prop.description)))), __jsx(Flex, null, __jsx(\"div\", {\n      className: \"row\"\n    }, \"Type\"), __jsx(\"div\", {\n      className: \"cell\"\n    }, __jsx(InlineCode, {\n      whiteSpace: \"wrap\",\n      fontSize: \"0.8em\"\n    }, prop.type))), prop.defaultValue && __jsx(Flex, null, __jsx(\"div\", {\n      className: \"row\"\n    }, \"Default\"), __jsx(\"div\", {\n      className: \"cell\"\n    }, __jsx(InlineCode, {\n      whiteSpace: \"wrap\",\n      fontSize: \"0.8em\"\n    }, prop.defaultValue)))));\n  }));\n};\n\nexport default PropsTable;\nvar TYPE_GENERIC_THEMABLE = \"(string & {})\";\n\nfunction makePropsTable(_ref2) {\n  var _ComponentProps$of, _themeComponentKeyAli;\n\n  var of = _ref2.of,\n      omit = _ref2.omit,\n      only = _ref2.only;\n  var props = (_ComponentProps$of = ComponentProps[of]) === null || _ComponentProps$of === void 0 ? void 0 : _ComponentProps$of.props;\n  var themeKey = (_themeComponentKeyAli = themeComponentKeyAliases[of]) !== null && _themeComponentKeyAli !== void 0 ? _themeComponentKeyAli : of;\n  var componentTheme = theme.components[themeKey];\n\n  var featNotImplemented = function featNotImplemented(feat) {\n    return __jsx(React.Fragment, null, feat, \" for \", __jsx(InlineCode, null, of), \" are not implemented in the default theme. You can\", \" \", __jsx(Link, {\n      href: \"\",\n      passHref: true\n    }, __jsx(Anchor, null, \"extend the theme\")), \" \", \"to implement them.\");\n  };\n\n  if (!props) return [];\n  return Object.entries(props).filter(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        name = _ref4[0];\n\n    if (Array.isArray(only) && !only.includes(name)) {\n      return false;\n    }\n\n    if (Array.isArray(omit) && omit.includes(name)) {\n      return false;\n    }\n\n    return true;\n  }).map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n        name = _ref6[0],\n        _ref6$ = _ref6[1],\n        defaultValue = _ref6$.defaultValue,\n        description = _ref6$.description,\n        required = _ref6$.required,\n        type = _ref6$.type;\n\n    var prop = {\n      name: name,\n      defaultValue: defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.value,\n      description: description,\n      required: required,\n      type: type.name\n    };\n\n    if (name === \"size\") {\n      var _componentTheme$defau;\n\n      var defaultSize = componentTheme === null || componentTheme === void 0 ? void 0 : (_componentTheme$defau = componentTheme.defaultProps) === null || _componentTheme$defau === void 0 ? void 0 : _componentTheme$defau.size;\n\n      if (defaultSize != null) {\n        prop.defaultValue = \"\\\"\".concat(defaultSize, \"\\\"\");\n      }\n\n      if (prop.type === TYPE_GENERIC_THEMABLE) {\n        prop.type = \"string\";\n        prop.description = featNotImplemented(\"Sizes\");\n      } else {\n        prop.type = omitGenericThemableType(prop.type);\n      }\n    }\n\n    if (name === \"variant\") {\n      var _componentTheme$defau2;\n\n      var defaultVariant = componentTheme === null || componentTheme === void 0 ? void 0 : (_componentTheme$defau2 = componentTheme.defaultProps) === null || _componentTheme$defau2 === void 0 ? void 0 : _componentTheme$defau2.variant;\n\n      if (defaultVariant != null) {\n        prop.defaultValue = \"\\\"\".concat(defaultVariant, \"\\\"\");\n      }\n\n      if (prop.type === TYPE_GENERIC_THEMABLE) {\n        prop.type = \"string\";\n        prop.description = featNotImplemented(\"Variants\");\n      } else {\n        prop.type = omitGenericThemableType(prop.type);\n      }\n    }\n\n    if (name === \"colorScheme\") {\n      var _componentTheme$defau3;\n\n      prop.type = omitGenericThemableType(prop.type);\n      var defaultColorScheme = componentTheme === null || componentTheme === void 0 ? void 0 : (_componentTheme$defau3 = componentTheme.defaultProps) === null || _componentTheme$defau3 === void 0 ? void 0 : _componentTheme$defau3.colorScheme;\n\n      if (defaultColorScheme != null) {\n        prop.defaultValue = \"\\\"\".concat(defaultColorScheme, \"\\\"\");\n      } else {\n        prop.description = featNotImplemented(\"Color Schemes\");\n      }\n    }\n\n    return prop;\n  }).sort(function (propA, propB) {\n    var aRequired = propA.required ? 1000 : 0;\n    var bRequired = propB.required ? 1000 : 0;\n    var requiredOffset = aRequired - bRequired;\n    return String(propA.name).localeCompare(propB.name) - requiredOffset;\n  });\n}\n\nvar omitGenericThemableType = function omitGenericThemableType(type) {\n  return type.split(\" | \").filter(function (type) {\n    return type !== TYPE_GENERIC_THEMABLE;\n  }).join(\" | \");\n};","map":null,"metadata":{},"sourceType":"module"}
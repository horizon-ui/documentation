{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, Flex, Grid, useTheme } from \"@chakra-ui/react\";\nimport React from \"react\";\nexport const ColorPalette = props => {\n  const {\n    color,\n    name\n  } = props,\n        rest = _objectWithoutProperties(props, [\"color\", \"name\"]);\n\n  const theme = useTheme();\n  let colorCode = color;\n  const [shade, hue] = color.split(\".\");\n\n  if (shade && hue) {\n    colorCode = theme.colors[shade][hue];\n  }\n\n  if (color in theme.colors && typeof theme.colors[color] === \"string\") {\n    colorCode = theme.colors[color];\n  }\n\n  return __jsx(Flex, _extends({\n    align: \"center\"\n  }, rest), __jsx(Box, {\n    borderRadius: \"md\",\n    boxSize: \"3rem\",\n    boxShadow: \"inner\",\n    mr: 3,\n    bg: color\n  }), __jsx(Box, {\n    fontSize: \"sm\"\n  }, __jsx(Box, {\n    fontWeight: \"semibold\",\n    textTransform: \"capitalize\"\n  }, name), __jsx(Box, {\n    textTransform: \"uppercase\"\n  }, colorCode)));\n};\nexport const ColorPalettes = props => {\n  const {\n    color\n  } = props;\n  const theme = useTheme();\n  const keys = Object.keys(theme.colors[color]);\n  return keys.map(item => __jsx(ColorPalette, {\n    key: `${color}.${item}`,\n    color: `${color}.${item}`,\n    name: `${color} ${item}`\n  }));\n};\nexport const ColorWrapper = props => __jsx(Grid, _extends({\n  mt: 7,\n  gap: 6,\n  templateColumns: \"repeat( auto-fit, minmax(200px, 1fr) )\"\n}, props));","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, useBoolean } from \"@chakra-ui/react\";\nimport dynamic from \"next/dynamic\";\nimport theme from \"prism-react-renderer/themes/nightOwl\";\nimport React, { useEffect } from \"react\";\nimport CodeContainer from \"./code-container\";\nimport CopyButton from \"./copy-button\";\nimport Highlight from \"./highlight\";\nconst ReactLiveBlock = dynamic(() => import(\"./react-live-block\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./react-live-block\")],\n    modules: [\"./react-live-block\"]\n  }\n});\n\nfunction CodeBlock(props) {\n  const [isMounted, {\n    on\n  }] = useBoolean();\n  useEffect(\n  /**\n   * Lazily-load <ReactLiveBlock /> to save bundle size.\n   */\n  on, []);\n\n  const {\n    className,\n    live = true,\n    manual,\n    render,\n    children,\n    viewlines,\n    ln,\n    mountStylesheet = false\n  } = props,\n        rest = _objectWithoutProperties(props, [\"className\", \"live\", \"manual\", \"render\", \"children\", \"viewlines\", \"ln\", \"mountStylesheet\"]);\n\n  const language = className === null || className === void 0 ? void 0 : className.replace(/language-/, \"\");\n  const rawCode = children.trim();\n\n  const reactLiveBlockProps = _objectSpread({\n    rawCode,\n    language,\n    theme,\n    noInline: manual,\n    mountStylesheet\n  }, rest);\n\n  if (isMounted && language === \"jsx\" && live === true) {\n    return __jsx(ReactLiveBlock, _extends({\n      editable: true\n    }, reactLiveBlockProps));\n  }\n\n  if (isMounted && render) {\n    /**\n     * @TODO Not sure if this is even used?\n     */\n    return __jsx(\"div\", {\n      style: {\n        marginTop: 32\n      }\n    }, __jsx(ReactLiveBlock, _extends({\n      editable: false\n    }, reactLiveBlockProps)));\n  }\n\n  return __jsx(Box, {\n    position: \"relative\",\n    zIndex: \"0\"\n  }, __jsx(CodeContainer, {\n    px: \"0\",\n    overflow: \"hidden\"\n  }, __jsx(Highlight, {\n    codeString: rawCode,\n    language: language,\n    theme: theme,\n    metastring: ln,\n    showLines: viewlines\n  })), __jsx(CopyButton, {\n    top: \"4\",\n    code: rawCode\n  }));\n}\n\nexport default CodeBlock;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/andreifredy/Desktop/docs-horizon-ui/website/src/components/color-palette.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, Flex, Grid, useTheme } from \"@chakra-ui/react\";\nimport React from \"react\";\nexport const ColorPalette = props => {\n  const {\n    color,\n    name\n  } = props,\n        rest = _objectWithoutProperties(props, [\"color\", \"name\"]);\n\n  const theme = useTheme();\n  let colorCode = color;\n  const [shade, hue] = color.split(\".\");\n\n  if (shade && hue) {\n    colorCode = theme.colors[shade][hue];\n  }\n\n  if (color in theme.colors && typeof theme.colors[color] === \"string\") {\n    colorCode = theme.colors[color];\n  }\n\n  return __jsx(Flex, _extends({\n    align: \"center\"\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }), __jsx(Box, {\n    borderRadius: \"md\",\n    boxSize: \"3rem\",\n    boxShadow: \"inner\",\n    mr: 3,\n    bg: color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), __jsx(Box, {\n    fontSize: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    fontWeight: \"semibold\",\n    textTransform: \"capitalize\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, name), __jsx(Box, {\n    textTransform: \"uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, colorCode)));\n};\nexport const ColorPalettes = props => {\n  const {\n    color\n  } = props;\n  const theme = useTheme();\n  const keys = Object.keys(theme.colors[color]);\n  return keys.map(item => __jsx(ColorPalette, {\n    key: `${color}.${item}`,\n    color: `${color}.${item}`,\n    name: `${color} ${item}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }));\n};\nexport const ColorWrapper = props => __jsx(Grid, _extends({\n  mt: 7,\n  gap: 6,\n  templateColumns: \"repeat( auto-fit, minmax(200px, 1fr) )\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 3\n  }\n}));","map":{"version":3,"sources":["/Users/andreifredy/Desktop/docs-horizon-ui/website/src/components/color-palette.tsx"],"names":["Box","Flex","Grid","useTheme","React","ColorPalette","props","color","name","rest","theme","colorCode","shade","hue","split","colors","ColorPalettes","keys","Object","map","item","ColorWrapper"],"mappings":";;;;;;;;;AAAA,SACEA,GADF,EAEEC,IAFF,EAIEC,IAJF,EAMEC,QANF,QAOO,kBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AAIA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAA8B;AACxD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAA2BF,KAAjC;AAAA,QAAwBG,IAAxB,4BAAiCH,KAAjC;;AAEA,QAAMI,KAAK,GAAGP,QAAQ,EAAtB;AACA,MAAIQ,SAAS,GAAGJ,KAAhB;AACA,QAAM,CAACK,KAAD,EAAQC,GAAR,IAAeN,KAAK,CAACO,KAAN,CAAY,GAAZ,CAArB;;AAEA,MAAIF,KAAK,IAAIC,GAAb,EAAkB;AAChBF,IAAAA,SAAS,GAAGD,KAAK,CAACK,MAAN,CAAaH,KAAb,EAAoBC,GAApB,CAAZ;AACD;;AAED,MAAIN,KAAK,IAAIG,KAAK,CAACK,MAAf,IAAyB,OAAOL,KAAK,CAACK,MAAN,CAAaR,KAAb,CAAP,KAA+B,QAA5D,EAAsE;AACpEI,IAAAA,SAAS,GAAGD,KAAK,CAACK,MAAN,CAAaR,KAAb,CAAZ;AACD;;AAED,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC;AAAZ,KAAyBE,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,MAAC,GAAD;AACE,IAAA,YAAY,EAAC,IADf;AAEE,IAAA,OAAO,EAAC,MAFV;AAGE,IAAA,SAAS,EAAC,OAHZ;AAIE,IAAA,EAAE,EAAE,CAJN;AAKE,IAAA,EAAE,EAAEF,KALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE,MAAC,GAAD;AAAK,IAAA,QAAQ,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,UAAU,EAAC,UAAhB;AAA2B,IAAA,aAAa,EAAC,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IADH,CADF,EAIE,MAAC,GAAD;AAAK,IAAA,aAAa,EAAC,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCG,SAAhC,CAJF,CARF,CADF;AAiBD,CAhCM;AAkCP,OAAO,MAAMK,aAAa,GAAIV,KAAD,IAA8B;AACzD,QAAM;AAAEC,IAAAA;AAAF,MAAYD,KAAlB;AACA,QAAMI,KAAK,GAAGP,QAAQ,EAAtB;AACA,QAAMc,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYP,KAAK,CAACK,MAAN,CAAaR,KAAb,CAAZ,CAAb;AAEA,SAAOU,IAAI,CAACE,GAAL,CAAUC,IAAD,IACd,MAAC,YAAD;AACE,IAAA,GAAG,EAAG,GAAEb,KAAM,IAAGa,IAAK,EADxB;AAEE,IAAA,KAAK,EAAG,GAAEb,KAAM,IAAGa,IAAK,EAF1B;AAGE,IAAA,IAAI,EAAG,GAAEb,KAAM,IAAGa,IAAK,EAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,CAAP;AAOD,CAZM;AAcP,OAAO,MAAMC,YAAiC,GAAIf,KAAD,IAC/C,MAAC,IAAD;AACE,EAAA,EAAE,EAAE,CADN;AAEE,EAAA,GAAG,EAAE,CAFP;AAGE,EAAA,eAAe,EAAC;AAHlB,GAIMA,KAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADK","sourcesContent":["import {\n  Box,\n  Flex,\n  FlexProps,\n  Grid,\n  GridProps,\n  useTheme,\n} from \"@chakra-ui/react\"\nimport React from \"react\"\n\ntype ColorPaletteProps = FlexProps & { color?: string; name?: string }\n\nexport const ColorPalette = (props: ColorPaletteProps) => {\n  const { color, name, ...rest } = props\n\n  const theme = useTheme()\n  let colorCode = color\n  const [shade, hue] = color.split(\".\")\n\n  if (shade && hue) {\n    colorCode = theme.colors[shade][hue]\n  }\n\n  if (color in theme.colors && typeof theme.colors[color] === \"string\") {\n    colorCode = theme.colors[color]\n  }\n\n  return (\n    <Flex align=\"center\" {...rest}>\n      <Box\n        borderRadius=\"md\"\n        boxSize=\"3rem\"\n        boxShadow=\"inner\"\n        mr={3}\n        bg={color}\n      />\n      <Box fontSize=\"sm\">\n        <Box fontWeight=\"semibold\" textTransform=\"capitalize\">\n          {name}\n        </Box>\n        <Box textTransform=\"uppercase\">{colorCode}</Box>\n      </Box>\n    </Flex>\n  )\n}\n\nexport const ColorPalettes = (props: { color: string }) => {\n  const { color } = props\n  const theme = useTheme()\n  const keys = Object.keys(theme.colors[color])\n\n  return keys.map((item) => (\n    <ColorPalette\n      key={`${color}.${item}`}\n      color={`${color}.${item}`}\n      name={`${color} ${item}`}\n    />\n  ))\n}\n\nexport const ColorWrapper: React.FC<GridProps> = (props) => (\n  <Grid\n    mt={7}\n    gap={6}\n    templateColumns=\"repeat( auto-fit, minmax(200px, 1fr) )\"\n    {...props}\n  />\n)\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { withSuperJSONPage as _withSuperJSONPage } from \"babel-plugin-superjson-next/tools\";\nvar _jsxFileName = \"/Users/andreifredy/Desktop/docs-horizon-ui/website/pages/docs/[[...slug]].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { MDXRemote } from \"next-mdx-remote\";\nimport { MDXComponents } from \"components/mdx-components\";\nimport Layout from \"layouts\";\n\nfunction Page(_ref) {\n  var mdxSource = _ref.mdxSource,\n      frontMatter = _ref.frontMatter;\n  return __jsx(Layout, {\n    frontMatter: frontMatter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, __jsx(MDXRemote, _extends({}, mdxSource, {\n    components: MDXComponents,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  })));\n}\n\n_c = Page;\nexport var __N_SSG = true;\nexport default _c2 = _withSuperJSONPage(Page);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Page\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/andreifredy/Desktop/docs-horizon-ui/website/pages/docs/[[...slug]].tsx"],"names":["MDXRemote","MDXComponents","Layout","Page","mdxSource","frontMatter"],"mappings":";;;;;AACA,SAASA,SAAT,QAA0B,iBAA1B;AAEA,SAASC,aAAT,QAA8B,2BAA9B;AACA,OAAOC,MAAP,MAAmB,SAAnB;;AAIe,SAASC,IAAT,OAGoC;AAAA,MAFjDC,SAEiD,QAFjDA,SAEiD;AAAA,MADjDC,WACiD,QADjDA,WACiD;AACjD,SACE,MAAC,MAAD;AAAQ,IAAA,WAAW,EAAEA,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeD,SAAf;AAA0B,IAAA,UAAU,EAAEH,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD;;KATuBE,I;;AAAxB,wCAAwBA,IAAxB","sourcesContent":["import { InferGetStaticPropsType } from \"next\"\nimport { MDXRemote } from \"next-mdx-remote\"\nimport loadMDXFromPages from \"utils/load-mdx-dir\"\nimport { MDXComponents } from \"components/mdx-components\"\nimport Layout from \"layouts\"\n\nconst CONTENT_PATH = \"docs\"\n\nexport default function Page({\n  mdxSource,\n  frontMatter,\n}: InferGetStaticPropsType<typeof getStaticProps>) {\n  return (\n    <Layout frontMatter={frontMatter}>\n      <MDXRemote {...mdxSource} components={MDXComponents} />\n    </Layout>\n  )\n}\n\nexport async function getStaticPaths() {\n  const pages = await loadMDXFromPages(CONTENT_PATH)\n  const paths = pages.map(({ slug }) => {\n    return {\n      params: {\n        slug: slug\n          .slice(1) // remove the first `/`\n          .split(\"/\") // split to get an array\n          .filter((item) => item !== CONTENT_PATH), // remove the CONTENT_PATH since this isnt needed in static paths\n      },\n    }\n  })\n\n  return {\n    paths,\n    fallback: false,\n  }\n}\n\nexport async function getStaticProps({ params }) {\n  const slug = params.slug\n  const combinedPageSlug = `/${[CONTENT_PATH, ...slug].join(\"/\")}`\n  const pages = await loadMDXFromPages(CONTENT_PATH)\n\n  const page = pages.find((page) => {\n    return combinedPageSlug === page.slug\n  })\n\n  if (!page) {\n    throw new Error(`No content found for slug \"${slug.join(\"/\")}\"`)\n  }\n\n  const { mdxSource, ...frontMatter } = page\n\n  return {\n    props: {\n      mdxSource,\n      frontMatter,\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
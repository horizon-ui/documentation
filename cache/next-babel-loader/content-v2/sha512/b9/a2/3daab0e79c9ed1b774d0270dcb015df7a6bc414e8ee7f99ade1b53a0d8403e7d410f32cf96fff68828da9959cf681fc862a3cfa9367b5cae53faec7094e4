{"ast":null,"code":"export const getAllRoutes = routes => {\n  const allRoutes = [];\n  routes[0].routes.forEach(route => {\n    if (route.routes) {\n      route.routes.forEach(item => {\n        allRoutes.push(item);\n      });\n    } else {\n      allRoutes.push(route);\n    }\n  });\n  return allRoutes;\n};\n/**\n * Returns the siblings of a specific route (that is the previous and next routes).\n */\n\nexport const getRouteContext = (_route, routes) => {\n  let ctx = {};\n  if (!_route) return ctx;\n  const {\n    path\n  } = _route;\n  const allRoutes = getAllRoutes(routes);\n\n  for (let i = 0; i < allRoutes.length; i += 1) {\n    const route = allRoutes[i];\n\n    if (route && route.path === path) {\n      const nextRoute = allRoutes[i + 1];\n      const prevRoute = allRoutes[i - 1];\n      ctx = {\n        nextRoute,\n        prevRoute,\n        route: _route\n      };\n    }\n  }\n\n  return ctx;\n};","map":{"version":3,"sources":["/Users/vladmihalache/Documents/GitHub/documentation/website/src/utils/get-route-context.ts"],"names":["getAllRoutes","routes","allRoutes","forEach","route","item","push","getRouteContext","_route","ctx","path","i","length","nextRoute","prevRoute"],"mappings":"AAyCA,OAAO,MAAMA,YAAY,GAAIC,MAAD,IAAiB;AAC3C,QAAMC,SAAS,GAAG,EAAlB;AAEAD,EAAAA,MAAM,CAAC,CAAD,CAAN,CAAUA,MAAV,CAAiBE,OAAjB,CAA0BC,KAAD,IAAsB;AAC7C,QAAIA,KAAK,CAACH,MAAV,EAAkB;AAChBG,MAAAA,KAAK,CAACH,MAAN,CAAaE,OAAb,CAAsBE,IAAD,IAAU;AAC7BH,QAAAA,SAAS,CAACI,IAAV,CAAeD,IAAf;AACD,OAFD;AAGD,KAJD,MAIO;AACLH,MAAAA,SAAS,CAACI,IAAV,CAAeF,KAAf;AACD;AACF,GARD;AAUA,SAAOF,SAAP;AACD,CAdM;AAeP;AACA;AACA;;AACA,OAAO,MAAMK,eAAe,GAAG,CAACC,MAAD,EAAoBP,MAApB,KAA6C;AAC1E,MAAIQ,GAAG,GAAG,EAAV;AACA,MAAI,CAACD,MAAL,EAAa,OAAOC,GAAP;AAEb,QAAM;AAAEC,IAAAA;AAAF,MAAWF,MAAjB;AACA,QAAMN,SAAS,GAAGF,YAAY,CAACC,MAAD,CAA9B;;AAEA,OAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,SAAS,CAACU,MAA9B,EAAsCD,CAAC,IAAI,CAA3C,EAA8C;AAC5C,UAAMP,KAAK,GAAGF,SAAS,CAACS,CAAD,CAAvB;;AAEA,QAAIP,KAAK,IAAIA,KAAK,CAACM,IAAN,KAAeA,IAA5B,EAAkC;AAChC,YAAMG,SAAS,GAAGX,SAAS,CAACS,CAAC,GAAG,CAAL,CAA3B;AACA,YAAMG,SAAS,GAAGZ,SAAS,CAACS,CAAC,GAAG,CAAL,CAA3B;AAEAF,MAAAA,GAAG,GAAG;AACJI,QAAAA,SADI;AAEJC,QAAAA,SAFI;AAGJV,QAAAA,KAAK,EAAEI;AAHH,OAAN;AAKD;AACF;;AAED,SAAOC,GAAP;AACD,CAvBM","sourcesContent":["export interface RouteItem {\n  title: string\n  path?: string\n  open?: boolean\n  heading?: boolean\n  sort?: boolean\n  routes\n  new?: true\n}\n\nexport interface Routes {\n  routes\n}\n\nexport interface Page {\n  id: string\n  html: string\n  title: string\n  toc: any\n}\n\nexport interface Post {\n  slug: string\n  content: string\n  title: string\n  date: string\n  author: string\n  toc: any\n  ogImage: {\n    url: string\n  }\n  coverImage: string\n}\n\nexport interface RouteContext {\n  parent?: RouteItem\n  prevRoute?: RouteItem\n  nextRoute?: RouteItem\n  route?: RouteItem\n}\n\nexport const getAllRoutes = (routes: any) => {\n  const allRoutes = []\n\n  routes[0].routes.forEach((route: RouteItem) => {\n    if (route.routes) {\n      route.routes.forEach((item) => {\n        allRoutes.push(item)\n      })\n    } else {\n      allRoutes.push(route)\n    }\n  })\n\n  return allRoutes\n}\n/**\n * Returns the siblings of a specific route (that is the previous and next routes).\n */\nexport const getRouteContext = (_route: RouteItem, routes): RouteContext => {\n  let ctx = {}\n  if (!_route) return ctx\n\n  const { path } = _route\n  const allRoutes = getAllRoutes(routes)\n\n  for (let i = 0; i < allRoutes.length; i += 1) {\n    const route = allRoutes[i]\n\n    if (route && route.path === path) {\n      const nextRoute = allRoutes[i + 1]\n      const prevRoute = allRoutes[i - 1]\n\n      ctx = {\n        nextRoute,\n        prevRoute,\n        route: _route,\n      }\n    }\n  }\n\n  return ctx\n}\n"]},"metadata":{},"sourceType":"module"}
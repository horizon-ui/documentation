{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { chakra } from \"@chakra-ui/react\";\nimport BaseHighlight, { defaultProps } from \"prism-react-renderer\";\nimport React from \"react\";\nimport { liveEditorStyle } from \"./styles\";\nconst RE = /{([\\d,-]+)}/;\n\nconst calculateLinesToHighlight = meta => {\n  if (!RE.test(meta)) {\n    return () => false;\n  }\n\n  const lineNumbers = RE.exec(meta)[1].split(`,`).map(v => v.split(`-`).map(x => parseInt(x, 10)));\n  return index => {\n    const lineNumber = index + 1;\n    const inRange = lineNumbers.some(([start, end]) => end ? lineNumber >= start && lineNumber <= end : lineNumber === start);\n    return inRange;\n  };\n};\n\nfunction Highlight(_ref) {\n  let {\n    codeString,\n    language,\n    metastring,\n    showLines\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"codeString\", \"language\", \"metastring\", \"showLines\"]);\n\n  const shouldHighlightLine = calculateLinesToHighlight(metastring);\n  return __jsx(BaseHighlight, _extends({}, defaultProps, {\n    code: codeString,\n    language: language\n  }, props), ({\n    className,\n    style,\n    tokens,\n    getLineProps,\n    getTokenProps\n  }) => __jsx(\"div\", {\n    style: liveEditorStyle,\n    \"data-language\": language\n  }, __jsx(\"pre\", {\n    className: className,\n    style: style\n  }, tokens.map((line, i) => {\n    const lineProps = getLineProps({\n      line,\n      key: i\n    });\n    return __jsx(chakra.div, _extends({\n      px: \"5\",\n      bg: shouldHighlightLine(i) ? \"whiteAlpha.200\" : undefined\n    }, lineProps), showLines && __jsx(chakra.span, {\n      opacity: 0.3,\n      mr: \"6\",\n      fontSize: \"xs\"\n    }, i + 1), line.map((token, key) => __jsx(\"span\", getTokenProps({\n      token,\n      key\n    }))));\n  }))));\n}\n\nexport default Highlight;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/vladmihalache/Documents/GitHub/documentation/website/src/components/props-table.tsx\";\nvar __jsx = React.createElement;\nimport * as ComponentProps from \"@chakra-ui/props-docs\";\nimport { chakra, Code, Flex, HStack, Stack, theme } from \"@chakra-ui/react\";\nimport Link from \"next/link\";\nimport * as React from \"react\";\nimport { convertBackticksToInlineCode } from \"utils/convert-backticks-to-inline-code\";\nimport { InlineCode } from \"components/mdx-components/inline-code\";\nimport { Anchor } from \"components/mdx-components/anchor\";\n/**\n * A map of components that use foreign theme key.\n * The key is name of the component and value is the theme key it uses.\n */\n\nconst themeComponentKeyAliases = {\n  AlertDialog: \"Modal\",\n  IconButton: \"Button\"\n};\n\nconst PropsTable = ({\n  of,\n  omit = [\"isTruncated\", \"layerStyle\", \"noOfLines\", \"textStyle\", \"orientation\", \"styleConfig\"],\n  only\n}) => {\n  const propList = React.useMemo(() => makePropsTable({\n    of,\n    omit,\n    only\n  }), [of, omit, only]);\n\n  if (!propList.length) {\n    // this error breaks the build to notify you when there would be an empty table\n    throw new Error(`No props left to render for component ${of}.\nRemove the use of <PropsTable of=\"${of}\" /> for this component in the docs.`);\n  }\n\n  return __jsx(Stack, {\n    spacing: \"10\",\n    my: \"10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, propList.map(prop => __jsx(chakra.div, {\n    key: prop.name,\n    css: {\n      width: \"100%\",\n      fontSize: \"0.95em\",\n      borderCollapse: \"collapse\",\n      \".row\": {\n        minWidth: 100,\n        width: \"20%\",\n        fontSize: \"0.9em\",\n        textAlign: \"start\",\n        fontWeight: 500,\n        padding: \"4px 16px 4px 8px\",\n        whiteSpace: \"nowrap\",\n        verticalAlign: \"baseline\"\n      },\n      \".cell\": {\n        padding: \"4px 0px 4px 8px\",\n        width: \"100%\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, __jsx(chakra.div, {\n    css: {\n      textAlign: \"start\",\n      fontSize: \"1em\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, __jsx(chakra.h3, {\n    css: {\n      fontSize: \"0.8em\",\n      paddingBottom: 16,\n      marginBottom: 16,\n      borderBottomWidth: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, __jsx(HStack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  }, __jsx(Code, {\n    colorScheme: \"purple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, prop.name), prop.required && __jsx(Code, {\n    colorScheme: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 35\n    }\n  }, \"required\")))), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, prop.description && __jsx(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, \"Description\"), __jsx(\"div\", {\n    className: \"cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 19\n    }\n  }, convertBackticksToInlineCode(prop.description)))), __jsx(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, \"Type\"), __jsx(\"div\", {\n    className: \"cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }, __jsx(InlineCode, {\n    whiteSpace: \"wrap\",\n    fontSize: \"0.8em\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, prop.type))), prop.defaultValue && __jsx(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, \"Default\"), __jsx(\"div\", {\n    className: \"cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, __jsx(InlineCode, {\n    whiteSpace: \"wrap\",\n    fontSize: \"0.8em\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 19\n    }\n  }, prop.defaultValue)))))));\n};\n\nexport default PropsTable;\nconst TYPE_GENERIC_THEMABLE = \"(string & {})\";\n\nfunction makePropsTable({\n  of,\n  omit,\n  only\n}) {\n  var _ComponentProps$of, _themeComponentKeyAli;\n\n  const props = (_ComponentProps$of = ComponentProps[of]) === null || _ComponentProps$of === void 0 ? void 0 : _ComponentProps$of.props;\n  const themeKey = (_themeComponentKeyAli = themeComponentKeyAliases[of]) !== null && _themeComponentKeyAli !== void 0 ? _themeComponentKeyAli : of;\n  const componentTheme = theme.components[themeKey];\n\n  const featNotImplemented = feat => __jsx(React.Fragment, null, feat, \" for \", __jsx(InlineCode, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 18\n    }\n  }, of), \" are not implemented in the default theme. You can\", \" \", __jsx(Link, {\n    href: \"\",\n    passHref: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, __jsx(Anchor, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, \"extend the theme\")), \" \", \"to implement them.\");\n\n  if (!props) return [];\n  return Object.entries(props).filter(([name]) => {\n    if (Array.isArray(only) && !only.includes(name)) {\n      return false;\n    }\n\n    if (Array.isArray(omit) && omit.includes(name)) {\n      return false;\n    }\n\n    return true;\n  }).map(([name, {\n    defaultValue,\n    description,\n    required,\n    type\n  }]) => {\n    const prop = {\n      name,\n      defaultValue: defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.value,\n      description,\n      required,\n      type: type.name\n    };\n\n    if (name === \"size\") {\n      var _componentTheme$defau;\n\n      const defaultSize = componentTheme === null || componentTheme === void 0 ? void 0 : (_componentTheme$defau = componentTheme.defaultProps) === null || _componentTheme$defau === void 0 ? void 0 : _componentTheme$defau.size;\n\n      if (defaultSize != null) {\n        prop.defaultValue = `\"${defaultSize}\"`;\n      }\n\n      if (prop.type === TYPE_GENERIC_THEMABLE) {\n        prop.type = \"string\";\n        prop.description = featNotImplemented(\"Sizes\");\n      } else {\n        prop.type = omitGenericThemableType(prop.type);\n      }\n    }\n\n    if (name === \"variant\") {\n      var _componentTheme$defau2;\n\n      const defaultVariant = componentTheme === null || componentTheme === void 0 ? void 0 : (_componentTheme$defau2 = componentTheme.defaultProps) === null || _componentTheme$defau2 === void 0 ? void 0 : _componentTheme$defau2.variant;\n\n      if (defaultVariant != null) {\n        prop.defaultValue = `\"${defaultVariant}\"`;\n      }\n\n      if (prop.type === TYPE_GENERIC_THEMABLE) {\n        prop.type = \"string\";\n        prop.description = featNotImplemented(\"Variants\");\n      } else {\n        prop.type = omitGenericThemableType(prop.type);\n      }\n    }\n\n    if (name === \"colorScheme\") {\n      var _componentTheme$defau3;\n\n      prop.type = omitGenericThemableType(prop.type);\n      const defaultColorScheme = componentTheme === null || componentTheme === void 0 ? void 0 : (_componentTheme$defau3 = componentTheme.defaultProps) === null || _componentTheme$defau3 === void 0 ? void 0 : _componentTheme$defau3.colorScheme;\n\n      if (defaultColorScheme != null) {\n        prop.defaultValue = `\"${defaultColorScheme}\"`;\n      } else {\n        prop.description = featNotImplemented(\"Color Schemes\");\n      }\n    }\n\n    return prop;\n  }).sort((propA, propB) => {\n    const aRequired = propA.required ? 1000 : 0;\n    const bRequired = propB.required ? 1000 : 0;\n    const requiredOffset = aRequired - bRequired;\n    return String(propA.name).localeCompare(propB.name) - requiredOffset;\n  });\n}\n\nconst omitGenericThemableType = type => type.split(\" | \").filter(type => type !== TYPE_GENERIC_THEMABLE).join(\" | \");","map":{"version":3,"sources":["/Users/vladmihalache/Documents/GitHub/documentation/website/src/components/props-table.tsx"],"names":["ComponentProps","chakra","Code","Flex","HStack","Stack","theme","Link","React","convertBackticksToInlineCode","InlineCode","Anchor","themeComponentKeyAliases","AlertDialog","IconButton","PropsTable","of","omit","only","propList","useMemo","makePropsTable","length","Error","map","prop","name","width","fontSize","borderCollapse","minWidth","textAlign","fontWeight","padding","whiteSpace","verticalAlign","paddingBottom","marginBottom","borderBottomWidth","required","description","type","defaultValue","TYPE_GENERIC_THEMABLE","props","themeKey","componentTheme","components","featNotImplemented","feat","Object","entries","filter","Array","isArray","includes","value","defaultSize","defaultProps","size","omitGenericThemableType","defaultVariant","variant","defaultColorScheme","colorScheme","sort","propA","propB","aRequired","bRequired","requiredOffset","String","localeCompare","split","join"],"mappings":"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","sourcesContent":["import * as ComponentProps from \"@chakra-ui/props-docs\"\nimport { chakra, Code, Flex, HStack, Stack, theme } from \"@chakra-ui/react\"\nimport Link from \"next/link\"\nimport * as React from \"react\"\nimport { convertBackticksToInlineCode } from \"utils/convert-backticks-to-inline-code\"\nimport { InlineCode } from \"components/mdx-components/inline-code\"\nimport { Anchor } from \"components/mdx-components/anchor\"\n\n/**\n * A map of components that use foreign theme key.\n * The key is name of the component and value is the theme key it uses.\n */\nconst themeComponentKeyAliases = {\n  AlertDialog: \"Modal\",\n  IconButton: \"Button\",\n}\n\nexport type PropsTableProps = {\n  /**\n   * displayName of the target component\n   */\n  of: string\n  /**\n   * prop names to omit\n   */\n  omit?: string[] | null\n  /**\n   * Render only given prop names\n   * Has precedence over `omit`\n   */\n  only?: string[] | null\n}\n\nconst PropsTable = ({\n  of,\n  omit = [\n    \"isTruncated\",\n    \"layerStyle\",\n    \"noOfLines\",\n    \"textStyle\",\n    \"orientation\",\n    \"styleConfig\",\n  ],\n  only,\n}: PropsTableProps) => {\n  const propList = React.useMemo(() => makePropsTable({ of, omit, only }), [\n    of,\n    omit,\n    only,\n  ])\n\n  if (!propList.length) {\n    // this error breaks the build to notify you when there would be an empty table\n    throw new Error(\n      `No props left to render for component ${of}.\nRemove the use of <PropsTable of=\"${of}\" /> for this component in the docs.`,\n    )\n  }\n\n  return (\n    <Stack spacing=\"10\" my=\"10\">\n      {propList.map((prop) => (\n        <chakra.div\n          key={prop.name}\n          css={{\n            width: \"100%\",\n            fontSize: \"0.95em\",\n            borderCollapse: \"collapse\",\n            \".row\": {\n              minWidth: 100,\n              width: \"20%\",\n              fontSize: \"0.9em\",\n              textAlign: \"start\",\n              fontWeight: 500,\n              padding: \"4px 16px 4px 8px\",\n              whiteSpace: \"nowrap\",\n              verticalAlign: \"baseline\",\n            },\n            \".cell\": {\n              padding: \"4px 0px 4px 8px\",\n              width: \"100%\",\n            },\n          }}\n        >\n          <chakra.div css={{ textAlign: \"start\", fontSize: \"1em\" }}>\n            <chakra.h3\n              css={{\n                fontSize: \"0.8em\",\n                paddingBottom: 16,\n                marginBottom: 16,\n                borderBottomWidth: 1,\n              }}\n            >\n              <HStack>\n                <Code colorScheme=\"purple\">{prop.name}</Code>\n                {prop.required && <Code colorScheme=\"red\">required</Code>}\n              </HStack>\n            </chakra.h3>\n          </chakra.div>\n          <div>\n            {prop.description && (\n              <Flex>\n                <div className=\"row\">Description</div>\n                <div className=\"cell\">\n                  <p>{convertBackticksToInlineCode(prop.description)}</p>\n                </div>\n              </Flex>\n            )}\n            <Flex>\n              <div className=\"row\">Type</div>\n              <div className=\"cell\">\n                <InlineCode whiteSpace=\"wrap\" fontSize=\"0.8em\">\n                  {prop.type}\n                </InlineCode>\n              </div>\n            </Flex>\n            {prop.defaultValue && (\n              <Flex>\n                <div className=\"row\">Default</div>\n                <div className=\"cell\">\n                  <InlineCode whiteSpace=\"wrap\" fontSize=\"0.8em\">\n                    {prop.defaultValue}\n                  </InlineCode>\n                </div>\n              </Flex>\n            )}\n          </div>\n        </chakra.div>\n      ))}\n    </Stack>\n  )\n}\n\nexport default PropsTable\n\ninterface MakePropsTableOptions extends PropsTableProps {}\n\nconst TYPE_GENERIC_THEMABLE = \"(string & {})\"\n\nfunction makePropsTable({ of, omit, only }: MakePropsTableOptions) {\n  const props = ComponentProps[of]?.props as Record<string, any>\n\n  const themeKey = themeComponentKeyAliases[of] ?? of\n  const componentTheme = theme.components[themeKey]\n\n  const featNotImplemented = (feat: string) => (\n    <>\n      {feat} for <InlineCode>{of}</InlineCode> are not implemented in the\n      default theme. You can{\" \"}\n      <Link href=\"\" passHref>\n        <Anchor>extend the theme</Anchor>\n      </Link>{\" \"}\n      to implement them.\n    </>\n  )\n\n  if (!props) return []\n\n  return Object.entries(props)\n    .filter(([name]) => {\n      if (Array.isArray(only) && !only.includes(name)) {\n        return false\n      }\n\n      if (Array.isArray(omit) && omit.includes(name)) {\n        return false\n      }\n\n      return true\n    })\n    .map(([name, { defaultValue, description, required, type }]) => {\n      const prop = {\n        name,\n        defaultValue: defaultValue?.value,\n        description,\n        required,\n        type: type.name,\n      }\n\n      if (name === \"size\") {\n        const defaultSize = componentTheme?.defaultProps?.size\n\n        if (defaultSize != null) {\n          prop.defaultValue = `\"${defaultSize}\"`\n        }\n\n        if (prop.type === TYPE_GENERIC_THEMABLE) {\n          prop.type = \"string\"\n          prop.description = featNotImplemented(\"Sizes\")\n        } else {\n          prop.type = omitGenericThemableType(prop.type)\n        }\n      }\n\n      if (name === \"variant\") {\n        const defaultVariant = componentTheme?.defaultProps?.variant\n\n        if (defaultVariant != null) {\n          prop.defaultValue = `\"${defaultVariant}\"`\n        }\n\n        if (prop.type === TYPE_GENERIC_THEMABLE) {\n          prop.type = \"string\"\n          prop.description = featNotImplemented(\"Variants\")\n        } else {\n          prop.type = omitGenericThemableType(prop.type)\n        }\n      }\n\n      if (name === \"colorScheme\") {\n        prop.type = omitGenericThemableType(prop.type)\n\n        const defaultColorScheme = componentTheme?.defaultProps?.colorScheme\n\n        if (defaultColorScheme != null) {\n          prop.defaultValue = `\"${defaultColorScheme}\"`\n        } else {\n          prop.description = featNotImplemented(\"Color Schemes\")\n        }\n      }\n\n      return prop\n    })\n    .sort((propA, propB) => {\n      const aRequired = propA.required ? 1000 : 0\n      const bRequired = propB.required ? 1000 : 0\n      const requiredOffset = aRequired - bRequired\n      return String(propA.name).localeCompare(propB.name) - requiredOffset\n    })\n}\n\nconst omitGenericThemableType = (type: string) =>\n  type\n    .split(\" | \")\n    .filter((type) => type !== TYPE_GENERIC_THEMABLE)\n    .join(\" | \")\n"]},"metadata":{},"sourceType":"module"}
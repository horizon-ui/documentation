{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as path from \"path\";\nimport * as fs from \"fs\";\nimport { processFrontmatter, serializeMdx } from \"utils/mdx-utils\";\nimport { parseMarkdownString } from \"@docusaurus/utils\";\nimport { calcReadTime } from \"utils/calc-read-time\";\nimport siteConfig from \"../../configs/site-config\";\nexport async function loadMdx(filename) {\n  // get the `pages` directory\n  const pagesDir = path.join(process.cwd(), \"pages\"); // gets the relative mdx path\n  // pages/docs/guides.mdx => /docs/guides.mdx\n\n  const relativeFilePath = path.relative(pagesDir, filename);\n  const filePath = path.resolve(filename);\n\n  if (!fs.existsSync(filePath)) {\n    throw new Error(`can't load MDX file ${filename} in ${filePath} does not exist`);\n  }\n\n  const mdxContent = fs.readFileSync(filePath).toString(); // extract frontmatter and content from markdown string\n\n  const {\n    source: mdxSource,\n    frontMatter\n  } = await serializeMdx(mdxContent);\n  const {\n    excerpt\n  } = parseMarkdownString(mdxContent); // extends frontmatter with more useful information\n\n  return processFrontmatter(_objectSpread(_objectSpread({\n    baseEditUrl: siteConfig.repo.editUrl,\n    excerpt: frontMatter.excerpt || excerpt,\n    readTimeMinutes: calcReadTime(mdxContent),\n    mdxContent\n  }, frontMatter), {}, {\n    path: relativeFilePath,\n    mdxSource\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/vladmihalache/Documents/GitHub/documentation/website/layouts/mdx.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as chakraComponents from \"@chakra-ui/react\";\nimport { MDXProvider } from \"@mdx-js/react\";\nimport { MDXComponents } from \"components/mdx-components\";\nimport PageContainer from \"components/page-container\";\nimport Pagination from \"components/pagination\";\nimport Sidebar from \"components/sidebar/sidebar\";\nimport docsSidebar from \"configs/docs-sidebar.json\";\nimport * as React from \"react\";\nimport { findRouteByPath, removeFromLast } from \"utils/find-route-by-path\";\nimport { getRouteContext } from \"utils/get-route-context\";\nexport function getRoutes(slug) {\n  var _Object$entries$find, _sidebar$routes;\n\n  // for home page, use docs sidebat\n  if (slug === \"/\") return docsSidebar.routes;\n  const configMap = {\n    \"/changelog\": docsSidebar,\n    \"/docs\": docsSidebar\n  };\n  const [, sidebar] = (_Object$entries$find = Object.entries(configMap).find(([path]) => slug.startsWith(path))) !== null && _Object$entries$find !== void 0 ? _Object$entries$find : [];\n  return (_sidebar$routes = sidebar === null || sidebar === void 0 ? void 0 : sidebar.routes) !== null && _sidebar$routes !== void 0 ? _sidebar$routes : [];\n}\nexport function MDXLayoutProvider({\n  children\n}) {\n  return __jsx(MDXProvider, {\n    components: _objectSpread(_objectSpread({}, chakraComponents), MDXComponents),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport default function MDXLayout(props) {\n  const {\n    frontmatter,\n    children\n  } = props;\n  const routes = getRoutes(frontmatter.slug);\n  const route = findRouteByPath(removeFromLast(frontmatter.slug, \"#\"), routes);\n  const routeContext = getRouteContext(route, routes);\n  return __jsx(MDXLayoutProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, __jsx(PageContainer, {\n    frontmatter: frontmatter,\n    sidebar: __jsx(Sidebar, {\n      routes: routes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 18\n      }\n    }),\n    pagination: __jsx(Pagination, {\n      next: routeContext.nextRoute,\n      previous: routeContext.prevRoute,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, children));\n}","map":{"version":3,"sources":["/Users/vladmihalache/Documents/GitHub/documentation/website/layouts/mdx.tsx"],"names":["chakraComponents","MDXProvider","MDXComponents","PageContainer","Pagination","Sidebar","docsSidebar","React","findRouteByPath","removeFromLast","getRouteContext","getRoutes","slug","routes","configMap","sidebar","Object","entries","find","path","startsWith","MDXLayoutProvider","children","MDXLayout","props","frontmatter","route","routeContext","nextRoute","prevRoute"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,gBAAZ,MAAkC,kBAAlC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,0BAAhD;AACA,SAASC,eAAT,QAAgC,yBAAhC;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAiC;AAAA;;AACtC;AACA,MAAIA,IAAI,KAAK,GAAb,EAAkB,OAAON,WAAW,CAACO,MAAnB;AAElB,QAAMC,SAAS,GAAG;AAChB,kBAAcR,WADE;AAEhB,aAASA;AAFO,GAAlB;AAKA,QAAM,GAAGS,OAAH,4BACJC,MAAM,CAACC,OAAP,CAAeH,SAAf,EAA0BI,IAA1B,CAA+B,CAAC,CAACC,IAAD,CAAD,KAAYP,IAAI,CAACQ,UAAL,CAAgBD,IAAhB,CAA3C,CADI,uEACiE,EADvE;AAGA,4BAAOJ,OAAP,aAAOA,OAAP,uBAAOA,OAAO,CAAEF,MAAhB,6DAA0B,EAA1B;AACD;AAED,OAAO,SAASQ,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAyC;AAC9C,SACE,MAAC,WAAD;AAAa,IAAA,UAAU,kCAAOtB,gBAAP,GAA4BE,aAA5B,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGoB,QADH,CADF;AAKD;AAOD,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0C;AACvD,QAAM;AAAEC,IAAAA,WAAF;AAAeH,IAAAA;AAAf,MAA4BE,KAAlC;AACA,QAAMX,MAAM,GAAGF,SAAS,CAACc,WAAW,CAACb,IAAb,CAAxB;AAEA,QAAMc,KAAK,GAAGlB,eAAe,CAACC,cAAc,CAACgB,WAAW,CAACb,IAAb,EAAmB,GAAnB,CAAf,EAAwCC,MAAxC,CAA7B;AACA,QAAMc,YAAY,GAAGjB,eAAe,CAACgB,KAAD,EAAQb,MAAR,CAApC;AAEA,SACE,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AACE,IAAA,WAAW,EAAEY,WADf;AAEE,IAAA,OAAO,EAAE,MAAC,OAAD;AAAS,MAAA,MAAM,EAAEZ,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFX;AAGE,IAAA,UAAU,EACR,MAAC,UAAD;AACE,MAAA,IAAI,EAAEc,YAAY,CAACC,SADrB;AAEE,MAAA,QAAQ,EAAED,YAAY,CAACE,SAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGP,QAVH,CADF,CADF;AAgBD","sourcesContent":["import * as chakraComponents from \"@chakra-ui/react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport { MDXComponents } from \"components/mdx-components\"\nimport PageContainer from \"components/page-container\"\nimport Pagination from \"components/pagination\"\nimport Sidebar from \"components/sidebar/sidebar\"\nimport docsSidebar from \"configs/docs-sidebar.json\"\nimport * as React from \"react\"\nimport { findRouteByPath, removeFromLast } from \"utils/find-route-by-path\"\nimport { getRouteContext } from \"utils/get-route-context\"\n\nexport function getRoutes(slug: string) {\n  // for home page, use docs sidebat\n  if (slug === \"/\") return docsSidebar.routes\n\n  const configMap = {\n    \"/changelog\": docsSidebar,\n    \"/docs\": docsSidebar,\n  }\n\n  const [, sidebar] =\n    Object.entries(configMap).find(([path]) => slug.startsWith(path)) ?? []\n\n  return sidebar?.routes ?? []\n}\n\nexport function MDXLayoutProvider({ children }) {\n  return (\n    <MDXProvider components={{ ...chakraComponents, ...MDXComponents }}>\n      {children}\n    </MDXProvider>\n  )\n}\n\ninterface MDXLayoutProps {\n  frontmatter: any\n  children: React.ReactNode\n}\n\nexport default function MDXLayout(props: MDXLayoutProps) {\n  const { frontmatter, children } = props\n  const routes = getRoutes(frontmatter.slug)\n\n  const route = findRouteByPath(removeFromLast(frontmatter.slug, \"#\"), routes)\n  const routeContext = getRouteContext(route, routes)\n\n  return (\n    <MDXLayoutProvider>\n      <PageContainer\n        frontmatter={frontmatter}\n        sidebar={<Sidebar routes={routes} />}\n        pagination={\n          <Pagination\n            next={routeContext.nextRoute}\n            previous={routeContext.prevRoute}\n          />\n        }\n      >\n        {children}\n      </PageContainer>\n    </MDXLayoutProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport { chakra } from \"@chakra-ui/react\";\nimport BaseHighlight, { defaultProps } from \"prism-react-renderer\";\nimport React from \"react\";\nimport { liveEditorStyle } from \"./styles\";\nvar RE = /{([\\d,-]+)}/;\n\nvar calculateLinesToHighlight = function calculateLinesToHighlight(meta) {\n  if (!RE.test(meta)) {\n    return function () {\n      return false;\n    };\n  }\n\n  var lineNumbers = RE.exec(meta)[1].split(\",\").map(function (v) {\n    return v.split(\"-\").map(function (x) {\n      return parseInt(x, 10);\n    });\n  });\n  return function (index) {\n    var lineNumber = index + 1;\n    var inRange = lineNumbers.some(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          start = _ref2[0],\n          end = _ref2[1];\n\n      return end ? lineNumber >= start && lineNumber <= end : lineNumber === start;\n    });\n    return inRange;\n  };\n};\n\nfunction Highlight(_ref3) {\n  var codeString = _ref3.codeString,\n      language = _ref3.language,\n      metastring = _ref3.metastring,\n      showLines = _ref3.showLines,\n      props = _objectWithoutProperties(_ref3, [\"codeString\", \"language\", \"metastring\", \"showLines\"]);\n\n  var shouldHighlightLine = calculateLinesToHighlight(metastring);\n  return __jsx(BaseHighlight, _extends({}, defaultProps, {\n    code: codeString,\n    language: language\n  }, props), function (_ref4) {\n    var className = _ref4.className,\n        style = _ref4.style,\n        tokens = _ref4.tokens,\n        getLineProps = _ref4.getLineProps,\n        getTokenProps = _ref4.getTokenProps;\n    return __jsx(\"div\", {\n      style: liveEditorStyle,\n      \"data-language\": language\n    }, __jsx(\"pre\", {\n      className: className,\n      style: style\n    }, tokens.map(function (line, i) {\n      var lineProps = getLineProps({\n        line: line,\n        key: i\n      });\n      return __jsx(chakra.div, _extends({\n        px: \"5\",\n        bg: shouldHighlightLine(i) ? \"whiteAlpha.200\" : undefined\n      }, lineProps), showLines && __jsx(chakra.span, {\n        opacity: 0.3,\n        mr: \"6\",\n        fontSize: \"xs\"\n      }, i + 1), line.map(function (token, key) {\n        return __jsx(\"span\", getTokenProps({\n          token: token,\n          key: key\n        }));\n      }));\n    })));\n  });\n}\n\nexport default Highlight;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\nimport * as ComponentProps from \"@chakra-ui/props-docs\";\nimport { chakra, Code, Flex, HStack, Stack, theme } from \"@chakra-ui/react\";\nimport Link from \"next/link\";\nimport * as React from \"react\";\nimport { convertBackticksToInlineCode } from \"utils/convert-backticks-to-inline-code\";\nimport { InlineCode } from \"components/mdx-components/inline-code\";\nimport { Anchor } from \"components/mdx-components/anchor\";\n/**\n * A map of components that use foreign theme key.\n * The key is name of the component and value is the theme key it uses.\n */\n\nconst themeComponentKeyAliases = {\n  AlertDialog: \"Modal\",\n  IconButton: \"Button\"\n};\n\nconst PropsTable = ({\n  of,\n  omit = [\"isTruncated\", \"layerStyle\", \"noOfLines\", \"textStyle\", \"orientation\", \"styleConfig\"],\n  only\n}) => {\n  const propList = React.useMemo(() => makePropsTable({\n    of,\n    omit,\n    only\n  }), [of, omit, only]);\n\n  if (!propList.length) {\n    // this error breaks the build to notify you when there would be an empty table\n    throw new Error(`No props left to render for component ${of}.\nRemove the use of <PropsTable of=\"${of}\" /> for this component in the docs.`);\n  }\n\n  return __jsx(Stack, {\n    spacing: \"10\",\n    my: \"10\"\n  }, propList.map(prop => __jsx(chakra.div, {\n    key: prop.name,\n    css: {\n      width: \"100%\",\n      fontSize: \"0.95em\",\n      borderCollapse: \"collapse\",\n      \".row\": {\n        minWidth: 100,\n        width: \"20%\",\n        fontSize: \"0.9em\",\n        textAlign: \"start\",\n        fontWeight: 500,\n        padding: \"4px 16px 4px 8px\",\n        whiteSpace: \"nowrap\",\n        verticalAlign: \"baseline\"\n      },\n      \".cell\": {\n        padding: \"4px 0px 4px 8px\",\n        width: \"100%\"\n      }\n    }\n  }, __jsx(chakra.div, {\n    css: {\n      textAlign: \"start\",\n      fontSize: \"1em\"\n    }\n  }, __jsx(chakra.h3, {\n    css: {\n      fontSize: \"0.8em\",\n      paddingBottom: 16,\n      marginBottom: 16,\n      borderBottomWidth: 1\n    }\n  }, __jsx(HStack, null, __jsx(Code, {\n    colorScheme: \"purple\"\n  }, prop.name), prop.required && __jsx(Code, {\n    colorScheme: \"red\"\n  }, \"required\")))), __jsx(\"div\", null, prop.description && __jsx(Flex, null, __jsx(\"div\", {\n    className: \"row\"\n  }, \"Description\"), __jsx(\"div\", {\n    className: \"cell\"\n  }, __jsx(\"p\", null, convertBackticksToInlineCode(prop.description)))), __jsx(Flex, null, __jsx(\"div\", {\n    className: \"row\"\n  }, \"Type\"), __jsx(\"div\", {\n    className: \"cell\"\n  }, __jsx(InlineCode, {\n    whiteSpace: \"wrap\",\n    fontSize: \"0.8em\"\n  }, prop.type))), prop.defaultValue && __jsx(Flex, null, __jsx(\"div\", {\n    className: \"row\"\n  }, \"Default\"), __jsx(\"div\", {\n    className: \"cell\"\n  }, __jsx(InlineCode, {\n    whiteSpace: \"wrap\",\n    fontSize: \"0.8em\"\n  }, prop.defaultValue)))))));\n};\n\nexport default PropsTable;\nconst TYPE_GENERIC_THEMABLE = \"(string & {})\";\n\nfunction makePropsTable({\n  of,\n  omit,\n  only\n}) {\n  var _ComponentProps$of, _themeComponentKeyAli;\n\n  const props = (_ComponentProps$of = ComponentProps[of]) === null || _ComponentProps$of === void 0 ? void 0 : _ComponentProps$of.props;\n  const themeKey = (_themeComponentKeyAli = themeComponentKeyAliases[of]) !== null && _themeComponentKeyAli !== void 0 ? _themeComponentKeyAli : of;\n  const componentTheme = theme.components[themeKey];\n\n  const featNotImplemented = feat => __jsx(React.Fragment, null, feat, \" for \", __jsx(InlineCode, null, of), \" are not implemented in the default theme. You can\", \" \", __jsx(Link, {\n    href: \"\",\n    passHref: true\n  }, __jsx(Anchor, null, \"extend the theme\")), \" \", \"to implement them.\");\n\n  if (!props) return [];\n  return Object.entries(props).filter(([name]) => {\n    if (Array.isArray(only) && !only.includes(name)) {\n      return false;\n    }\n\n    if (Array.isArray(omit) && omit.includes(name)) {\n      return false;\n    }\n\n    return true;\n  }).map(([name, {\n    defaultValue,\n    description,\n    required,\n    type\n  }]) => {\n    const prop = {\n      name,\n      defaultValue: defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.value,\n      description,\n      required,\n      type: type.name\n    };\n\n    if (name === \"size\") {\n      var _componentTheme$defau;\n\n      const defaultSize = componentTheme === null || componentTheme === void 0 ? void 0 : (_componentTheme$defau = componentTheme.defaultProps) === null || _componentTheme$defau === void 0 ? void 0 : _componentTheme$defau.size;\n\n      if (defaultSize != null) {\n        prop.defaultValue = `\"${defaultSize}\"`;\n      }\n\n      if (prop.type === TYPE_GENERIC_THEMABLE) {\n        prop.type = \"string\";\n        prop.description = featNotImplemented(\"Sizes\");\n      } else {\n        prop.type = omitGenericThemableType(prop.type);\n      }\n    }\n\n    if (name === \"variant\") {\n      var _componentTheme$defau2;\n\n      const defaultVariant = componentTheme === null || componentTheme === void 0 ? void 0 : (_componentTheme$defau2 = componentTheme.defaultProps) === null || _componentTheme$defau2 === void 0 ? void 0 : _componentTheme$defau2.variant;\n\n      if (defaultVariant != null) {\n        prop.defaultValue = `\"${defaultVariant}\"`;\n      }\n\n      if (prop.type === TYPE_GENERIC_THEMABLE) {\n        prop.type = \"string\";\n        prop.description = featNotImplemented(\"Variants\");\n      } else {\n        prop.type = omitGenericThemableType(prop.type);\n      }\n    }\n\n    if (name === \"colorScheme\") {\n      var _componentTheme$defau3;\n\n      prop.type = omitGenericThemableType(prop.type);\n      const defaultColorScheme = componentTheme === null || componentTheme === void 0 ? void 0 : (_componentTheme$defau3 = componentTheme.defaultProps) === null || _componentTheme$defau3 === void 0 ? void 0 : _componentTheme$defau3.colorScheme;\n\n      if (defaultColorScheme != null) {\n        prop.defaultValue = `\"${defaultColorScheme}\"`;\n      } else {\n        prop.description = featNotImplemented(\"Color Schemes\");\n      }\n    }\n\n    return prop;\n  }).sort((propA, propB) => {\n    const aRequired = propA.required ? 1000 : 0;\n    const bRequired = propB.required ? 1000 : 0;\n    const requiredOffset = aRequired - bRequired;\n    return String(propA.name).localeCompare(propB.name) - requiredOffset;\n  });\n}\n\nconst omitGenericThemableType = type => type.split(\" | \").filter(type => type !== TYPE_GENERIC_THEMABLE).join(\" | \");","map":null,"metadata":{},"sourceType":"module"}
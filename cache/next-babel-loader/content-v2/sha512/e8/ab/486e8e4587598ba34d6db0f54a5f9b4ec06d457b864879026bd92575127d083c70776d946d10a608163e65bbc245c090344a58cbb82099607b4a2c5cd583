{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport * as React from \"react\";\nexport function useScrollSpy(selectors, options) {\n  _s();\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeId = _React$useState2[0],\n      setActiveId = _React$useState2[1];\n\n  var observer = React.useRef();\n  React.useEffect(function () {\n    var elements = selectors.map(function (selector) {\n      return document.querySelector(selector);\n    });\n\n    if (observer.current) {\n      observer.current.disconnect();\n    }\n\n    observer.current = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        if (entry !== null && entry !== void 0 && entry.isIntersecting) {\n          setActiveId(entry.target.getAttribute(\"id\"));\n        }\n      });\n    }, options);\n    elements.forEach(function (el) {\n      return observer.current.observe(el);\n    });\n    return function () {\n      return observer.current.disconnect();\n    };\n  }, [selectors]);\n  return activeId;\n}\n\n_s(useScrollSpy, \"1qLMD3fS4YMgaSlsrxTG7aVfy48=\");","map":{"version":3,"sources":["/Users/vladmihalache/Documents/GitHub/documentation/website/src/hooks/use-scrollspy.ts"],"names":["React","useScrollSpy","selectors","options","useState","activeId","setActiveId","observer","useRef","useEffect","elements","map","selector","document","querySelector","current","disconnect","IntersectionObserver","entries","forEach","entry","isIntersecting","target","getAttribute","el","observe"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAO,SAASC,YAAT,CACLC,SADK,EAELC,OAFK,EAGL;AAAA;;AAAA,wBACgCH,KAAK,CAACI,QAAN,EADhC;AAAA;AAAA,MACOC,QADP;AAAA,MACiBC,WADjB;;AAEA,MAAMC,QAAQ,GAAGP,KAAK,CAACQ,MAAN,EAAjB;AACAR,EAAAA,KAAK,CAACS,SAAN,CAAgB,YAAM;AACpB,QAAMC,QAAQ,GAAGR,SAAS,CAACS,GAAV,CAAc,UAACC,QAAD;AAAA,aAC7BC,QAAQ,CAACC,aAAT,CAAuBF,QAAvB,CAD6B;AAAA,KAAd,CAAjB;;AAGA,QAAIL,QAAQ,CAACQ,OAAb,EAAsB;AACpBR,MAAAA,QAAQ,CAACQ,OAAT,CAAiBC,UAAjB;AACD;;AACDT,IAAAA,QAAQ,CAACQ,OAAT,GAAmB,IAAIE,oBAAJ,CAAyB,UAACC,OAAD,EAAa;AACvDA,MAAAA,OAAO,CAACC,OAAR,CAAgB,UAACC,KAAD,EAAW;AACzB,YAAIA,KAAJ,aAAIA,KAAJ,eAAIA,KAAK,CAAEC,cAAX,EAA2B;AACzBf,UAAAA,WAAW,CAACc,KAAK,CAACE,MAAN,CAAaC,YAAb,CAA0B,IAA1B,CAAD,CAAX;AACD;AACF,OAJD;AAKD,KANkB,EAMhBpB,OANgB,CAAnB;AAOAO,IAAAA,QAAQ,CAACS,OAAT,CAAiB,UAACK,EAAD;AAAA,aAAQjB,QAAQ,CAACQ,OAAT,CAAiBU,OAAjB,CAAyBD,EAAzB,CAAR;AAAA,KAAjB;AACA,WAAO;AAAA,aAAMjB,QAAQ,CAACQ,OAAT,CAAiBC,UAAjB,EAAN;AAAA,KAAP;AACD,GAhBD,EAgBG,CAACd,SAAD,CAhBH;AAkBA,SAAOG,QAAP;AACD;;GAzBeJ,Y","sourcesContent":["import * as React from \"react\"\n\nexport function useScrollSpy(\n  selectors: string[],\n  options?: IntersectionObserverInit,\n) {\n  const [activeId, setActiveId] = React.useState<string>()\n  const observer = React.useRef<IntersectionObserver>()\n  React.useEffect(() => {\n    const elements = selectors.map((selector) =>\n      document.querySelector(selector),\n    )\n    if (observer.current) {\n      observer.current.disconnect()\n    }\n    observer.current = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry?.isIntersecting) {\n          setActiveId(entry.target.getAttribute(\"id\"))\n        }\n      })\n    }, options)\n    elements.forEach((el) => observer.current.observe(el))\n    return () => observer.current.disconnect()\n  }, [selectors])\n\n  return activeId\n}\n"]},"metadata":{},"sourceType":"module"}
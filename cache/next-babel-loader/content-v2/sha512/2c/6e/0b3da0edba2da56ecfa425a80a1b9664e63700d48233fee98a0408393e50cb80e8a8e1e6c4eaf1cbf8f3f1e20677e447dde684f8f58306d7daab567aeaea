{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Button, useClipboard, useColorModeValue } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nfunction CopyButton(_ref) {\n  let {\n    code\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"code\"]);\n\n  const {\n    hasCopied,\n    onCopy\n  } = useClipboard(code);\n  return __jsx(Button, _extends({\n    size: \"sm\",\n    position: \"absolute\",\n    textTransform: \"uppercase\",\n    color: \"white\",\n    bg: useColorModeValue(\"brand.500\", \"brand.400\"),\n    fontSize: \"xs\",\n    height: \"24px\",\n    top: 0,\n    zIndex: \"1\",\n    right: \"1.25em\"\n  }, props, {\n    onClick: onCopy,\n    _hover: {\n      bg: useColorModeValue(\"brand.600\", \"brand.300\")\n    },\n    _active: {\n      bg: useColorModeValue(\"brand.700\", \"brand.300\")\n    },\n    _focus: {\n      bg: useColorModeValue(\"brand.700\", \"brand.300\")\n    }\n  }), hasCopied ? \"copied\" : \"copy\");\n}\n\nexport default CopyButton;","map":null,"metadata":{},"sourceType":"module"}
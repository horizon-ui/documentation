{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { chakra, useColorModeValue } from \"@chakra-ui/react\";\nimport { useEffect, useRef, useState } from \"react\";\n\nfunction SidebarCategory(props) {\n  const {\n    isMobile,\n    title,\n    selected,\n    opened,\n    children,\n    contentRef\n  } = props,\n        rest = _objectWithoutProperties(props, [\"isMobile\", \"title\", \"selected\", \"opened\", \"children\", \"contentRef\"]);\n\n  const ref = useRef(null);\n  const {\n    0: {\n      toggle,\n      shouldScroll = false\n    },\n    1: setToggle\n  } = useState({\n    toggle: selected || opened\n  }); // const onClick = () => {\n  //   setToggle({ toggle: !toggle, shouldScroll: true })\n  // }\n  // If a category is selected indirectly, open it. This can happen when using the search input\n\n  useEffect(() => {\n    if (selected) {\n      setToggle({\n        toggle: true,\n        shouldScroll: true\n      });\n    }\n  }, [selected]); // Navigate to the start of the category when manually opened\n\n  useEffect(() => {\n    if (!ref.current || !(contentRef !== null && contentRef !== void 0 && contentRef.current)) return;\n\n    if (toggle && shouldScroll) {\n      const contentEl = contentRef.current;\n\n      if (toggle == true && contentEl) {\n        // 10 is added for better margin\n        const height = ref.current.offsetTop - (isMobile ? 10 : contentEl.offsetTop);\n        contentEl.scrollTop = height;\n        setToggle({\n          toggle\n        });\n      }\n    }\n  }, [toggle, shouldScroll, isMobile, contentRef]);\n  return __jsx(chakra.div, _extends({\n    mt: \"8\",\n    ref: ref\n  }, rest), __jsx(chakra.p, {\n    width: \"full\",\n    textTransform: \"uppercase\",\n    letterSpacing: \"wider\",\n    fontSize: \"xs\",\n    fontWeight: \"bold\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    userSelect: \"none\",\n    color: useColorModeValue(\"gray.500\", \"inherit\") // onClick={onClick}\n\n  }, title), __jsx(chakra.div, {\n    role: \"group\",\n    hidden: !toggle,\n    mt: \"16px\",\n    mx: \"-3\"\n  }, children));\n}\n\nexport default SidebarCategory;","map":null,"metadata":{},"sourceType":"module"}
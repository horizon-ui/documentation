{"ast":null,"code":"var _jsxFileName = \"/Users/vladmihalache/Documents/GitHub/documentation/website/src/components/mdx-components/codeblock/highlight.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { chakra } from \"@chakra-ui/react\";\nimport BaseHighlight, { defaultProps } from \"prism-react-renderer\";\nimport React from \"react\";\nimport { liveEditorStyle } from \"./styles\";\nconst RE = /{([\\d,-]+)}/;\n\nconst calculateLinesToHighlight = meta => {\n  if (!RE.test(meta)) {\n    return () => false;\n  }\n\n  const lineNumbers = RE.exec(meta)[1].split(`,`).map(v => v.split(`-`).map(x => parseInt(x, 10)));\n  return index => {\n    const lineNumber = index + 1;\n    const inRange = lineNumbers.some(([start, end]) => end ? lineNumber >= start && lineNumber <= end : lineNumber === start);\n    return inRange;\n  };\n};\n\nfunction Highlight(_ref) {\n  let {\n    codeString,\n    language,\n    metastring,\n    showLines\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"codeString\", \"language\", \"metastring\", \"showLines\"]);\n\n  const shouldHighlightLine = calculateLinesToHighlight(metastring);\n  return __jsx(BaseHighlight, _extends({}, defaultProps, {\n    code: codeString,\n    language: language\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }), ({\n    className,\n    style,\n    tokens,\n    getLineProps,\n    getTokenProps\n  }) => __jsx(\"div\", {\n    style: liveEditorStyle,\n    \"data-language\": language,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, __jsx(\"pre\", {\n    className: className,\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, tokens.map((line, i) => {\n    const lineProps = getLineProps({\n      line,\n      key: i\n    });\n    return __jsx(chakra.div, _extends({\n      px: \"5\",\n      bg: shouldHighlightLine(i) ? \"whiteAlpha.200\" : undefined\n    }, lineProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }), showLines && __jsx(chakra.span, {\n      opacity: 0.3,\n      mr: \"6\",\n      fontSize: \"xs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, i + 1), line.map((token, key) => __jsx(\"span\", _extends({}, getTokenProps({\n      token,\n      key\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }))));\n  }))));\n}\n\nexport default Highlight;","map":{"version":3,"sources":["/Users/vladmihalache/Documents/GitHub/documentation/website/src/components/mdx-components/codeblock/highlight.tsx"],"names":["chakra","BaseHighlight","defaultProps","React","liveEditorStyle","RE","calculateLinesToHighlight","meta","test","lineNumbers","exec","split","map","v","x","parseInt","index","lineNumber","inRange","some","start","end","Highlight","codeString","language","metastring","showLines","props","shouldHighlightLine","className","style","tokens","getLineProps","getTokenProps","line","i","lineProps","key","undefined","token"],"mappings":"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","sourcesContent":["import { chakra } from \"@chakra-ui/react\"\nimport BaseHighlight, {\n  defaultProps,\n  Language,\n  PrismTheme,\n} from \"prism-react-renderer\"\nimport React from \"react\"\nimport { liveEditorStyle } from \"./styles\"\n\nconst RE = /{([\\d,-]+)}/\n\nconst calculateLinesToHighlight = (meta: string) => {\n  if (!RE.test(meta)) {\n    return () => false\n  }\n  const lineNumbers = RE.exec(meta)[1]\n    .split(`,`)\n    .map((v) => v.split(`-`).map((x) => parseInt(x, 10)))\n\n  return (index: number) => {\n    const lineNumber = index + 1\n    const inRange = lineNumbers.some(([start, end]) =>\n      end ? lineNumber >= start && lineNumber <= end : lineNumber === start,\n    )\n    return inRange\n  }\n}\n\ninterface HighlightProps {\n  codeString: string\n  language: Language\n  theme: PrismTheme\n  metastring?: string\n  showLines?: boolean\n}\n\nfunction Highlight({\n  codeString,\n  language,\n  metastring,\n  showLines,\n  ...props\n}: HighlightProps) {\n  const shouldHighlightLine = calculateLinesToHighlight(metastring)\n\n  return (\n    <BaseHighlight\n      {...defaultProps}\n      code={codeString}\n      language={language}\n      {...props}\n    >\n      {({ className, style, tokens, getLineProps, getTokenProps }) => (\n        <div style={liveEditorStyle} data-language={language}>\n          <pre className={className} style={style}>\n            {tokens.map((line, i) => {\n              const lineProps = getLineProps({ line, key: i })\n              return (\n                <chakra.div\n                  px=\"5\"\n                  bg={shouldHighlightLine(i) ? \"whiteAlpha.200\" : undefined}\n                  {...lineProps}\n                >\n                  {showLines && (\n                    <chakra.span opacity={0.3} mr=\"6\" fontSize=\"xs\">\n                      {i + 1}\n                    </chakra.span>\n                  )}\n                  {line.map((token, key) => (\n                    <span {...getTokenProps({ token, key })} />\n                  ))}\n                </chakra.div>\n              )\n            })}\n          </pre>\n        </div>\n      )}\n    </BaseHighlight>\n  )\n}\n\nexport default Highlight\n"]},"metadata":{},"sourceType":"module"}
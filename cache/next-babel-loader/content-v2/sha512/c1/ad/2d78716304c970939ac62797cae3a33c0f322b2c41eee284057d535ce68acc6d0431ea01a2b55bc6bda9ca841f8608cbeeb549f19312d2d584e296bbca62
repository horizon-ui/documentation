{"ast":null,"code":"import * as React from \"react\";\nexport function useScrollSpy(selectors, options) {\n  const [activeId, setActiveId] = React.useState();\n  const observer = React.useRef();\n  React.useEffect(() => {\n    const elements = selectors.map(selector => document.querySelector(selector));\n\n    if (observer.current) {\n      observer.current.disconnect();\n    }\n\n    observer.current = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry !== null && entry !== void 0 && entry.isIntersecting) {\n          setActiveId(entry.target.getAttribute(\"id\"));\n        }\n      });\n    }, options);\n    elements.forEach(el => observer.current.observe(el));\n    return () => observer.current.disconnect();\n  }, [selectors]);\n  return activeId;\n}","map":{"version":3,"sources":["/Users/vladmihalache/Documents/GitHub/documentation/website/src/hooks/use-scrollspy.ts"],"names":["React","useScrollSpy","selectors","options","activeId","setActiveId","useState","observer","useRef","useEffect","elements","map","selector","document","querySelector","current","disconnect","IntersectionObserver","entries","forEach","entry","isIntersecting","target","getAttribute","el","observe"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAO,SAASC,YAAT,CACLC,SADK,EAELC,OAFK,EAGL;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,KAAK,CAACM,QAAN,EAAhC;AACA,QAAMC,QAAQ,GAAGP,KAAK,CAACQ,MAAN,EAAjB;AACAR,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACpB,UAAMC,QAAQ,GAAGR,SAAS,CAACS,GAAV,CAAeC,QAAD,IAC7BC,QAAQ,CAACC,aAAT,CAAuBF,QAAvB,CADe,CAAjB;;AAGA,QAAIL,QAAQ,CAACQ,OAAb,EAAsB;AACpBR,MAAAA,QAAQ,CAACQ,OAAT,CAAiBC,UAAjB;AACD;;AACDT,IAAAA,QAAQ,CAACQ,OAAT,GAAmB,IAAIE,oBAAJ,CAA0BC,OAAD,IAAa;AACvDA,MAAAA,OAAO,CAACC,OAAR,CAAiBC,KAAD,IAAW;AACzB,YAAIA,KAAJ,aAAIA,KAAJ,eAAIA,KAAK,CAAEC,cAAX,EAA2B;AACzBhB,UAAAA,WAAW,CAACe,KAAK,CAACE,MAAN,CAAaC,YAAb,CAA0B,IAA1B,CAAD,CAAX;AACD;AACF,OAJD;AAKD,KANkB,EAMhBpB,OANgB,CAAnB;AAOAO,IAAAA,QAAQ,CAACS,OAAT,CAAkBK,EAAD,IAAQjB,QAAQ,CAACQ,OAAT,CAAiBU,OAAjB,CAAyBD,EAAzB,CAAzB;AACA,WAAO,MAAMjB,QAAQ,CAACQ,OAAT,CAAiBC,UAAjB,EAAb;AACD,GAhBD,EAgBG,CAACd,SAAD,CAhBH;AAkBA,SAAOE,QAAP;AACD","sourcesContent":["import * as React from \"react\"\n\nexport function useScrollSpy(\n  selectors: string[],\n  options?: IntersectionObserverInit,\n) {\n  const [activeId, setActiveId] = React.useState<string>()\n  const observer = React.useRef<IntersectionObserver>()\n  React.useEffect(() => {\n    const elements = selectors.map((selector) =>\n      document.querySelector(selector),\n    )\n    if (observer.current) {\n      observer.current.disconnect()\n    }\n    observer.current = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry?.isIntersecting) {\n          setActiveId(entry.target.getAttribute(\"id\"))\n        }\n      })\n    }, options)\n    elements.forEach((el) => observer.current.observe(el))\n    return () => observer.current.disconnect()\n  }, [selectors])\n\n  return activeId\n}\n"]},"metadata":{},"sourceType":"module"}
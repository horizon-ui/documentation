{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/vladmihalache/Documents/GitHub/documentation/website/layouts/index.tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport PageContainer from \"components/page-container\";\nimport dynamic from \"next/dynamic\";\nvar MDXLayout = dynamic(_c = function _c() {\n  return import(\"layouts/mdx\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"layouts/mdx\")];\n    },\n    modules: [\"layouts/mdx\"]\n  }\n});\n_c2 = MDXLayout;\nexport default function DefaultLayout(_ref) {\n  var children = _ref.children,\n      frontMatter = _ref.frontMatter;\n  var slug = frontMatter.slug;\n  var layoutMap = {\n    guides: __jsx(MDXLayout, {\n      frontmatter: frontMatter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }\n    }, children),\n    docs: __jsx(MDXLayout, {\n      frontmatter: frontMatter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }\n    }, children),\n    changelog: __jsx(MDXLayout, {\n      frontmatter: frontMatter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 16\n      }\n    }, children),\n    \"default\": __jsx(PageContainer, {\n      frontmatter: frontMatter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 7\n      }\n    }, children)\n  };\n  var layout = Object.entries(layoutMap).find(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 1),\n        path = _ref3[0];\n\n    return String(slug).startsWith(\"/\".concat(path));\n  });\n  if (!layout) return layoutMap[\"default\"];\n  return layout[1];\n}\n_c3 = DefaultLayout;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MDXLayout$dynamic\");\n$RefreshReg$(_c2, \"MDXLayout\");\n$RefreshReg$(_c3, \"DefaultLayout\");","map":{"version":3,"sources":["/Users/vladmihalache/Documents/GitHub/documentation/website/layouts/index.tsx"],"names":["React","PageContainer","dynamic","MDXLayout","DefaultLayout","children","frontMatter","slug","layoutMap","guides","docs","changelog","layout","Object","entries","find","path","String","startsWith"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA,IAAMC,SAAS,GAAGD,OAAO,MAAC;AAAA,SAAM,OAAO,aAAP,CAAN;AAAA,CAAD;AAAA;AAAA;AAAA,kCAAc,aAAd;AAAA;AAAA,cAAc,aAAd;AAAA;AAAA,EAAzB;MAAMC,S;AAEN,eAAe,SAASC,aAAT,OAAkD;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAfC,WAAe,QAAfA,WAAe;AAAA,MACvDC,IADuD,GAC9CD,WAD8C,CACvDC,IADuD;AAG/D,MAAMC,SAAS,GAAG;AAChBC,IAAAA,MAAM,EAAE,MAAC,SAAD;AAAW,MAAA,WAAW,EAAEH,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsCD,QAAtC,CADQ;AAEhBK,IAAAA,IAAI,EAAE,MAAC,SAAD;AAAW,MAAA,WAAW,EAAEJ,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsCD,QAAtC,CAFU;AAGhBM,IAAAA,SAAS,EAAE,MAAC,SAAD;AAAW,MAAA,WAAW,EAAEL,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsCD,QAAtC,CAHK;AAIhB,eACE,MAAC,aAAD;AAAe,MAAA,WAAW,EAAEC,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0CD,QAA1C;AALc,GAAlB;AASA,MAAMO,MAAM,GAAGC,MAAM,CAACC,OAAP,CAAeN,SAAf,EAA0BO,IAA1B,CAA+B;AAAA;AAAA,QAAEC,IAAF;;AAAA,WAC5CC,MAAM,CAACV,IAAD,CAAN,CAAaW,UAAb,YAA4BF,IAA5B,EAD4C;AAAA,GAA/B,CAAf;AAIA,MAAI,CAACJ,MAAL,EAAa,OAAOJ,SAAS,WAAhB;AAEb,SAAOI,MAAM,CAAC,CAAD,CAAb;AACD;MAnBuBR,a","sourcesContent":["import * as React from \"react\"\nimport PageContainer from \"components/page-container\"\nimport dynamic from \"next/dynamic\"\n\nconst MDXLayout = dynamic(() => import(\"layouts/mdx\"))\n\nexport default function DefaultLayout({ children, frontMatter }) {\n  const { slug } = frontMatter\n\n  const layoutMap = {\n    guides: <MDXLayout frontmatter={frontMatter}>{children}</MDXLayout>,\n    docs: <MDXLayout frontmatter={frontMatter}>{children}</MDXLayout>,\n    changelog: <MDXLayout frontmatter={frontMatter}>{children}</MDXLayout>,\n    default: (\n      <PageContainer frontmatter={frontMatter}>{children}</PageContainer>\n    ),\n  }\n\n  const layout = Object.entries(layoutMap).find(([path]) =>\n    String(slug).startsWith(`/${path}`),\n  )\n\n  if (!layout) return layoutMap.default\n\n  return layout[1]\n}\n"]},"metadata":{},"sourceType":"module"}
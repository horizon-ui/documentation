{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/vladmihalache/Documents/GitHub/documentation/website/src/components/props-table.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as ComponentProps from \"@chakra-ui/props-docs\";\nimport { chakra, Code, Flex, HStack, Stack, theme } from \"@chakra-ui/react\";\nimport Link from \"next/link\";\nimport * as React from \"react\";\nimport { convertBackticksToInlineCode } from \"utils/convert-backticks-to-inline-code\";\nimport { InlineCode } from \"components/mdx-components/inline-code\";\nimport { Anchor } from \"components/mdx-components/anchor\";\n/**\n * A map of components that use foreign theme key.\n * The key is name of the component and value is the theme key it uses.\n */\n\nvar themeComponentKeyAliases = {\n  AlertDialog: \"Modal\",\n  IconButton: \"Button\"\n};\n\nvar PropsTable = function PropsTable(_ref) {\n  _s();\n\n  var of = _ref.of,\n      _ref$omit = _ref.omit,\n      omit = _ref$omit === void 0 ? [\"isTruncated\", \"layerStyle\", \"noOfLines\", \"textStyle\", \"orientation\", \"styleConfig\"] : _ref$omit,\n      only = _ref.only;\n  var propList = React.useMemo(function () {\n    return makePropsTable({\n      of: of,\n      omit: omit,\n      only: only\n    });\n  }, [of, omit, only]);\n\n  if (!propList.length) {\n    // this error breaks the build to notify you when there would be an empty table\n    throw new Error(\"No props left to render for component \".concat(of, \".\\nRemove the use of <PropsTable of=\\\"\").concat(of, \"\\\" /> for this component in the docs.\"));\n  }\n\n  return __jsx(Stack, {\n    spacing: \"10\",\n    my: \"10\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, propList.map(function (prop) {\n    return __jsx(chakra.div, {\n      key: prop.name,\n      css: {\n        width: \"100%\",\n        fontSize: \"0.95em\",\n        borderCollapse: \"collapse\",\n        \".row\": {\n          minWidth: 100,\n          width: \"20%\",\n          fontSize: \"0.9em\",\n          textAlign: \"start\",\n          fontWeight: 500,\n          padding: \"4px 16px 4px 8px\",\n          whiteSpace: \"nowrap\",\n          verticalAlign: \"baseline\"\n        },\n        \".cell\": {\n          padding: \"4px 0px 4px 8px\",\n          width: \"100%\"\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, __jsx(chakra.div, {\n      css: {\n        textAlign: \"start\",\n        fontSize: \"1em\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, __jsx(chakra.h3, {\n      css: {\n        fontSize: \"0.8em\",\n        paddingBottom: 16,\n        marginBottom: 16,\n        borderBottomWidth: 1\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, __jsx(HStack, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }, __jsx(Code, {\n      colorScheme: \"purple\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, prop.name), prop.required && __jsx(Code, {\n      colorScheme: \"red\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 35\n      }\n    }, \"required\")))), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, prop.description && __jsx(Flex, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      className: \"row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, \"Description\"), __jsx(\"div\", {\n      className: \"cell\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 19\n      }\n    }, convertBackticksToInlineCode(prop.description)))), __jsx(Flex, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }, \"Type\"), __jsx(\"div\", {\n      className: \"cell\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }\n    }, __jsx(InlineCode, {\n      whiteSpace: \"wrap\",\n      fontSize: \"0.8em\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, prop.type))), prop.defaultValue && __jsx(Flex, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      className: \"row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, \"Default\"), __jsx(\"div\", {\n      className: \"cell\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, __jsx(InlineCode, {\n      whiteSpace: \"wrap\",\n      fontSize: \"0.8em\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 19\n      }\n    }, prop.defaultValue)))));\n  }));\n};\n\n_s(PropsTable, \"Ty8ednIlyuNp8vteTOTC3HwGqxU=\");\n\n_c = PropsTable;\nexport default PropsTable;\nvar TYPE_GENERIC_THEMABLE = \"(string & {})\";\n\nfunction makePropsTable(_ref2) {\n  var _ComponentProps$of,\n      _themeComponentKeyAli,\n      _this2 = this;\n\n  var of = _ref2.of,\n      omit = _ref2.omit,\n      only = _ref2.only;\n  var props = (_ComponentProps$of = ComponentProps[of]) === null || _ComponentProps$of === void 0 ? void 0 : _ComponentProps$of.props;\n  var themeKey = (_themeComponentKeyAli = themeComponentKeyAliases[of]) !== null && _themeComponentKeyAli !== void 0 ? _themeComponentKeyAli : of;\n  var componentTheme = theme.components[themeKey];\n\n  var featNotImplemented = function featNotImplemented(feat) {\n    return __jsx(React.Fragment, null, feat, \" for \", __jsx(InlineCode, {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 18\n      }\n    }, of), \" are not implemented in the default theme. You can\", \" \", __jsx(Link, {\n      href: \"\",\n      passHref: true,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }\n    }, __jsx(Anchor, {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, \"extend the theme\")), \" \", \"to implement them.\");\n  };\n\n  if (!props) return [];\n  return Object.entries(props).filter(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        name = _ref4[0];\n\n    if (Array.isArray(only) && !only.includes(name)) {\n      return false;\n    }\n\n    if (Array.isArray(omit) && omit.includes(name)) {\n      return false;\n    }\n\n    return true;\n  }).map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n        name = _ref6[0],\n        _ref6$ = _ref6[1],\n        defaultValue = _ref6$.defaultValue,\n        description = _ref6$.description,\n        required = _ref6$.required,\n        type = _ref6$.type;\n\n    var prop = {\n      name: name,\n      defaultValue: defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.value,\n      description: description,\n      required: required,\n      type: type.name\n    };\n\n    if (name === \"size\") {\n      var _componentTheme$defau;\n\n      var defaultSize = componentTheme === null || componentTheme === void 0 ? void 0 : (_componentTheme$defau = componentTheme.defaultProps) === null || _componentTheme$defau === void 0 ? void 0 : _componentTheme$defau.size;\n\n      if (defaultSize != null) {\n        prop.defaultValue = \"\\\"\".concat(defaultSize, \"\\\"\");\n      }\n\n      if (prop.type === TYPE_GENERIC_THEMABLE) {\n        prop.type = \"string\";\n        prop.description = featNotImplemented(\"Sizes\");\n      } else {\n        prop.type = omitGenericThemableType(prop.type);\n      }\n    }\n\n    if (name === \"variant\") {\n      var _componentTheme$defau2;\n\n      var defaultVariant = componentTheme === null || componentTheme === void 0 ? void 0 : (_componentTheme$defau2 = componentTheme.defaultProps) === null || _componentTheme$defau2 === void 0 ? void 0 : _componentTheme$defau2.variant;\n\n      if (defaultVariant != null) {\n        prop.defaultValue = \"\\\"\".concat(defaultVariant, \"\\\"\");\n      }\n\n      if (prop.type === TYPE_GENERIC_THEMABLE) {\n        prop.type = \"string\";\n        prop.description = featNotImplemented(\"Variants\");\n      } else {\n        prop.type = omitGenericThemableType(prop.type);\n      }\n    }\n\n    if (name === \"colorScheme\") {\n      var _componentTheme$defau3;\n\n      prop.type = omitGenericThemableType(prop.type);\n      var defaultColorScheme = componentTheme === null || componentTheme === void 0 ? void 0 : (_componentTheme$defau3 = componentTheme.defaultProps) === null || _componentTheme$defau3 === void 0 ? void 0 : _componentTheme$defau3.colorScheme;\n\n      if (defaultColorScheme != null) {\n        prop.defaultValue = \"\\\"\".concat(defaultColorScheme, \"\\\"\");\n      } else {\n        prop.description = featNotImplemented(\"Color Schemes\");\n      }\n    }\n\n    return prop;\n  }).sort(function (propA, propB) {\n    var aRequired = propA.required ? 1000 : 0;\n    var bRequired = propB.required ? 1000 : 0;\n    var requiredOffset = aRequired - bRequired;\n    return String(propA.name).localeCompare(propB.name) - requiredOffset;\n  });\n}\n\nvar omitGenericThemableType = function omitGenericThemableType(type) {\n  return type.split(\" | \").filter(function (type) {\n    return type !== TYPE_GENERIC_THEMABLE;\n  }).join(\" | \");\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"PropsTable\");","map":{"version":3,"sources":["/Users/vladmihalache/Documents/GitHub/documentation/website/src/components/props-table.tsx"],"names":["ComponentProps","chakra","Code","Flex","HStack","Stack","theme","Link","React","convertBackticksToInlineCode","InlineCode","Anchor","themeComponentKeyAliases","AlertDialog","IconButton","PropsTable","of","omit","only","propList","useMemo","makePropsTable","length","Error","map","prop","name","width","fontSize","borderCollapse","minWidth","textAlign","fontWeight","padding","whiteSpace","verticalAlign","paddingBottom","marginBottom","borderBottomWidth","required","description","type","defaultValue","TYPE_GENERIC_THEMABLE","props","themeKey","componentTheme","components","featNotImplemented","feat","Object","entries","filter","Array","isArray","includes","value","defaultSize","defaultProps","size","omitGenericThemableType","defaultVariant","variant","defaultColorScheme","colorScheme","sort","propA","propB","aRequired","bRequired","requiredOffset","String","localeCompare","split","join"],"mappings":"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","sourcesContent":["import * as ComponentProps from \"@chakra-ui/props-docs\"\nimport { chakra, Code, Flex, HStack, Stack, theme } from \"@chakra-ui/react\"\nimport Link from \"next/link\"\nimport * as React from \"react\"\nimport { convertBackticksToInlineCode } from \"utils/convert-backticks-to-inline-code\"\nimport { InlineCode } from \"components/mdx-components/inline-code\"\nimport { Anchor } from \"components/mdx-components/anchor\"\n\n/**\n * A map of components that use foreign theme key.\n * The key is name of the component and value is the theme key it uses.\n */\nconst themeComponentKeyAliases = {\n  AlertDialog: \"Modal\",\n  IconButton: \"Button\",\n}\n\nexport type PropsTableProps = {\n  /**\n   * displayName of the target component\n   */\n  of: string\n  /**\n   * prop names to omit\n   */\n  omit?: string[] | null\n  /**\n   * Render only given prop names\n   * Has precedence over `omit`\n   */\n  only?: string[] | null\n}\n\nconst PropsTable = ({\n  of,\n  omit = [\n    \"isTruncated\",\n    \"layerStyle\",\n    \"noOfLines\",\n    \"textStyle\",\n    \"orientation\",\n    \"styleConfig\",\n  ],\n  only,\n}: PropsTableProps) => {\n  const propList = React.useMemo(() => makePropsTable({ of, omit, only }), [\n    of,\n    omit,\n    only,\n  ])\n\n  if (!propList.length) {\n    // this error breaks the build to notify you when there would be an empty table\n    throw new Error(\n      `No props left to render for component ${of}.\nRemove the use of <PropsTable of=\"${of}\" /> for this component in the docs.`,\n    )\n  }\n\n  return (\n    <Stack spacing=\"10\" my=\"10\">\n      {propList.map((prop) => (\n        <chakra.div\n          key={prop.name}\n          css={{\n            width: \"100%\",\n            fontSize: \"0.95em\",\n            borderCollapse: \"collapse\",\n            \".row\": {\n              minWidth: 100,\n              width: \"20%\",\n              fontSize: \"0.9em\",\n              textAlign: \"start\",\n              fontWeight: 500,\n              padding: \"4px 16px 4px 8px\",\n              whiteSpace: \"nowrap\",\n              verticalAlign: \"baseline\",\n            },\n            \".cell\": {\n              padding: \"4px 0px 4px 8px\",\n              width: \"100%\",\n            },\n          }}\n        >\n          <chakra.div css={{ textAlign: \"start\", fontSize: \"1em\" }}>\n            <chakra.h3\n              css={{\n                fontSize: \"0.8em\",\n                paddingBottom: 16,\n                marginBottom: 16,\n                borderBottomWidth: 1,\n              }}\n            >\n              <HStack>\n                <Code colorScheme=\"purple\">{prop.name}</Code>\n                {prop.required && <Code colorScheme=\"red\">required</Code>}\n              </HStack>\n            </chakra.h3>\n          </chakra.div>\n          <div>\n            {prop.description && (\n              <Flex>\n                <div className=\"row\">Description</div>\n                <div className=\"cell\">\n                  <p>{convertBackticksToInlineCode(prop.description)}</p>\n                </div>\n              </Flex>\n            )}\n            <Flex>\n              <div className=\"row\">Type</div>\n              <div className=\"cell\">\n                <InlineCode whiteSpace=\"wrap\" fontSize=\"0.8em\">\n                  {prop.type}\n                </InlineCode>\n              </div>\n            </Flex>\n            {prop.defaultValue && (\n              <Flex>\n                <div className=\"row\">Default</div>\n                <div className=\"cell\">\n                  <InlineCode whiteSpace=\"wrap\" fontSize=\"0.8em\">\n                    {prop.defaultValue}\n                  </InlineCode>\n                </div>\n              </Flex>\n            )}\n          </div>\n        </chakra.div>\n      ))}\n    </Stack>\n  )\n}\n\nexport default PropsTable\n\ninterface MakePropsTableOptions extends PropsTableProps {}\n\nconst TYPE_GENERIC_THEMABLE = \"(string & {})\"\n\nfunction makePropsTable({ of, omit, only }: MakePropsTableOptions) {\n  const props = ComponentProps[of]?.props as Record<string, any>\n\n  const themeKey = themeComponentKeyAliases[of] ?? of\n  const componentTheme = theme.components[themeKey]\n\n  const featNotImplemented = (feat: string) => (\n    <>\n      {feat} for <InlineCode>{of}</InlineCode> are not implemented in the\n      default theme. You can{\" \"}\n      <Link href=\"\" passHref>\n        <Anchor>extend the theme</Anchor>\n      </Link>{\" \"}\n      to implement them.\n    </>\n  )\n\n  if (!props) return []\n\n  return Object.entries(props)\n    .filter(([name]) => {\n      if (Array.isArray(only) && !only.includes(name)) {\n        return false\n      }\n\n      if (Array.isArray(omit) && omit.includes(name)) {\n        return false\n      }\n\n      return true\n    })\n    .map(([name, { defaultValue, description, required, type }]) => {\n      const prop = {\n        name,\n        defaultValue: defaultValue?.value,\n        description,\n        required,\n        type: type.name,\n      }\n\n      if (name === \"size\") {\n        const defaultSize = componentTheme?.defaultProps?.size\n\n        if (defaultSize != null) {\n          prop.defaultValue = `\"${defaultSize}\"`\n        }\n\n        if (prop.type === TYPE_GENERIC_THEMABLE) {\n          prop.type = \"string\"\n          prop.description = featNotImplemented(\"Sizes\")\n        } else {\n          prop.type = omitGenericThemableType(prop.type)\n        }\n      }\n\n      if (name === \"variant\") {\n        const defaultVariant = componentTheme?.defaultProps?.variant\n\n        if (defaultVariant != null) {\n          prop.defaultValue = `\"${defaultVariant}\"`\n        }\n\n        if (prop.type === TYPE_GENERIC_THEMABLE) {\n          prop.type = \"string\"\n          prop.description = featNotImplemented(\"Variants\")\n        } else {\n          prop.type = omitGenericThemableType(prop.type)\n        }\n      }\n\n      if (name === \"colorScheme\") {\n        prop.type = omitGenericThemableType(prop.type)\n\n        const defaultColorScheme = componentTheme?.defaultProps?.colorScheme\n\n        if (defaultColorScheme != null) {\n          prop.defaultValue = `\"${defaultColorScheme}\"`\n        } else {\n          prop.description = featNotImplemented(\"Color Schemes\")\n        }\n      }\n\n      return prop\n    })\n    .sort((propA, propB) => {\n      const aRequired = propA.required ? 1000 : 0\n      const bRequired = propB.required ? 1000 : 0\n      const requiredOffset = aRequired - bRequired\n      return String(propA.name).localeCompare(propB.name) - requiredOffset\n    })\n}\n\nconst omitGenericThemableType = (type: string) =>\n  type\n    .split(\" | \")\n    .filter((type) => type !== TYPE_GENERIC_THEMABLE)\n    .join(\" | \")\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { withSuperJSONPage as _withSuperJSONPage } from \"babel-plugin-superjson-next/tools\";\nimport { withSuperJSONProps as _withSuperJSONProps } from \"babel-plugin-superjson-next/tools\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { MDXRemote } from \"next-mdx-remote\";\nimport loadMDXFromPages from \"utils/load-mdx-dir\";\nimport { MDXComponents } from \"components/mdx-components\";\nimport Layout from \"layouts\";\nconst CONTENT_PATH = \"blog\";\n\nfunction Page({\n  mdxSource,\n  frontMatter\n}) {\n  return __jsx(Layout, {\n    frontMatter: frontMatter\n  }, __jsx(MDXRemote, _extends({}, mdxSource, {\n    components: MDXComponents\n  })));\n}\n\nexport default _withSuperJSONPage(Page);\nexport async function getStaticPaths() {\n  const pages = await loadMDXFromPages(CONTENT_PATH);\n  const paths = pages.map(({\n    slug\n  }) => {\n    return {\n      params: {\n        slug: slug.slice(1) // remove the first `/`\n        .split(\"/\") // split to get an array\n        .filter(item => item !== CONTENT_PATH) // remove the CONTENT_PATH since this isnt needed in static paths\n\n      }\n    };\n  });\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport const getStaticProps = _withSuperJSONProps(async function getStaticProps({\n  params\n}) {\n  const slug = params.slug;\n  const combinedPageSlug = `/${[CONTENT_PATH, ...slug].join(\"/\")}`;\n  const pages = await loadMDXFromPages(CONTENT_PATH);\n  const page = pages.find(page => {\n    return combinedPageSlug === page.slug;\n  });\n\n  if (!page) {\n    throw new Error(`No content found for slug \"${slug.join(\"/\")}\"`);\n  }\n\n  const {\n    mdxSource\n  } = page,\n        frontMatter = _objectWithoutProperties(page, [\"mdxSource\"]);\n\n  return {\n    props: {\n      mdxSource,\n      frontMatter\n    }\n  };\n}, []);","map":null,"metadata":{},"sourceType":"module"}